export type IfEmpty<T, U, V> = T[keyof T] extends never ? U : V;
export type Named<T, N> = Extract<T, {
    name: N;
}>;
export declare const entries: <K extends string | number | symbol, V>(o: Record<K, V>) => [K, V][];
export declare const fromEntries: <K extends string | number | symbol, V>(entries: readonly [K, V][]) => Record<K, V>;
