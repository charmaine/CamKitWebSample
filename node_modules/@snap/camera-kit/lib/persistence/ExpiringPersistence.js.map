{"version":3,"file":"ExpiringPersistence.js","sourceRoot":"","sources":["../../src/persistence/ExpiringPersistence.ts"],"names":[],"mappings":"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","sourcesContent":["import { ensureError } from \"../common/errorHelpers\";\nimport { getLogger } from \"../logger/logger\";\nimport { Persistence, ValidKey } from \"./Persistence\";\n\nconst logger = getLogger(\"ExpiringPersistence\");\n\n/**\n * Create a Persistence that will remove entries after they expire.\n *\n * An expiration function must be provided, which is called each time a value is stored. It must return the expiration\n * time for that value, given in seconds from now. For example, to expire a value 24 hours after it is stored, the\n * expiration function should return 86400 (the number of seconds in 24 hours).\n */\nexport class ExpiringPersistence<T> implements Persistence<T> {\n    constructor(\n        private readonly expiration: (value: T) => number,\n        private readonly persistence: Persistence<[number, T]>\n    ) {\n        this.removeExpired().catch(() => {\n            logger.warn(\"Failed to cleanup expired entries on startup.\");\n        });\n    }\n\n    get size(): number {\n        return this.persistence.size;\n    }\n\n    async retrieve(key: ValidKey): Promise<T | undefined> {\n        const [expiry, value] = (await this.persistence.retrieve(key)) ?? [];\n        if (value === undefined || expiry === undefined) return undefined;\n\n        if (Date.now() > expiry) {\n            await this.persistence.remove(key).catch((error) => {\n                logger.warn(`Key ${key} is expired, but removing it from persistence failed.`, ensureError(error));\n            });\n            return undefined;\n        }\n        return value;\n    }\n\n    async retrieveAll(): Promise<Array<[ValidKey, T]>> {\n        const now = Date.now();\n        return (await this.persistence.retrieveAll()).filter(([, [expiry]]) => expiry >= now).map(([, v]) => v);\n    }\n\n    remove(key: ValidKey): Promise<void> {\n        return this.persistence.remove(key);\n    }\n\n    async removeAll(): Promise<T[]> {\n        const results = await this.persistence.removeAll();\n        return results.map(([, v]) => v);\n    }\n\n    async removeExpired(): Promise<void> {\n        for (const [key, [expiry]] of await this.persistence.retrieveAll()) {\n            if (Date.now() >= expiry) {\n                await this.persistence\n                    .remove(key)\n                    .catch((error) => logger.warn(`Failed to remove expired key ${key}.`, error));\n            }\n        }\n    }\n\n    store(value: T): Promise<ValidKey>;\n    store(key: ValidKey, value: T): Promise<ValidKey>;\n    store(keyOrValue: T | ValidKey, maybeValue?: T): Promise<ValidKey> {\n        const [key, value] =\n            maybeValue === undefined ? [undefined, keyOrValue as T] : [keyOrValue as ValidKey, maybeValue];\n        const expiry = Date.now() + this.expiration(value) * 1000;\n        return key === undefined\n            ? this.persistence.store([expiry, value])\n            : this.persistence.store(key, [expiry, value]);\n    }\n}\n"]}