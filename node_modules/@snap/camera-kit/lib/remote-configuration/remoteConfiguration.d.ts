import { Observable } from "rxjs";
import { CameraKitApiHostname, CameraKitConfiguration } from "../configuration";
import { ConfigTargetingRequest } from "../generated-proto/pb_schema/cdp/cof/config_request";
import { ConfigResult } from "../generated-proto/pb_schema/cdp/cof/config_result";
import { Namespace } from "../generated-proto/pb_schema/cdp/cof/namespace";
import { GetInitializationConfigResponse } from "../generated-proto/pb_schema/camera_kit/v3/service";
import { FetchHandler } from "../handlers";
import { cofHandlerFactory } from "./cofHandler";
type SupportedNamespaces = Namespace.LENS_CORE | Namespace.CAMERA_KIT_CORE | Namespace.LENS_CORE_CONFIG;
export type InitializationConfig = GetInitializationConfigResponse;
export declare class RemoteConfiguration {
    private readonly configById;
    private readonly initializationConfig;
    constructor(lensPerformance: CameraKitConfiguration["lensPerformance"], apiHostname: CameraKitApiHostname, cofHandler: ReturnType<typeof cofHandlerFactory>, fetchHandler: FetchHandler);
    /**
     * COF configuration.
     */
    get(configId: string): Observable<ConfigResult[]>;
    /**
     * Configuration that is provided by Camera Kit backend.
     */
    getInitializationConfig(): Observable<InitializationConfig>;
    getNamespace(namespace: SupportedNamespaces): Observable<ConfigResult[]>;
}
export declare const remoteConfigurationFactory: {
    (args_0: CameraKitConfiguration, args_1: import("../handlers/HandlerChainBuilder").Handler<Partial<ConfigTargetingRequest>, import("../generated-proto/pb_schema/cdp/cof/config_response").ConfigTargetingResponse, import("./cofHandler").Metadata & {
        signal?: AbortSignal | null | undefined;
        isSideEffect?: boolean | undefined;
    }>, args_2: FetchHandler): RemoteConfiguration;
    token: "remoteConfiguration";
    dependencies: readonly ["configuration", "cofHandler", "cameraKitServiceFetchHandler"];
};
export {};
