{"version":3,"file":"jest.matchers.js","sourceRoot":"","sources":["../../src/__tests__/jest.matchers.ts"],"names":[],"mappings":"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","sourcesContent":["declare global {\n    namespace jest {\n        interface Expect {\n            errorContaining<T extends (string | ErrorLike)[]>(...errors: T): T;\n        }\n        interface Matchers<R> {\n            toBeCalledBefore(secondMock: jest.Mock): R;\n            toEqualError(...errors: string[] | ErrorLike[]): R;\n        }\n    }\n}\n\ntype ErrorLike = { message: string; name: string };\n\nfunction areErrorsEqual(error: Error, errorOrMessageOrName: string | ErrorLike) {\n    if (typeof errorOrMessageOrName === \"string\") {\n        return error.message === errorOrMessageOrName || error.name === errorOrMessageOrName;\n    }\n    return error.message === errorOrMessageOrName.message && error.name === errorOrMessageOrName.name;\n}\n\nfunction expectErrorsToEqual(utils: jest.MatcherUtils[\"utils\"], error: any, ...errors: (string | ErrorLike)[]) {\n    expect(error).toBeInstanceOf(Error);\n    for (const errorOrMessage of errors) {\n        if (!areErrorsEqual(error, errorOrMessage)) {\n            const receivedMessage = utils.printReceived(error.message);\n            const receivedName = utils.printReceived(error.name);\n            const expected = utils.printExpected(errorOrMessage);\n            throw new Error(\n                `Expected ${receivedMessage} error message (or ${receivedName} error name) to equal ${expected}.`\n            );\n        }\n        error = error.cause;\n    }\n}\n\nconst smallest = (numbers: number[]) => numbers.reduce((a, b) => (a < b ? a : b));\nconst toBeCalledBeforeMessage = (pass: boolean, a: number, b: number) => () =>\n    `Expected first mock to${pass ? \" not\" : \"\"} have been called before second. First mock call order:\\n` +\n    `\\t${a}\\nSecond mock call order:\\n\\t${b}`;\nexpect.extend({\n    /**\n     * Usage: expect(mockA).toBeCalledBefore(mockB)\n     */\n    toBeCalledBefore(firstMock: jest.Mock, secondMock: jest.Mock) {\n        expect(firstMock).toBeCalled();\n        expect(secondMock).toBeCalled();\n        const firstOrder = smallest(firstMock.mock.invocationCallOrder);\n        const secondOrder = smallest(secondMock.mock.invocationCallOrder);\n        const pass = firstOrder < secondOrder;\n        return { pass, message: toBeCalledBeforeMessage(pass, firstOrder, secondOrder) };\n    },\n\n    /**\n     * Use .toEqualError() to compare error objects.\n     * This is useful for comparing nested error objects.\n     * @param actualError Error object.\n     * @param expectedErrors Error like objects, messages or names. Multiple values represent nested error chain.\n     */\n    toEqualError(actualError: any, ...expectedErrors: string[] | ErrorLike[]) {\n        try {\n            expectErrorsToEqual(this.utils, actualError, ...expectedErrors);\n            return {\n                pass: true,\n                message: () => \"\",\n            };\n        } catch (e) {\n            return {\n                pass: false,\n                message: () => (e as any).message,\n            };\n        }\n    },\n\n    /**\n     * Allows to do expecations like expect(fn).toBeCalledWith(expect.errorContaining(\"BOOM!\"))\n     */\n    errorContaining(actualError: Error, ...expectedErrors: (string | ErrorLike)[]) {\n        expectErrorsToEqual(this.utils, actualError, ...expectedErrors);\n        return {\n            pass: true,\n            message: () => \"\",\n        };\n    },\n});\n\n// TS compiler needs to identify this as a module, which requires an import/export statement -- otherwise it will not\n// allow augmenting the global scope with additional type definitions.\nexport {};\n"]}