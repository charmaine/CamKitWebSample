export type Deferred<T> = Promise<T> & {
    resolve: (v: T) => Promise<void>;
    reject: (e: unknown) => Promise<void>;
};
/**
 * Creates a promise that can be resolved/rejected manually later.
 *```ts
 * const promise = createDeferred();
 * // when some piece of code awaits the promise:
 * await promise
 * // we can resovle that promise when it is more suitable for us:
 * await promise.resolve();
 *```
 * @returns A promise wtih resolve() and reject() methods.
 */
export declare function createDeferred<T>(): Deferred<T>;
