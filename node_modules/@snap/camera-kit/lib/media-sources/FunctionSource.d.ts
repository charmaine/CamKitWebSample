import { CameraKitSource, CameraKitSourceOptions } from "./CameraKitSource";
/** @internal */
export type FrameFormat = "rgb" | "yuv" | "nv12";
/** @internal */
export interface FrameInput {
    format?: FrameFormat;
    imageData: ImageData;
    timestampMillis: number;
}
/** @internal */
export interface FrameOutput {
    live: ImageData;
    capture: ImageData;
}
/** @internal */
export interface MediaSourceFunction {
    (render: (frame: FrameInput) => Promise<FrameOutput>): Promise<void>;
}
/**
 * Creates a {@link CameraKitSource} from a function which provides per-frame pixel data to CameraKit.
 *
 * @param sourceFunction This function will be called in a requestAnimationFrame loop. Each time it is called, it is
 * passed a `render` function. It may call `render` and CameraKit will process the pixel data passed to `render` and
 * return a Promise of the processed pixels (along with rendering them to the normal output canvases).
 * @param options
 * @param options.cameraType By default we set this to 'user', which is the camera type most Lenses expect.
 *
 * @internal
 */
export declare const createFunctionSource: (sourceFunction: MediaSourceFunction, options?: Omit<CameraKitSourceOptions, "fpsLimit">) => CameraKitSource;
