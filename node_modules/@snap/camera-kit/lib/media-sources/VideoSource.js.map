{"version":3,"file":"VideoSource.js","sourceRoot":"","sources":["../../src/media-sources/VideoSource.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAA0B,MAAM,mBAAmB,CAAC;AAE5E,MAAM,cAAc,GAAuB;IACvC,YAAY,EAAE,IAAI,WAAW,CAAC,CAAC,CAAC;CACnC,CAAC;AAOF;;;;;;;;;;;;;;GAcG;AACH,MAAM,UAAU,iBAAiB,CAC7B,KAAuB,EACvB,UAAsD,EAAE;IAExD,MAAM,EAAE,YAAY,EAAE,mCAAQ,cAAc,GAAK,OAAO,CAAE,CAAC;IAC3D,MAAM,kBAAkB,GAAG,YAAY,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;IAE9F,OAAO,IAAI,eAAe,CACtB;QACI,KAAK,EAAE,KAAK;QACZ,kBAAkB;KACrB,EACD;QACI,QAAQ,EAAE,CAAC,MAAM,EAAE,EAAE;YACjB,sGAAsG;YACtG,8FAA8F;YAC9F,cAAc;YACd,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,GACjB,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;gBACnC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,WAAW,CAAC;gBACvC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;YAEtC,OAAO,MAAM,CAAC,aAAa,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC/C,CAAC;KACJ,EACD,OAAO,CACV,CAAC;AACN,CAAC","sourcesContent":["import { CameraKitSource, CameraKitSourceOptions } from \"./CameraKitSource\";\n\nconst defaultOptions: VideoSourceOptions = {\n    trackingData: new ArrayBuffer(0),\n};\n\n/** @category Rendering */\nexport interface VideoSourceOptions {\n    trackingData: ArrayBuffer;\n}\n\n/**\n * Create a {@link CameraKitSource} from an\n * [HTMLVideoElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement).\n *\n * @param video CameraKit performs best when the source video is 720p – arbitrary resolutions are supported, but very\n * high resolutions may not perform well.\n * @param options\n * @param options.trackingData If pre-computed tracking data exists for this video, it may be provided in order to boost\n * rendering performance (it is not typical or expected for this to be provided).\n * @param options.cameraType By default we set this to 'user', which is the camera type most Lenses expect.\n * @param options.fpsLimit By default we set no limit on FPS – if the video has a known FPS setting this limit\n * may prevent CameraKit from using more compute resources than strictly necessary.\n *\n * @category Rendering\n */\nexport function createVideoSource(\n    video: HTMLVideoElement,\n    options: CameraKitSourceOptions<VideoSourceOptions> = {}\n): CameraKitSource {\n    const { trackingData } = { ...defaultOptions, ...options };\n    const replayTrackingData = trackingData.byteLength > 0 ? { buffer: trackingData } : undefined;\n\n    return new CameraKitSource(\n        {\n            media: video,\n            replayTrackingData,\n        },\n        {\n            onAttach: (source) => {\n                // If the video element has no explicit width/height (which may be the case for elements that have not\n                // been added to the DOM or had their size set explicitly), we'll render at the video's native\n                // resolution.\n                const [width, height] =\n                    video.width === 0 || video.height === 0\n                        ? [video.videoWidth, video.videoHeight]\n                        : [video.width, video.height];\n\n                return source.setRenderSize(width, height);\n            },\n        },\n        options\n    );\n}\n"]}