import { Transform2D } from "../transforms";
import { CameraKitSource, CameraKitSourceOptions } from "./CameraKitSource";
/** @category Rendering */
export interface MediaStreamSourceOptions {
    transform: Transform2D;
    disableSourceAudio: boolean;
}
/**
 * Create a {@link CameraKitSource} from a user's media device -- this calls
 * [MediaDevices.getUserMedia](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia) to get a
 * MediaStream and then calls {@link createMediaStreamSource}.
 *
 * @param constraints Specify contraints used to get a MediaStream from a media device. By default we simply request
 * a video stream.
 * @param options
 * @param options.transform By default we horizontally mirror the video stream. The most common use-case is to obtain a
 * stream from a front-facing web cam, which requires mirroring to be viewed naturally.
 * @param options.cameraType By default we set this to 'front' to indicate a camera pointed at the user (e.g. a webcam).
 * @param options.fpsLimit By default we set no limit on FPS – if the source device has a known FPS setting this limit
 * may prevent CameraKit from using more compute resources than strictly necessary.
 * @returns A Promise, resolving to {@link CameraKitSource}
 *
 * @category Rendering
 *
 * @deprecated The helper will be removed in one of the future releases.
 * Consumer apps are responsible for acquiring a media stream,
 * which can then be supplied to {@link createMediaStreamSource}.
 */
export declare function createUserMediaSource(constraints?: MediaStreamConstraints, options?: CameraKitSourceOptions<MediaStreamSourceOptions>): Promise<CameraKitSource>;
/**
 * Create a {@link CameraKitSource} from any
 * [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream).
 *
 * @param stream Any MediaStream, such as obtained via `canvas.captureStream()` or `mediaDevices.getUserMedia()`.
 * @param options
 * @param options.transform We apply no transformation by default.
 * @param options.disableSourceAudio By default we pass audio to lens. Settings this to true will disable sending audio
 * to the lens.
 * @param options.cameraType By default we set this to 'user', which is the camera type most Lenses expect.
 * @param options.fpsLimit By default we set no limit on FPS – if the MediaStream has a known FPS setting this limit
 * may prevent CameraKit from using more compute resources than strictly necessary.
 *
 * @category Rendering
 */
export declare function createMediaStreamSource(stream: MediaStream, options?: CameraKitSourceOptions<MediaStreamSourceOptions>): CameraKitSource;
