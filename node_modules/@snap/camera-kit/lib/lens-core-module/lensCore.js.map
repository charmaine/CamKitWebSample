{"version":3,"file":"lensCore.js","sourceRoot":"","sources":["../../src/lens-core-module/lensCore.ts"],"names":[],"mappings":"AACA,OAAO,EAAiB,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AAoEnE,2GAA2G;AAC3G,qCAAqC;AACrC,MAAM,oBAAoB,GAA8D;IACpF,OAAO,EAAE,IAAI;IACb,cAAc,EAAE,IAAI;IACpB,gBAAgB,EAAE,IAAI;IACtB,WAAW,EAAE,IAAI;IACjB,UAAU,EAAE,IAAI;IAChB,wBAAwB,EAAE,IAAI;IAC9B,YAAY,EAAE,IAAI;IAClB,UAAU,EAAE,IAAI;IAChB,aAAa,EAAE,IAAI;IACnB,kBAAkB,EAAE,IAAI;IACxB,cAAc,EAAE,IAAI;IACpB,WAAW,EAAE,IAAI;IACjB,iBAAiB,EAAE,IAAI;IACvB,2BAA2B,EAAE,IAAI;IACjC,iBAAiB,EAAE,IAAI;IACvB,aAAa,EAAE,IAAI;IACnB,QAAQ,EAAE,IAAI;IACd,eAAe,EAAE,IAAI;IACrB,iBAAiB,EAAE,IAAI;CAC1B,CAAC;AAIF,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,cAA8B,EAAY,EAAE;IACvE,MAAM,aAAa,GAA0B;QACzC,UAAU,CAAC,KAAK;YACZ,OAAO,IAAI,OAAO,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,EAAE,CACxC,cAAc,CAAC,UAAU,iCAClB,KAAK,KACR,gBAAgB,EAAE,KAAK,CAAC,gBAAgB,IAAI,iBAAiB,CAAC,KAAK,CAAC,gBAAgB,CAAC,EACrF,SAAS,EACT,SAAS,EAAE,iBAAiB,CAAC,SAAS,CAAC,IACzC,CACL,CAAC;QACN,CAAC;QAED,2BAA2B,CAAC,KAAK;YAC7B,OAAO,cAAc,CAAC,2BAA2B,iCAC1C,KAAK,KACR,SAAS,EAAE,KAAK,CAAC,SAAS,IAAI,iBAAiB,CAAC,KAAK,CAAC,SAAS,CAAC,IAClE,CAAC;QACP,CAAC;KACJ,CAAC;IAEF,OAAO,IAAI,KAAK,CAAC,cAAc,EAAE;QAC7B,GAAG,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE;YAChC,qDAAqD;YACrD,IAAI,QAAQ,IAAI,aAAa,EAAE;gBAC3B,mFAAmF;gBACnF,OAAO,aAAa,CAAC,QAAuC,CAAC,CAAC;aACjE;YAED,0CAA0C;YAC1C,IAAI,QAAQ,IAAI,oBAAoB,EAAE;gBAClC,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;gBACvD,IAAI,CAAC,MAAM;oBAAE,MAAM,CAAC;gBACpB,OAAO,CAAC,KAAkF,EAAE,EAAE,CAC1F,IAAI,OAAO,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,EAAE,CACjC,MAAM,iCACC,KAAK,KACR,SAAS,EACT,SAAS,EAAE,iBAAiB,CAAC,SAAS,CAAC,IACzC,CACL,CAAC;aACT;YAED,sEAAsE;YACtE,OAAO,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACnD,CAAC;QACD,yFAAyF;KAC5F,CAAa,CAAC;AACnB,CAAC,CAAC","sourcesContent":["import { DefaultErrorHandler, DefaultEventHandler, LensCoreModule } from \"./generated-types\";\nimport { LensCoreError, wrapLensCoreError } from \"./lensCoreError\";\n\n// Note: While this looks similar to Omit, Omit breaks discriminated unions:\n// https://github.com/microsoft/TypeScript/issues/31501\n// This is relevant in the case of setRenderMode().\ntype SafeOmit<T, K extends keyof any> = T extends any ? Omit<T, K> : never;\n\n/**\n * LensCore methods that require additional handling.\n */\ntype LensCoreCustomMethods = {\n    // initialize() param has exceptionHandler, which requires error mapping.\n    initialize(input: PromisifiedParam<MapParamErrorCallback<\"initialize\", \"exceptionHandler\">>): Promise<void>;\n\n    // provideRemoteAssetsResponse() param has onFailure, which requires error mapping.\n    provideRemoteAssetsResponse(input: MapParamErrorCallback<\"provideRemoteAssetsResponse\", \"onFailure\">): void;\n};\n\n// Ensure method names defined in CustomLensCoreMethods are the ones that exist in LensCoreModule.\ntype LensCoreCustomMethodNames = keyof LensCoreCustomMethods extends keyof LensCoreModule\n    ? keyof LensCoreCustomMethods\n    : never;\n\ntype PropertyKinds = \"enum\" | \"sync method\" | \"promisifiable method\" | \"custom method\";\n\n// Create a mapping between property keys and the kind of property it is (enum, sync method, or async method)\ntype LensCorePropertyKinds = {\n    [K in keyof LensCoreModule]: LensCoreModule[K] extends (...args: any[]) => any\n        ? K extends LensCoreCustomMethodNames\n            ? \"custom method\"\n            : Parameters<LensCoreModule[K]>[0] extends {\n                  onSuccess?: DefaultEventHandler;\n                  onFailuer?: DefaultErrorHandler;\n              }\n            ? \"promisifiable method\"\n            : \"sync method\"\n        : \"enum\";\n};\n\n// Helper to select LensCoreModule properties of a particular kind.\ntype PropertiesOfKind<T extends PropertyKinds> = Exclude<\n    {\n        [K in keyof LensCorePropertyKinds]: LensCorePropertyKinds[K] extends T ? K : never;\n    }[keyof LensCorePropertyKinds],\n    undefined\n>;\ntype FirstParameter<T> = T extends (first: infer P, ...rest: any[]) => any ? P : never;\ntype LensCoreEnums = Pick<LensCoreModule, PropertiesOfKind<\"enum\">>;\ntype LensCoreSyncMethods = Pick<LensCoreModule, PropertiesOfKind<\"sync method\">>;\ntype LensCorePromisifiedMethods = {\n    [K in PropertiesOfKind<\"promisifiable method\">]: K extends keyof LensCoreModule\n        ? keyof SafeOmit<Parameters<LensCoreModule[K]>[0], \"onSuccess\" | \"onFailure\"> extends never\n            ? () => Promise<FirstParameter<Parameters<LensCoreModule[K]>[0][\"onSuccess\"]>>\n            : (\n                  input: SafeOmit<Parameters<LensCoreModule[K]>[0], \"onSuccess\" | \"onFailure\">\n              ) => Promise<FirstParameter<Parameters<LensCoreModule[K]>[0][\"onSuccess\"]>>\n        : never;\n};\ntype PromisifiedParam<T extends { onSuccess?: DefaultEventHandler; onFailure?: DefaultErrorHandler }> = {\n    [P in keyof T as P extends \"onSuccess\" | \"onFailure\" ? never : P]: T[P];\n};\ntype MapParamErrorCallback<\n    T extends PropertiesOfKind<\"custom method\">,\n    U extends keyof LensCoreMethodFirstParam<T>\n> = MapErrorCallback<LensCoreMethodFirstParam<T>, U>;\ntype LensCoreMethodFirstParam<T extends PropertiesOfKind<\"custom method\">> = Parameters<LensCoreModule[T]>[0];\ntype MapErrorCallback<T, U extends keyof T> = { [P in keyof T]: P extends U ? (err: LensCoreError) => void : T[P] };\n\n// By using PropertiesOfKind, we can ensure a compile-time error if LensCoreModule adds a new async method,\n// but we forget to update this list.\nconst promisifiableMethods: { [K in PropertiesOfKind<\"promisifiable method\">]: null } = {\n    addLens: null,\n    clearAllLenses: null,\n    imageToYuvBuffer: null,\n    pauseCanvas: null,\n    playCanvas: null,\n    processAudioSampleBuffer: null,\n    processFrame: null,\n    removeLens: null,\n    replaceLenses: null,\n    setAudioParameters: null,\n    setDeviceClass: null,\n    setFPSLimit: null,\n    setInputTransform: null,\n    setOnFrameProcessedCallback: null,\n    setRenderLoopMode: null,\n    setRenderSize: null,\n    teardown: null,\n    useMediaElement: null,\n    yuvBufferToBitmap: null,\n};\n\nexport type LensCore = LensCoreEnums & LensCoreSyncMethods & LensCorePromisifiedMethods & LensCoreCustomMethods;\n\nexport const createLensCore = (lensCoreModule: LensCoreModule): LensCore => {\n    const customMethods: LensCoreCustomMethods = {\n        initialize(input) {\n            return new Promise((onSuccess, onFailure) =>\n                lensCoreModule.initialize({\n                    ...input,\n                    exceptionHandler: input.exceptionHandler && wrapLensCoreError(input.exceptionHandler),\n                    onSuccess,\n                    onFailure: wrapLensCoreError(onFailure),\n                })\n            );\n        },\n\n        provideRemoteAssetsResponse(input) {\n            return lensCoreModule.provideRemoteAssetsResponse({\n                ...input,\n                onFailure: input.onFailure && wrapLensCoreError(input.onFailure),\n            });\n        },\n    };\n\n    return new Proxy(lensCoreModule, {\n        get: (target, property, receiver) => {\n            // Handle special methods with custom implementations\n            if (property in customMethods) {\n                // Safety: \"in\" operator above ensures that property is keyof LensCoreCustomMethods\n                return customMethods[property as keyof LensCoreCustomMethods];\n            }\n\n            // All other async methods return Promises\n            if (property in promisifiableMethods) {\n                const method = Reflect.get(target, property, receiver);\n                if (!method) method;\n                return (input: Parameters<LensCorePromisifiedMethods[keyof LensCorePromisifiedMethods]>[0]) =>\n                    new Promise((onSuccess, onFailure) =>\n                        method({\n                            ...input,\n                            onSuccess,\n                            onFailure: wrapLensCoreError(onFailure),\n                        })\n                    );\n            }\n\n            // All other kinds of properties (enums, sync methods) are unmodified.\n            return Reflect.get(target, property, receiver);\n        },\n        // Safety: We ensured safety by defining types for both custom and promisifiable methods.\n    }) as LensCore;\n};\n"]}