{"version":3,"file":"lensCoreError.js","sourceRoot":"","sources":["../../src/lens-core-module/lensCoreError.ts"],"names":[],"mappings":"AAuBA,iEAAiE;AACjE,wFAAwF;AACxF,mCAAmC;AACnC,6GAA6G;AAC7G,MAAM,kBAAkB,GAAwC;IAC5D,mBAAmB,EAAE,CAAC;IACtB,UAAU,EAAE,CAAC;IACb,aAAa,EAAE,CAAC;IAChB,aAAa,EAAE,CAAC;IAChB,KAAK,EAAE,CAAC;IACR,aAAa,EAAE,CAAC;CACnB,CAAC;AAEF,qEAAqE;AACrE,2FAA2F;AAC3F,MAAM,iBAAiB,GAAG,MAAM,CAAC,WAAW,CACxC,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAwB,CAAU,CAAC,CAC1G,CAAC;AAEF,MAAM,UAAU,iBAAiB,CAAC,EAA8B;IAC5D,MAAM,OAAO,GAAwB,CAAC,KAAK,EAAE,EAAE;;QAC3C,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;YAClD,KAAK,EACD,KAAK,CAAC,eAAe,KAAI,MAAA,KAAK,CAAC,KAAK,0CAAE,QAAQ,CAAA;gBAC1C,CAAC,CAAC;oBACI,eAAe,EAAE,KAAK,CAAC,eAAe;oBACtC,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC,QAAQ;iBACjC;gBACH,CAAC,CAAC,SAAS;SACtB,CAAC,CAAC;QACH,MAAM,IAAI,GAAmD,WACzD,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAC9D,OAAgB,CAAC;QACjB,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;QAClB,IAAI,KAAK,CAAC,KAAK,EAAE;YACb,kEAAkE;YAClE,yFAAyF;YACzF,MAAM,CAAC,CAAC,EAAE,GAAG,UAAU,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACnD,IAAI,KAAK,CAAC,KAAK,EAAE;gBACb,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAClD;YACD,KAAK,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACvC;QACD,4EAA4E;QAC5E,EAAE,CAAC,KAAsB,CAAC,CAAC;IAC/B,CAAC,CAAC;IACF,OAAO,OAAO,CAAC;AACnB,CAAC","sourcesContent":["import { DefaultErrorHandler, LensCoreModule } from \"./generated-types\";\n\ntype ErrorName = `${string}Error`;\ntype NamedError<Name extends ErrorName> = Error & { name: Name };\n\nexport type LensCoreLensDeserializationError = NamedError<\"LensCoreLensDeserializationError\">;\nexport type LensCoreValidationError = NamedError<\"LensCoreValidationError\">;\nexport type LensCoreUncategorizedError = NamedError<\"LensCoreUncategorizedError\">;\nexport type LensCoreLensExecutionError = NamedError<\"LensCoreLensExecutionError\">;\nexport type LensCoreAbortError = NamedError<\"LensCoreAbortError\">;\nexport type LensCoreUninitializedError = NamedError<\"LensCoreUninitializedError\">;\nexport type LensCoreUnknownError = NamedError<\"LensCoreUnknownError\">;\n\nexport type LensCoreError =\n    | LensCoreLensDeserializationError\n    | LensCoreValidationError\n    | LensCoreUncategorizedError\n    | LensCoreLensExecutionError\n    | LensCoreAbortError\n    | LensCoreUninitializedError;\n\ntype NativeLensCoreError = keyof LensCoreModule[\"ErrorType\"];\n\n// Construct a map linking each LensCore error name to its value,\n// designed to trigger a compile-time error if an error is added or removed in LensCore.\n// eslint-disable-next-line max-len\n// https://github.sc-corp.net/Snapchat/LensCore/blob/master/Src/PlatformSpecific/WebAssembly/ErrorType.hpp#L4\nconst lensCoreErrorValue: Record<NativeLensCoreError, number> = {\n    LensDeserialization: 0,\n    Validation: 1,\n    Uncategorized: 2,\n    LensExecution: 3,\n    Abort: 4,\n    Uninitialized: 5,\n};\n\n// The purpose of lensCoreErrorValue above is to safeguard integrity.\n// To achieve constant lookup times, we must swap the keys with their corresponding values.\nconst lensCoreErrorName = Object.fromEntries(\n    Object.entries(lensCoreErrorValue).map((entry) => [entry[1], entry[0] as NativeLensCoreError] as const)\n);\n\nexport function wrapLensCoreError(fn: (e: LensCoreError) => void) {\n    const handler: DefaultErrorHandler = (cause) => {\n        const error = new Error(cause.message.split(\"\\n\")[0], {\n            cause:\n                cause.otherExceptions || cause.cause?.metadata\n                    ? {\n                          otherExceptions: cause.otherExceptions,\n                          metadata: cause.cause.metadata,\n                      }\n                    : undefined,\n        });\n        const name: (LensCoreError | LensCoreUnknownError)[\"name\"] = `LensCore${\n            cause.cause ? lensCoreErrorName[cause.cause.type.value] : \"Unknown\"\n        }Error` as const;\n        error.name = name;\n        if (cause.stack) {\n            // if cause has a stack, then we just replace the first line of it\n            // which is actually a error message with our new one, which also contains new error name\n            const [_, ...stackLines] = cause.stack.split(\"\\n\");\n            if (error.stack) {\n                stackLines.unshift(error.stack.split(\"\\n\")[0]);\n            }\n            error.stack = stackLines.join(\"\\n\");\n        }\n        // Safety: we set name above and therefore sure the type of error is correct\n        fn(error as LensCoreError);\n    };\n    return handler;\n}\n"]}