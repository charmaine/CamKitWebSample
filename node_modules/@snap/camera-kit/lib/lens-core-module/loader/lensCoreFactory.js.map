{"version":3,"file":"lensCoreFactory.js","sourceRoot":"","sources":["../../../src/lens-core-module/loader/lensCoreFactory.ts"],"names":[],"mappings":"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","sourcesContent":["import lensCoreWasm from \"../../lensCoreWasmVersions.json\";\nimport { loadScript } from \"../../common\";\nimport { CameraKitConfiguration, configurationToken } from \"../../configuration\";\nimport { Injectable } from \"../../dependency-injection/Injectable\";\nimport { defaultFetchHandlerFactory, FetchHandler } from \"../../handlers/defaultFetchHandler\";\nimport { InitialEmscriptenModule, LensCoreModule } from \"../generated-types\";\nimport { getLogger } from \"../../logger/logger\";\nimport { WasmFeatures, getPlatformCapabilities } from \"../../platform/platformCapabilities\";\nimport { getPlatformInfo } from \"../../platform/platformInfo\";\nimport { createLensCore } from \"../lensCore\";\n\nconst logger = getLogger(\"lensCoreFactory\");\n\nconst wasmAssets = [\"LensCoreWebAssembly.js\", \"LensCoreWebAssembly.wasm\"];\n\nconst findMatch = (regex: RegExp, strings: string[]) => strings.find((s) => regex.test(s));\n\n/**\n * Map various combinations of WebAssembly capabilities to the corresponding LensCore build flavours which make use\n * of them.\n */\nconst wasmCapabilitiesToLensCoreBuildFlavor = {\n    [WasmFeatures.Default]: \"release\",\n    [WasmFeatures.ExceptionHandling]: \"rel-neh\",\n    [WasmFeatures.SIMD]: \"release-simd\",\n    [WasmFeatures.ExceptionHandling | WasmFeatures.SIMD]: \"rel-simd-neh\",\n};\n\n/**\n * Returns a list of URLs for resources which will be fetched during {@link bootstrapCameraKit}.\n *\n * When CameraKit is used on a website, these URLs much be reachable in order for CameraKit to be successfully\n * bootstrapped.\n *\n * @param endpointOverride Optional endpoint override to load the assets from.\n * @returns An array of asset URLs.\n *\n * @category Bootstrapping and Configuration\n */\nexport async function getRequiredBootstrapURLs(endpointOverride?: string): Promise<string[]> {\n    // If we have an endpoint override, remove trailing `/` so we can construct a valid URL.\n    const endpoint = endpointOverride?.replace(/[\\/]+$/, \"\");\n\n    const { wasm } = await getPlatformCapabilities();\n    if (!wasm.supported) throw wasm.error;\n\n    const { lensCore } = getPlatformInfo();\n    const flavor = wasmCapabilitiesToLensCoreBuildFlavor[wasm.wasmFeatures];\n    if (!flavor)\n        throw new Error(\n            `Could not determine a LensCore build flavor corresponding to the bitstring ` +\n                `${wasm.wasmFeatures.toString(2)}. CameraKit cannot be bootstrapped.`\n        );\n    const version = lensCore.version;\n    const buildNumber = lensCore.buildNumber;\n    return wasmAssets.map((asset) => {\n        if (endpoint) return `${endpoint}/${asset}`;\n        const { origin, pathname, search } = new URL(lensCore.baseUrl);\n        return `${origin}${pathname}/${version}/${buildNumber}/${flavor}/${asset}${search}`;\n    });\n}\n\n/**\n * This component is responsible for:\n *   1) Loading LensCore WebAssembly (WASM) assets\n *   2) Using the WASM assets to initialize the LensCore WASM module\n *\n * By default, WASM assets will be loaded from the Bolt CDN â€“ but if `endpoint` is provided, assets will be loaded\n * using it as a base URL.\n *\n * @internal\n */\nexport const lensCoreFactory = Injectable(\n    \"lensCore\",\n    [defaultFetchHandlerFactory.token, configurationToken] as const,\n    async (handler: FetchHandler, { lensCoreOverrideUrls, wasmEndpointOverride }: CameraKitConfiguration) => {\n        let lensCoreJS: string;\n        let lensCoreWASM: string;\n\n        if (lensCoreOverrideUrls) {\n            lensCoreJS = lensCoreOverrideUrls.js;\n            lensCoreWASM = lensCoreOverrideUrls.wasm;\n        } else {\n            const endpointOverride = wasmEndpointOverride ?? undefined;\n            const assetURLs = await getRequiredBootstrapURLs(endpointOverride);\n\n            lensCoreJS = findMatch(/\\.js/, assetURLs) ?? \"\";\n            lensCoreWASM = findMatch(/\\.wasm/, assetURLs) ?? \"\";\n\n            if (!lensCoreJS || !lensCoreWASM) {\n                throw new Error(\n                    `Cannot fetch required LensCore assets. Either the JS or WASM filename is missing from ` +\n                        `this list: ${assetURLs}.`\n                );\n            }\n\n            // Fetching here and creating an Object URL lets LensCore optimized loading itself in a WebWorker,\n            // otherwise the glue script would need to be downloaded again.\n            const glueScript = await handler(lensCoreJS).then((r) => r.blob());\n            lensCoreJS = URL.createObjectURL(glueScript);\n        }\n\n        const scriptElement = await loadScript(lensCoreJS);\n\n        const lensCore = await new Promise<InitialEmscriptenModule & LensCoreModule>((resolve, reject) => {\n            let initialModule: Partial<InitialEmscriptenModule>;\n            // will trigger WASM initialization and data loading,\n            // after completion it will be safe to call imported WASM functions\n            // More about emscripten initialization:\n            // eslint-disable-next-line max-len\n            // https://emscripten.org/docs/getting_started/FAQ.html?highlight=modularize#how-can-i-tell-when-the-page-is-fully-loaded-and-it-is-safe-to-call-compiled-functions\n            const moduleInit = globalThis.createLensesModule(\n                (initialModule = {\n                    // url will be used for loading glue JS during Worker inialization\n                    mainScriptUrlOrBlob: lensCoreJS,\n                    // will be triggered by Emscripten during the initialization\n                    instantiateWasm: (importObject, receiveInstance) => {\n                        WebAssembly.instantiateStreaming(handler(lensCoreWASM), importObject)\n                            .then(function ({ instance, module }) {\n                                receiveInstance(instance, module);\n                                // compiled module will be reused in Worker\n                                initialModule.compiledModule = module;\n                                resolve(moduleInit);\n                            })\n                            .catch(reject);\n                    },\n                })\n            );\n        });\n\n        // now when we have LensCore WASM in memory we can release the script element\n        scriptElement.remove();\n\n        // print warning if loaded version differs from hardcoded one\n        if (lensCoreWasm.version != `${lensCore.getCoreVersion()}`) {\n            logger.warn(\n                `Loaded LensCore version (${lensCore.getCoreVersion()}) differs from expected one (${\n                    lensCoreWasm.version\n                })`\n            );\n        }\n\n        return createLensCore(lensCore);\n    }\n);\n"]}