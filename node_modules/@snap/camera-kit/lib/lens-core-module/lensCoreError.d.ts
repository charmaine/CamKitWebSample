import { DefaultErrorHandler } from "./generated-types";
type ErrorName = `${string}Error`;
type NamedError<Name extends ErrorName> = Error & {
    name: Name;
};
export type LensCoreLensDeserializationError = NamedError<"LensCoreLensDeserializationError">;
export type LensCoreValidationError = NamedError<"LensCoreValidationError">;
export type LensCoreUncategorizedError = NamedError<"LensCoreUncategorizedError">;
export type LensCoreLensExecutionError = NamedError<"LensCoreLensExecutionError">;
export type LensCoreAbortError = NamedError<"LensCoreAbortError">;
export type LensCoreUninitializedError = NamedError<"LensCoreUninitializedError">;
export type LensCoreUnknownError = NamedError<"LensCoreUnknownError">;
export type LensCoreError = LensCoreLensDeserializationError | LensCoreValidationError | LensCoreUncategorizedError | LensCoreLensExecutionError | LensCoreAbortError | LensCoreUninitializedError;
export declare function wrapLensCoreError(fn: (e: LensCoreError) => void): DefaultErrorHandler;
export {};
