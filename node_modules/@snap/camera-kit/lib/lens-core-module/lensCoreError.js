// Construct a map linking each LensCore error name to its value,
// designed to trigger a compile-time error if an error is added or removed in LensCore.
// eslint-disable-next-line max-len
// https://github.sc-corp.net/Snapchat/LensCore/blob/master/Src/PlatformSpecific/WebAssembly/ErrorType.hpp#L4
const lensCoreErrorValue = {
    LensDeserialization: 0,
    Validation: 1,
    Uncategorized: 2,
    LensExecution: 3,
    Abort: 4,
    Uninitialized: 5,
};
// The purpose of lensCoreErrorValue above is to safeguard integrity.
// To achieve constant lookup times, we must swap the keys with their corresponding values.
const lensCoreErrorName = Object.fromEntries(Object.entries(lensCoreErrorValue).map((entry) => [entry[1], entry[0]]));
export function wrapLensCoreError(fn) {
    const handler = (cause) => {
        var _a;
        const error = new Error(cause.message.split("\n")[0], {
            cause: cause.otherExceptions || ((_a = cause.cause) === null || _a === void 0 ? void 0 : _a.metadata)
                ? {
                    otherExceptions: cause.otherExceptions,
                    metadata: cause.cause.metadata,
                }
                : undefined,
        });
        const name = `LensCore${cause.cause ? lensCoreErrorName[cause.cause.type.value] : "Unknown"}Error`;
        error.name = name;
        if (cause.stack) {
            // if cause has a stack, then we just replace the first line of it
            // which is actually a error message with our new one, which also contains new error name
            const [_, ...stackLines] = cause.stack.split("\n");
            if (error.stack) {
                stackLines.unshift(error.stack.split("\n")[0]);
            }
            error.stack = stackLines.join("\n");
        }
        // Safety: we set name above and therefore sure the type of error is correct
        fn(error);
    };
    return handler;
}
//# sourceMappingURL=lensCoreError.js.map