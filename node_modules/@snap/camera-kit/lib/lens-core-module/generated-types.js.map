{"version":3,"file":"generated-types.js","sourceRoot":"","sources":["../../src/lens-core-module/generated-types.ts"],"names":[],"mappings":"","sourcesContent":["export type DefaultEventHandler = (...data: any[]) => void;\n\nexport type DefaultErrorHandler = (err: LensCoreError) => void;\n\nexport type LensCoreEnumValue = { value: number };\n\nexport type GetOutputCanvasesOutput = Record<number, HTMLCanvasElement>;\n\nexport type SetRenderSizeInput = SetRenderSizeMatchInputResolutionInput | SetRenderSizeExplicitInput;\n\nexport type SetRemoteAssetsProviderInput = (assetDescriptor: AssetDescriptor) => void;\n\nexport type SetRemoteAssetsUploadHandlerInput = (assetUploadDescriptor: AssetUploadDescriptor) => void;\n\nexport type ContentType =\n    | \"text/plain\"\n    | \"text/html\"\n    | \"application/json\"\n    | \"application/octet-stream\"\n    | \"application/x-protobuf\"\n    | \"application/grpc\";\n\nexport type SavePersistentStoreCallback = (id: string, data: ArrayBuffer) => void;\n\nexport type ShowHintCallback = (effectId: string, hintId: string) => void;\n\nexport type HideHintCallback = (effectId: string) => void;\n\nexport type ReceiveInstanceCallback = (instance: WebAssembly.Instance, module: WebAssembly.Module) => void;\n\nexport type AssetType = LensCoreEnumValue;\n\nexport type CanvasType = LensCoreEnumValue;\n\nexport type RenderLoopMode = LensCoreEnumValue;\n\nexport type LensApiVisibility = LensCoreEnumValue;\n\nexport type DeviceClass = LensCoreEnumValue;\n\nexport type UserDataAccess = LensCoreEnumValue;\n\nexport type InterfaceControl = LensCoreEnumValue;\n\nexport type InterfaceAction = LensCoreEnumValue;\n\nexport type ExternalMediaOrientation = LensCoreEnumValue;\n\nexport type ErrorType = LensCoreEnumValue;\n\nexport type Uri = `${string}://${string}`;\n\nexport type Dimensions = { width: number; height: number };\n\nexport type Size2D = { width: number; height: number };\n\nexport type Vec2D = { x: number; y: number };\n\nexport type Rect = { origin: Vec2D; size: Size2D };\n\nexport interface ClearAllLensesInput {\n    onSuccess?: DefaultEventHandler;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface OnFrameProcessedParam {\n    processingTimeMs: number;\n}\n\nexport interface XrCapabilities {\n    sixDofSupported: boolean;\n    sceneDepthSupported: boolean;\n}\n\nexport interface InitializeInput {\n    canvas?: HTMLCanvasElement | string;\n    outputResolution?: Dimensions;\n    showFpsPanel?: boolean;\n    shouldUseWorker?: boolean;\n    onFrameProcessed?: (arg: OnFrameProcessedParam) => void;\n    xrCapabilities?: XrCapabilities;\n    onFailure?: DefaultErrorHandler;\n    onSuccess?: DefaultEventHandler;\n    exceptionHandler?: (error: LensCoreError) => void;\n}\n\nexport interface PlayCanvasInput {\n    type: CanvasType;\n    onReady?: () => void;\n    onSuccess?: DefaultEventHandler;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface PauseCanvasInput {\n    type: CanvasType;\n    onSuccess?: DefaultEventHandler;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface SetFpsLimitInput {\n    fps: number;\n    onSuccess?: DefaultEventHandler;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface SetInputTransformInput {\n    matrix: Float32Array | ArrayBuffer;\n    onSuccess?: DefaultEventHandler;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface SetOnFrameProcessedInput {\n    onFrameProcessed: (arg: OnFrameProcessedParam) => void;\n    onSuccess?: DefaultEventHandler;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface SetRenderSizeMatchInputResolutionInput {\n    mode: \"matchInputResolution\";\n    onSuccess?: DefaultEventHandler;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface SetRenderSizeExplicitInput {\n    mode: \"explicit\";\n    target: Dimensions;\n    onSuccess?: DefaultEventHandler;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface SetRenderLoopInput {\n    mode: RenderLoopMode;\n    onSuccess?: DefaultEventHandler;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface TeardownInput {\n    onSuccess?: DefaultEventHandler;\n    onFailure?: DefaultEventHandler;\n}\n\nexport interface ReplayTrackingDataInput {\n    buffer: Uint8Array | ArrayBuffer;\n}\n\nexport interface UseMediaElementInput {\n    media?: HTMLCanvasElement | HTMLImageElement | HTMLVideoElement | MediaStream;\n    requestWebcam?: boolean;\n    startOnFrontCamera?: boolean;\n    mirrorMedia?: boolean;\n    pauseExistingMedia?: boolean;\n    autoplayNewMedia?: boolean;\n    autoplayPreviewCanvas?: boolean;\n    useManualFrameProcessing?: boolean;\n    replayTrackingData?: ReplayTrackingDataInput;\n    onFailure?: DefaultErrorHandler;\n    onSuccess?: DefaultEventHandler;\n}\n\nexport interface UriListener {\n    handleRequest: (request: UriRequest) => void;\n    cancelRequest?: (request: UriCancelRequest) => void;\n}\n\nexport interface UriRequest {\n    uri: Uri;\n    identifier: string;\n    method: \"GET\" | \"POST\";\n    contentType: ContentType;\n    data: ArrayBuffer;\n    metadata: Record<string, string>;\n}\n\nexport interface UriResponse {\n    code: number;\n    description: string;\n    contentType: ContentType;\n    data: ArrayBuffer;\n    metadata?: Record<string, string>;\n}\n\nexport interface UriCancelRequest {\n    uri: Uri;\n    requestId: string;\n}\n\nexport interface LensDescriptor {\n    lensId: string;\n    lensChecksum: string;\n    lensPath?: string;\n    lensDataBuffer?: Uint8Array | ArrayBuffer;\n    onTurnOn?: DefaultEventHandler;\n    onTurnOff?: DefaultEventHandler;\n    onFirstFrameProcessed?: DefaultEventHandler;\n    onResourcesLoaded?: DefaultEventHandler;\n    launchData?: Uint8Array | ArrayBuffer;\n    apiVisibility?: LensApiVisibility;\n    publicApiUserDataAccess?: UserDataAccess;\n}\n\nexport interface AddLensInput extends LensDescriptor {\n    onSuccess?: DefaultEventHandler;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface ReplaceLensesInput {\n    lenses: LensDescriptor | Array<LensDescriptor>;\n    onSuccess?: DefaultEventHandler;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface RemoveLensInput {\n    lensId: string;\n    onSuccess?: DefaultEventHandler;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface AssetDescriptor {\n    assetId: string;\n    assetType: AssetType;\n    avatarId?: string;\n    effectId?: string;\n    encryptionKey?: ArrayBuffer;\n}\n\nexport interface AssetUploadDescriptor {\n    requestId: number;\n    assetId: string;\n    assetType: AssetType;\n    effectId: string;\n    assetBuffer: ArrayBuffer;\n    encryptionKey?: ArrayBuffer;\n    encryptionIv?: ArrayBuffer;\n    assetBatchId?: string;\n}\n\nexport interface ProvideRemoteAssetsResponseInput {\n    assetId: string;\n    assetType: AssetType;\n    assetBuffer?: ArrayBuffer;\n    assetChecksum?: string;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface ProvideRemoteAssetsUploadResponseInput {\n    requestId: number;\n    success: boolean;\n    assetUrl?: string;\n    assetUploadMetadata?: ArrayBuffer;\n}\n\nexport interface XRInput {\n    layer: XRWebGLLayer;\n    binding: XRWebGLBinding;\n    frame: XRFrame;\n    referenceSpace: XRReferenceSpace;\n}\n\nexport interface ProcessFrameInput {\n    inputFrame: ImageBitmap | HTMLCanvasElement | HTMLImageElement | VideoFrame | XRInput;\n    timestampMillis: number;\n    renderTimestampMillis?: number;\n    onSuccess?: DefaultEventHandler;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface LensCoreError extends Error {\n    otherExceptions?: Array<Error>;\n    cause: { type: ErrorType; metadata?: any };\n}\n\nexport interface ImageToYuvBufferInput {\n    image: Uint8Array | ArrayBuffer | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap;\n    width: number;\n    height: number;\n    outputBuffer?: Uint8Array | ArrayBuffer;\n    onSuccess: (buffer: ArrayBuffer) => void;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface YuvBufferToBitmapInput {\n    buffer: Uint8Array | ArrayBuffer;\n    width: number;\n    height: number;\n    targetWidth?: number;\n    targetHeight?: number;\n    preserveCanvasState?: boolean;\n    allowBufferTransfer?: boolean;\n    onSuccess: (bitmap: ImageBitmap) => void;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface SetInterfaceControlVisibilityInput {\n    effectId: string;\n    interfaceControl: InterfaceControl;\n    visibility: boolean;\n}\n\nexport interface HandleClientInterfaceActionInput {\n    effectId: string;\n    interfaceControl: InterfaceControl;\n    interfaceAction: InterfaceAction;\n}\n\nexport interface ProvideExternalImageInput {\n    data: Uint8Array | ArrayBuffer;\n    orientation: ExternalMediaOrientation;\n    faceRects?: Array<Rect>;\n}\n\nexport interface ProvideExternalVideoInput {\n    data: Uint8Array | ArrayBuffer;\n    orientation: ExternalMediaOrientation;\n    relStartPosition?: number;\n    relEndPosition?: number;\n    volume?: number;\n}\n\nexport interface ScreenDimmingRequestInput {\n    effectId: string;\n    enabled: boolean;\n}\n\nexport type ScreenDimmingRequestHandler = (config: ScreenDimmingRequestInput) => void;\n\nexport interface ClientInterfaceData {\n    HeaderId?: string;\n    DescriptionId?: string;\n    FaceFilteringEnabled?: \"0\" | \"1\";\n    FaceFilteringMultipleFaces?: \"0\" | \"1\";\n    ImageEnabled?: \"0\" | \"1\";\n    VideoEnabled?: \"0\" | \"1\";\n}\n\nexport interface ClientInterfaceRequestInput {\n    effectId: string;\n    interfaceControl: InterfaceControl;\n    interfaceAction: InterfaceAction;\n    data: ClientInterfaceData;\n}\n\nexport type ClientInterfaceRequestHandler = (config: ClientInterfaceRequestInput) => void;\n\nexport interface LensCoreConfig {\n    configId: string;\n    value:\n        | { stringValue: string }\n        | { boolValue: boolean }\n        | { intValue: number }\n        | { longValue: number }\n        | { floatValue: number }\n        | {\n        anyValue: {\n            typeUrl: string;\n            value: Uint8Array | ArrayBuffer;\n        };\n    };\n}\n\nexport type SetPreloadedConfigurationInput = Array<LensCoreConfig>;\n\nexport interface SetAllSoundsMutedInput {\n    muted: boolean;\n    fade: boolean;\n}\n\nexport interface SetDeviceClassInput {\n    deviceClass: DeviceClass;\n    onSuccess?: DefaultEventHandler;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface SetAudioParametersInput {\n    parameters: {\n        numChannels?: number;\n        sampleRate?: number;\n    };\n    onSuccess?: DefaultEventHandler;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface SystemFont {\n    name: string;\n    data: Uint8Array | ArrayBuffer;\n}\n\nexport interface SetSystemFontsInput {\n    fonts: SystemFont[]\n}\n\nexport interface ProcessAudioSampleBufferInput {\n    input: Float32Array[] | ArrayBuffer[];\n    output?: Float32Array[] | ArrayBuffer[];\n    onSuccess?: DefaultEventHandler;\n    onFailure?: DefaultErrorHandler;\n}\n\nexport interface BeginWebXrInput {\n    glContext: WebGL2RenderingContext;\n    requestConfig: {\n        requiredFeatures?: string[]\n    }\n}\n\nexport interface InitialEmscriptenModule {\n    mainScriptUrlOrBlob: string;\n    compiledModule?: WebAssembly.Module;\n    pthreadWorkerScriptUrl?: string;\n    instantiateWasm?: (importObject: WebAssembly.Imports, receiveInstance: ReceiveInstanceCallback) => void;\n    print?: (text: string) => void;\n    printErr?: (text: string) => void;\n}\n\nexport interface LensCoreModule extends InitialEmscriptenModule {\n    AssetType: {\n        RemoteMediaByUrl: AssetType;\n        DeviceDependent: AssetType;\n        Static: AssetType;\n        URL: AssetType;\n        BitmojiDynamicAsset: AssetType;\n    };\n\n    CanvasType: {\n        None: CanvasType;\n        Preview: CanvasType;\n        Capture: CanvasType;\n        All: CanvasType;\n    };\n\n    LensApiVisibility: {\n        Dev: LensApiVisibility;\n        Private: LensApiVisibility;\n        Public: LensApiVisibility;\n    };\n\n    DeviceClass: {\n        Undefined: DeviceClass;\n        BarelyWorking: DeviceClass;\n        LowEnd: DeviceClass;\n        MidEnd: DeviceClass;\n        HighEnd: DeviceClass;\n    };\n\n    RenderLoopMode: {\n        SetTimeout: RenderLoopMode;\n        RequestAnimationFrame: RenderLoopMode;\n    };\n\n    UserDataAccess: {\n        Restricted: UserDataAccess;\n        Unrestricted: UserDataAccess;\n    };\n\n    InterfaceControl: {\n        ToggleCameraButton: InterfaceControl;\n        ImagePicker: InterfaceControl;\n        Hint: InterfaceControl;\n        Modal: InterfaceControl;\n        LinkBitmojiCallToAction: InterfaceControl;\n        SnapButton: InterfaceControl;\n        PlayButton: InterfaceControl;\n        All: InterfaceControl;\n        ExitFullScreenButton: InterfaceControl;\n        MemoriesButton: InterfaceControl;\n        LensAttachmentButton: InterfaceControl;\n        ReverseCamera: InterfaceControl;\n    };\n\n    InterfaceAction: {\n        EnableHighlight: InterfaceAction;\n        DisableHighlight: InterfaceAction;\n        Trigger: InterfaceAction;\n        Show: InterfaceAction;\n        Hide: InterfaceAction;\n    };\n\n    ExternalMediaOrientation: {\n        CW0: ExternalMediaOrientation;\n        CW90: ExternalMediaOrientation;\n        CW180: ExternalMediaOrientation;\n        CW270: ExternalMediaOrientation;\n    };\n\n    ErrorType: {\n        LensDeserialization: ErrorType;\n        Validation: ErrorType;\n        Uncategorized: ErrorType;\n        LensExecution: ErrorType;\n        Abort: ErrorType;\n        Uninitialized: ErrorType;\n    };\n\n    initialize: (config: InitializeInput) => void;\n    processFrame: (config: ProcessFrameInput) => void;\n    addLens: (config: AddLensInput) => void;\n    replaceLenses: (config: ReplaceLensesInput) => void;\n    removeLens: (config: RemoveLensInput) => void;\n    clearAllLenses: (config: ClearAllLensesInput) => void;\n    teardown: (config: TeardownInput) => void;\n    useMediaElement: (config: UseMediaElementInput) => void;\n    setFPSLimit: (config: SetFpsLimitInput) => void;\n    setRenderLoopMode: (config: SetRenderLoopInput) => void;\n    getCoreVersion: () => number;\n    playCanvas: (input: PlayCanvasInput) => void;\n    pauseCanvas: (input: PauseCanvasInput) => void;\n    getOutputCanvases: () => GetOutputCanvasesOutput;\n    setRenderSize: (input: SetRenderSizeInput) => void;\n    startProfiling: () => void;\n    endProfiling: () => void;\n    setInputTransform: (config: SetInputTransformInput) => void;\n    registerUriListener: (scheme: string, route: string, listener: UriListener) => void;\n    provideUriResponse: (requestId: string, response: UriResponse) => void;\n    setRemoteAssetsProvider: (provider: SetRemoteAssetsProviderInput) => void;\n    provideRemoteAssetsResponse: (assetResponse: ProvideRemoteAssetsResponseInput) => void;\n    setRemoteAssetsUploadHandler: (provider: SetRemoteAssetsUploadHandlerInput) => void;\n    provideRemoteAssetsUploadResponse: (assetResponse: ProvideRemoteAssetsUploadResponseInput) => void;\n    registerShowHintCallback: (callback: ShowHintCallback) => void;\n    registerHideHintCallback: (callback: HideHintCallback) => void;\n    registerSavePersistentStoreCallback: (callback: SavePersistentStoreCallback) => void;\n    imageToYuvBuffer: (config: ImageToYuvBufferInput) => void;\n    yuvBufferToBitmap: (config: YuvBufferToBitmapInput) => void;\n    setOnFrameProcessedCallback: (config: SetOnFrameProcessedInput) => void;\n    setInterfaceControlVisibility: (config: SetInterfaceControlVisibilityInput) => void;\n    handleClientInterfaceAction: (config: HandleClientInterfaceActionInput) => void;\n    provideExternalImage: (config: ProvideExternalImageInput) => void;\n    provideExternalVideo: (config: ProvideExternalVideoInput) => void;\n    setScreenDimmingRequestHandler: (callback: ScreenDimmingRequestHandler) => void;\n    setClientInterfaceRequestHandler: (callback: ClientInterfaceRequestHandler) => void;\n    setPreloadedConfiguration: (config: SetPreloadedConfigurationInput) => void;\n    setAllSoundsMuted: (config: SetAllSoundsMutedInput) => void;\n    setDeviceClass: (config: SetDeviceClassInput) => void;\n    setSystemFonts: (config: SetSystemFontsInput) => void;\n    setAudioParameters: (config: SetAudioParametersInput) => void;\n    processAudioSampleBuffer: (config: ProcessAudioSampleBufferInput) => void;\n    registerBeginWebXrHandler: (handler: ((config: BeginWebXrInput) => void) | null) => void;\n    registerEndWebXrHandler: (handler: (() => void) | null) => void;\n}\n\ndeclare global {\n    // This function is provided by the Emscripten glue file and responsible for initialization, will be fullfiled\n    // when everything is loaded and it is safe to call compiled functions\n    // eslint-disable-next-line max-len\n    // https://emscripten.org/docs/getting_started/FAQ.html#how-can-i-tell-when-the-page-is-fully-loaded-and-it-is-safe-to-call-compiled-functions\n    // Function is defined by the LensCore web assembly\n    // eslint-disable-next-line max-len\n    // https://github.sc-corp.net/Snapchat/LensCore/blob/6715da8c877d593e4fe133f4145eb3022204525d/Platforms/WebAssembly/LookserySDK/CMakeLists.txt#L65\n    function createLensesModule(module: InitialEmscriptenModule): Promise<InitialEmscriptenModule & LensCoreModule>;\n}\n"]}