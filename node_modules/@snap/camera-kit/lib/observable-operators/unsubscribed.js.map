{"version":3,"file":"unsubscribed.js","sourceRoot":"","sources":["../../src/observable-operators/unsubscribed.ts"],"names":[],"mappings":"AAAA,OAAO,EAA4B,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,MAAM,CAAC;AAEtE;;;;;;;;;GASG;AACH,MAAM,UAAU,YAAY,CAAI,QAAoB;IAChD,OAAO,CAAC,MAAM,EAAE,EAAE,CACd,KAAK,CAAC,GAAG,EAAE;QACP,4GAA4G;QAC5G,+CAA+C;QAC/C,IAAI,kBAAkB,GAAG,KAAK,CAAC;QAC/B,OAAO,MAAM,CAAC,IAAI,CACd,GAAG,CAAC;YACA,QAAQ,EAAE,GAAG,EAAE,CAAC,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAC3C,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC,kBAAkB,GAAG,IAAI,CAAC;SAC3C,CAAC,EACF,QAAQ,CAAC,GAAG,EAAE;YACV,IAAI,kBAAkB;gBAAE,OAAO;YAC/B,QAAQ,EAAE,CAAC;QACf,CAAC,CAAC,CACL,CAAC;IACN,CAAC,CAAC,CAAC;AACX,CAAC","sourcesContent":["import { MonoTypeOperatorFunction, defer, finalize, tap } from \"rxjs\";\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when the source has no\n * more subscribers.\n *\n * This is exactly like the `finalize` operator, exept that the specified function will be called only when the source\n * is explicitly unsubscribed.\n *\n * @param callback Called when the source Observable has no more subscribers.\n * @returns\n */\nexport function unsubscribed<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n    return (source) =>\n        defer(() => {\n            // We can tell if the source is completed or errored -- if neither has happened, we know the source is being\n            // finalized because all subscribers have left.\n            let completedOrErrored = false;\n            return source.pipe(\n                tap({\n                    complete: () => (completedOrErrored = true),\n                    error: () => (completedOrErrored = true),\n                }),\n                finalize(() => {\n                    if (completedOrErrored) return;\n                    callback();\n                })\n            );\n        });\n}\n"]}