{"version":3,"file":"assertions.js","sourceRoot":"","sources":["../../src/common/assertions.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;GAmBG;AACH,MAAM,UAAU,iBAAiB,CAAC,CAAQ;IACtC,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;AAC5D,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,MAAM,CAAC,SAAkB,EAAE,QAAwB,kBAAkB;IACjF,IAAI,CAAC,SAAS,EAAE;QACZ,IAAI,KAAK,YAAY,KAAK,EAAE;YACxB,MAAM,KAAK,CAAC;SACf;aAAM;YACH,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;SAC1B;KACJ;AACL,CAAC","sourcesContent":["/**\n * Assert a particular code path is unreachable, e.g. to perform a compile-time exhaustiveness check.\n *\n * Ex:\n * ```ts\n * interface A { type: 'a' }\n * interface B { type: 'b' }\n * type TaggedUnion = A | B\n *\n * function exhaustiveSwitch(value: TaggedUnion) {\n *   switch (value.type) {\n *     case 'a': // do something with A\n *     case 'b': // do something with B\n *     // this will fail to compile if we add another type to TaggedUnion and forget to add a corresponding case\n *     // to the switch statement.\n *     default: assertUnreachable(value)\n *   }\n * }\n * ```\n */\nexport function assertUnreachable(_: never): never {\n    throw new Error(\"Reached unreachable code at runtime.\");\n}\n\n/**\n * Assert that a condition is true. Otherwise, throws an error.\n * @param condition Condition to test.\n * @param error Optional error message or error instance to throw.\n */\nexport function assert(condition: boolean, error: string | Error = \"Assertion failed\"): asserts condition {\n    if (!condition) {\n        if (error instanceof Error) {\n            throw error;\n        } else {\n            throw new Error(error);\n        }\n    }\n}\n"]}