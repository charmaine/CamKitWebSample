import "reflect-metadata";
import { Guard } from "./typeguards";
export declare function guard<T>(predicate: Guard<T>): (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;
export declare function validate(target: Object, key: string | symbol, descriptor: PropertyDescriptor): void;
/**
 * Checks whether given value is assignable to provided type.
 */
export declare function isValueOfType(value: unknown, type: any): boolean;
/**
 * Returns type string of a value. It mostly mimics the behavior of typeof, but for non-primitives
 * (i.e. objects and functions), it returns a more granular type name where possible. Source:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#custom_method_that_gets_a_more_specific_type
 */
export declare function getTypeName(value: unknown): string;
