/**
 * For instances where we'd like to define a Tuple to be of certain type and length.
 * Example: TupleOf<number, 3> // [number, number, number]
 *
 * For more example and use cases regarding Recursive conditional types
 * see: https://github.com/microsoft/TypeScript/pull/40002
 */
type _TupleOf<T, N extends number, R extends unknown[]> = R["length"] extends N ? R : _TupleOf<T, N, [T, ...R]>;
export type TupleOf<T, N extends number> = N extends N ? (number extends N ? T[] : _TupleOf<T, N, []>) : never;
/**
 * Converts snake_case string literal types to camelCase.
 */
export type SnakeToCamelCase<S extends string> = S extends `${infer T}_${infer U}` ? `${T}${Capitalize<SnakeToCamelCase<U>>}` : S;
/**
 * Converts camelCase string literal types to snake_case.
 */
export type CamelToSnakeCase<S extends string> = S extends `${infer T}${infer U}` ? `${T extends Capitalize<T> ? "_" : ""}${Lowercase<T>}${CamelToSnakeCase<U>}` : S;
export {};
