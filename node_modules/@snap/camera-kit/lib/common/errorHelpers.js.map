{"version":3,"file":"errorHelpers.js","sourceRoot":"","sources":["../../src/common/errorHelpers.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AACH,MAAM,UAAU,cAAc,CAAC,KAAY;;IACvC,MAAM,KAAK,GAAG,MAAA,KAAK,CAAC,KAAK,mCAAI,EAAE,CAAC;IAChC,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,mBAAmB,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;AACvG,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,WAAW,CAAC,KAAc;IACtC,IAAI,KAAK,YAAY,KAAK;QAAE,OAAO,KAAK,CAAC;IAEzC,IAAI;QACA,OAAO,IAAI,KAAK,CAAC,4DAA4D,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;KACzG;IAAC,OAAO,CAAC,EAAE;QACR,OAAO,IAAI,KAAK,CAAC,gFAAgF,CAAC,CAAC;KACtG;AACL,CAAC","sourcesContent":["/**\n * Returns a stack trace for a given error, and also appends the stack trace of any nested error, if one exists.\n * @param error Error to stringify.\n * @returns Error stack trace.\n */\nexport function stringifyError(error: Error): string {\n    const outer = error.stack ?? \"\";\n    return error.cause ? `${outer}\\nCaused by:\\n\\t${stringifyError(ensureError(error.cause))}` : outer;\n}\n\n/**\n * If given a value of type Error, return it â€“ otherwise wrap the value in an Error.\n */\nexport function ensureError(error: unknown): Error {\n    if (error instanceof Error) return error;\n\n    try {\n        return new Error(`Non-Error type exception thrown. Serialized error value: ${JSON.stringify(error)}`);\n    } catch (_) {\n        return new Error(\"Non-Error type exception thrown. Original error value could not be serialized.\");\n    }\n}\n"]}