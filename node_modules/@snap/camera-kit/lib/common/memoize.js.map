{"version":3,"file":"memoize.js","sourceRoot":"","sources":["../../src/common/memoize.ts"],"names":[],"mappings":"AAOA,MAAM,UAAU,UAAU,CAAC,EAAW;IAClC,OAAO,OAAO,EAAE,KAAK,UAAU,IAAI,OAAQ,EAAU,CAAC,QAAQ,KAAK,UAAU,CAAC;AAClF,CAAC;AAED,MAAM,UAAU,OAAO,CAAyB,QAAY;IACxD,IAAI,IAAS,CAAC;IACd,MAAM,QAAQ,GAAG,CAAC,GAAG,IAAW,EAAE,EAAE;QAChC,IAAI,OAAO,IAAI,KAAK,WAAW;YAAE,OAAO,IAAI,CAAC;QAC7C,IAAI,GAAG,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC;QACzB,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC;IACF,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,OAAO,QAAQ,CAAC;AACpB,CAAC","sourcesContent":["type AnyFunction<A extends any[] = any[], B = any> = (...args: A) => B;\n\nexport type Memoized<Fn extends AnyFunction> = {\n    (...args: Parameters<Fn>): ReturnType<Fn>;\n    delegate: Fn;\n};\n\nexport function isMemoized(fn: unknown): fn is Memoized<AnyFunction> {\n    return typeof fn === \"function\" && typeof (fn as any).delegate === \"function\";\n}\n\nexport function memoize<Fn extends AnyFunction>(delegate: Fn): Memoized<Fn> {\n    let memo: any;\n    const memoized = (...args: any[]) => {\n        if (typeof memo !== \"undefined\") return memo;\n        memo = delegate(...args);\n        return memo;\n    };\n    memoized.delegate = delegate;\n    return memoized;\n}\n"]}