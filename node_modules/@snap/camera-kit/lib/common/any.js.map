{"version":3,"file":"any.js","sourceRoot":"","sources":["../../src/common/any.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,kEAAkE,CAAC;AAC/F,OAAO,EAAE,aAAa,EAAE,MAAM,qEAAqE,CAAC;AAEpG,OAAO,EAAE,WAAW,EAAE,MAAM,uDAAuD,CAAC;AAEpF,2GAA2G;AAC3G,4DAA4D;AAC5D,gEAAgE;AAChE,6EAA6E;AAC7E,gDAAgD;AAChD,sFAAsF;AACtF,6EAA6E;AAC7E,sFAAsF;AACtF,6EAA6E;AAC7E,6DAA6D;AAC7D,0DAA0D;AAC1D,wEAAwE;AACxE,wGAAwG;AACxG,2FAA2F;AAC3F,uFAAuF;AAEvF,MAAM,CAAC,MAAM,aAAa,GAAG;IACzB,WAAW,EAAE,gEAAgE;IAC7E,aAAa,EAAE,kEAAkE;IACjF,MAAM,EAAE,iDAAiD;CAC5D,CAAC;AASF;;;;;GAKG;AACH,MAAM,UAAU,kBAAkB,CAAC,OAAgB;IAC/C,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;IACjC,QAAQ,OAAO,EAAE;QACb,KAAK,aAAa,CAAC,aAAa;YAC5B,OAAO;gBACH,OAAO;gBACP,iEAAiE;gBACjE,KAAK,EAAE,aAAa,CAAC,MAAM,CAAC,OAAmC,CAAC,CAAC,MAAM,EAAE;aAC5E,CAAC;QACN,KAAK,aAAa,CAAC,WAAW;YAC1B,OAAO;gBACH,OAAO;gBACP,KAAK,EAAE,WAAW,CAAC,MAAM,CAAC,OAAiC,CAAC,CAAC,MAAM,EAAE;aACxE,CAAC;QACN,KAAK,aAAa,CAAC,MAAM;YACrB,OAAO;gBACH,OAAO;gBACP,KAAK,EAAE,WAAW,CAAC,MAAM,CAAC,OAAiC,CAAC,CAAC,MAAM,EAAE;aACxE,CAAC;QACN;YACI,MAAM;KACb;AACL,CAAC","sourcesContent":["import { RankingInfo } from \"../generated-proto/pb_schema/camera_kit/v3/features/ranking_info\";\nimport { RemoteApiInfo } from \"../generated-proto/pb_schema/camera_kit/v3/features/remote_api_info\";\nimport { Any } from \"../generated-proto/pb_schema/google/protobuf/any\";\nimport { StringValue } from \"../generated-proto/pb_schema/google/protobuf/wrappers\";\n\n// There is a discrepancy in how the CameraKit backend and ts-proto serialize a protobuf message into JSON.\n// The backend serialization follows the spec outlined here:\n// https://protobuf.dev/reference/protobuf/google.protobuf/#json\n// According to this specification, the actual message is represented as JSON\n// with an additional @type discriminator field.\n// However, this approach is not consistent with what the client-side expects for Any.\n// It requires it to be in the format { typeUrl: string, value: UInt8Array }.\n// Therefore, we need to map the JSON representation of Any to the actual Any message.\n// This issue only applies to JSON-serialized protos returned by our backend.\n// The JSON serialization of the ts-proto package that we use\n// does not appear to be following the spec regarding Any.\n// Even if it does, the deserialization part has to be handled manually.\n// This issue does not apply to cases where the Lens object is deserialized from a binary proto message.\n// Ideally, to fix this issue, we want to switch to gRPC web for our backend communication,\n// similar to how we do it for COF. Ticket: https://jira.sc-corp.net/browse/CAMKIT-4668\n\nexport const knownAnyTypes = {\n    rankingInfo: \"type.googleapis.com/com.snap.camerakit.v3.features.RankingInfo\",\n    remoteApiInfo: \"type.googleapis.com/com.snap.camerakit.v3.features.RemoteApiInfo\",\n    string: \"type.googleapis.com/google.protobuf.StringValue\",\n};\n\n/**\n * JSON-serialized any message according to spec: https://protobuf.dev/reference/protobuf/google.protobuf/#json\n */\nexport interface AnyJson extends Record<string, unknown> {\n    \"@type\": string;\n}\n\n/**\n * Gets JSON-serialized any message and maps it to JS representation of Any type.\n * @param jsonAny JSON-serialized any message according to spec:\n * https://protobuf.dev/reference/protobuf/google.protobuf/#json\n * @returns JS representation of Any proto message.\n */\nexport function encodeKnownAnyJson(jsonAny: AnyJson): Any | void {\n    const typeUrl = jsonAny[\"@type\"];\n    switch (typeUrl) {\n        case knownAnyTypes.remoteApiInfo:\n            return {\n                typeUrl,\n                // Safety: we know that spec ensures all message fields to exists\n                value: RemoteApiInfo.encode(jsonAny as unknown as RemoteApiInfo).finish(),\n            };\n        case knownAnyTypes.rankingInfo:\n            return {\n                typeUrl,\n                value: RankingInfo.encode(jsonAny as unknown as RankingInfo).finish(),\n            };\n        case knownAnyTypes.string:\n            return {\n                typeUrl,\n                value: StringValue.encode(jsonAny as unknown as StringValue).finish(),\n            };\n        default:\n            break;\n    }\n}\n"]}