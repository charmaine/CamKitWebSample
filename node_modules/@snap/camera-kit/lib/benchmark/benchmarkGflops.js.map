{"version":3,"file":"benchmarkGflops.js","sourceRoot":"","sources":["../../src/benchmark/benchmarkGflops.ts"],"names":[],"mappings":"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","sourcesContent":["import { BenchmarkResult, LensPerformanceCluster } from \"./estimateLensPerformanceCluster\";\nimport { createFramebuffer, createProgram, createTexture, promiseSync, setUniform1i, setUniform4f } from \"./webglUtils\";\n\nconst vertexSource = `#version 300 es\n\nprecision mediump float;\nprecision mediump int;\n\nin vec2 pos;\n\nvoid main() {\n    gl_Position = vec4(pos, 0.0, 1.0);\n}\n`;\n\nconst fragmentSource = `#version 300 es\n\nprecision mediump float;\nprecision mediump int;\n\nuniform int LOOP_COUNT;\nuniform vec4 v0;\nuniform vec4 v1;\nuniform vec4 v2;\n\nout vec4 fragColor;\n\n#define REPEAT_2(x) x; x\n#define REPEAT_4(x) REPEAT_2(x); REPEAT_2(x)\n#define REPEAT_8(x) REPEAT_4(x); REPEAT_4(x)\n#define REPEAT_16(x) REPEAT_8(x); REPEAT_8(x)\n#define REPEAT_32(x) REPEAT_16(x); REPEAT_16(x)\n\nvoid main() {\n    vec4 r = v2;\n    for (int i = 0; i < LOOP_COUNT; i++) {\n        REPEAT_32(r = r * v1 + v0);\n    }\n    fragColor = r;\n}\n`;\n\nconst width = 1024;\nconst height = 1024;\nconst budgetMs = 300;\nconst maxLoopCount = 1000;\n\nfunction prepareBenchmark(gl: WebGL2RenderingContext): { program: WebGLProgram; cleanupBenchmark: () => void } {\n    const texture = createTexture(gl, width, height);\n    const framebuffer = createFramebuffer(gl, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n        throw new Error(\"Failed to create WebGLBuffer.\");\n    }\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, 1, -1, -1, 1, -1, 1, 1]), gl.STATIC_DRAW);\n\n    gl.viewport(0, 0, width, height);\n    gl.disable(gl.CULL_FACE);\n    gl.disable(gl.DEPTH_TEST);\n\n    const program = createProgram(gl, vertexSource, fragmentSource);\n    gl.useProgram(program);\n\n    const posLocation = gl.getAttribLocation(program, \"pos\");\n    gl.enableVertexAttribArray(posLocation);\n    gl.vertexAttribPointer(posLocation, 2, gl.FLOAT, false, 0, 0);\n\n    setUniform4f(gl, program, \"v0\", [1.15, 1.23, 1.47, 1.84]);\n    setUniform4f(gl, program, \"v1\", [1.65, 1.22, 1.69, 1.04]);\n    setUniform4f(gl, program, \"v2\", [1.05, 1.3, 1.55, 1.23]);\n\n    return {\n        program,\n        cleanupBenchmark: () => {\n            gl.deleteProgram(program);\n            gl.deleteBuffer(buffer);\n            gl.deleteFramebuffer(framebuffer);\n            gl.deleteTexture(texture);\n        },\n    };\n}\n\nasync function runBenchmark(gl: WebGL2RenderingContext, program: WebGLProgram): Promise<number> {\n    await promiseSync(gl);\n\n    const start = performance.now();\n    const flops: number[] = [];\n\n    let loopCount = 20;\n    while (true) {\n        setUniform1i(gl, program, \"LOOP_COUNT\", loopCount);\n\n        const iterationStart = performance.now();\n\n        gl.drawArrays(gl.TRIANGLE_FAN, 0, 4);\n        await promiseSync(gl);\n\n        const iterationEnd = performance.now();\n        const duration = iterationEnd - iterationStart;\n        flops.push(loopCount / duration);\n\n        const remainingBudgetMs = budgetMs - (iterationEnd - start);\n        if (remainingBudgetMs < 0) break;\n\n        if (loopCount < maxLoopCount) {\n            loopCount += remainingBudgetMs < duration ? 10 : (0.6 * loopCount * remainingBudgetMs) / duration;\n        }\n    }\n\n    const maxFlops = Math.max(...flops) * (8 * 32) * width * height;\n    return maxFlops / 1e6;\n}\n\n/**\n * These are obtained from historical performance data gathered from end-user devices. Keys are gflops, values are the\n * corresponding performance rating.\n *\n * To compute the performance rating given a gflops value, find the nearest key in this map and look up the rating.\n */\nexport const gflopsClusterCenters = new Map<number, LensPerformanceCluster>([\n    [34, 1],\n    [134, 2],\n    [385, 3],\n    [783, 4],\n    [1484, 5],\n    [2313, 6],\n]);\n\n/**\n * This benchmark is the same that's run on non-web (e.g. native mobile) platforms, and produces results that can be\n * compared to those gathered on those platforms â€“ this allows us to cluster results and determine a performance rating\n * based on historical data gathered elsewhere.\n *\n * @internal\n */\nexport async function benchmarkGflops(gl: WebGL2RenderingContext): Promise<BenchmarkResult> {\n    const { program, cleanupBenchmark } = prepareBenchmark(gl);\n    const gflops = await runBenchmark(gl, program);\n    cleanupBenchmark();\n    return { name: \"gflops\", value: gflops };\n}\n"]}