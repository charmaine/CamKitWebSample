{"version":3,"file":"requestStateEmittingHandler.js","sourceRoot":"","sources":["../../src/handlers/requestStateEmittingHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import { ensureError } from \"../common/errorHelpers\";\nimport { getTimeMs } from \"../common/time\";\nimport { Injectable } from \"../dependency-injection/Injectable\";\nimport { TypedCustomEvent } from \"../events/TypedCustomEvent\";\nimport { TypedEventTarget } from \"../events/TypedEventTarget\";\nimport { ChainableHandler, RequestMetadata } from \"./HandlerChainBuilder\";\n\nlet requestId = 0;\nconst safeParseInt = (str: string | null) => {\n    if (str == null) return 0;\n    const maybeInt = parseInt(str);\n    return isNaN(maybeInt) ? 0 : maybeInt;\n};\n\ninterface Started {\n    requestId: number;\n    timeMs: number;\n    dimensions: Dimensions;\n}\n\ninterface Completed {\n    requestId: number;\n    timeMs: number;\n    dimensions: Dimensions;\n    status: number;\n    sizeByte: number;\n}\n\ninterface Errored {\n    requestId: number;\n    timeMs: number;\n    dimensions: Dimensions;\n    error: Error;\n}\n\nexport type Dimensions = Record<string, string | undefined>;\n\nexport type RequestStateEvents =\n    | TypedCustomEvent<\"started\", Started>\n    | TypedCustomEvent<\"completed\", Completed>\n    | TypedCustomEvent<\"errored\", Errored>;\n\nexport const dispatchRequestStarted = (\n    requestStateEventTarget: RequestStateEventTarget,\n    data: Omit<Started, \"requestId\" | \"timeMs\">\n): Started => {\n    const started: Started = { ...data, requestId: requestId++, timeMs: getTimeMs() };\n    requestStateEventTarget.dispatchEvent(new TypedCustomEvent(\"started\", started));\n    return started;\n};\n\nexport const dispatchRequestCompleted = (\n    requestStateEventTarget: RequestStateEventTarget,\n    data: Omit<Completed, \"timeMs\">\n): Completed => {\n    const completed: Completed = { ...data, timeMs: getTimeMs() };\n    requestStateEventTarget.dispatchEvent(new TypedCustomEvent(\"completed\", completed));\n    return completed;\n};\n\nexport const dispatchRequestErrored = (\n    requestStateEventTarget: RequestStateEventTarget,\n    data: Omit<Errored, \"timeMs\">\n): Errored => {\n    const errored: Errored = { ...data, timeMs: getTimeMs() };\n    requestStateEventTarget.dispatchEvent(new TypedCustomEvent(\"errored\", errored));\n    return errored;\n};\n\nexport const createRequestStateEmittingHandler =\n    <D extends Dimensions = Dimensions>(\n        requestStateEventTarget: RequestStateEventTarget\n    ): ChainableHandler<[RequestInfo, D], Response, RequestInfo, Response, RequestMetadata> =>\n    (next) =>\n    async ([request, dimensions], metadata) => {\n        const { requestId } = dispatchRequestStarted(requestStateEventTarget, { dimensions });\n        try {\n            const response = await next(request, metadata);\n            const status = response.status;\n            const sizeByte = safeParseInt(response.headers.get(\"content-length\"));\n            dispatchRequestCompleted(requestStateEventTarget, { requestId, dimensions, status, sizeByte });\n            return response;\n        } catch (error) {\n            dispatchRequestErrored(requestStateEventTarget, { requestId, dimensions, error: ensureError(error) });\n            throw error;\n        }\n    };\n\n/**\n * This event target may be used to listen for any network request state changes initiated by CameraKit.\n *\n * @internal\n */\nexport type RequestStateEventTarget = TypedEventTarget<RequestStateEvents>;\n\n/**\n * @internal\n */\nexport const requestStateEventTargetFactory = Injectable(\n    \"requestStateEventTarget\",\n    (): RequestStateEventTarget => new TypedEventTarget()\n);\n"]}