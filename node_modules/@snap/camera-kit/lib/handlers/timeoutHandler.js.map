{"version":3,"file":"timeoutHandler.js","sourceRoot":"","sources":["../../src/handlers/timeoutHandler.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,iCAAiC,CAAC;AACxE,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAGhD,MAAM,KAAK,GAAG,CAAC,MAAc,EAAE,EAAE,CAAC,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;AAE9F,MAAM,cAAc,GAAmC;IACnD,WAAW,EAAE,CAAC,OAAO,EAAE,EAAE;QACrB,0GAA0G;QAC1G,iCAAiC;QACjC,MAAM,WAAW,GAAG,QAAQ,CAAC,OAAO,CAAC;YACjC,CAAC,CAAC,OAAO,OAAO,EAAE;YAClB,CAAC,CAAC,OAAO,YAAY,OAAO;gBAC5B,CAAC,CAAC,OAAO,OAAO,CAAC,GAAG,EAAE;gBACtB,CAAC,CAAC,EAAE,CAAC;QACT,OAAO,IAAI,KAAK,CAAC,WAAW,WAAW,uCAAuC,CAAC,CAAC;IACpF,CAAC;IACD,OAAO,EAAE,EAAE,GAAG,IAAI;CACrB,CAAC;AAcF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAChC,UAA+C,EAAE,EACP,EAAE;IAC5C,MAAM,cAAc,GAAG,qBAAqB,CAAC,OAAO,CAAC,CAAC;IACtD,MAAM,EAAE,WAAW,EAAE,OAAO,EAAE,mCAAQ,cAAc,GAAK,cAAc,CAAE,CAAC;IAE1E,oHAAoH;IACpH,uEAAuE;IACvE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAC3B,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3G,CAAC,CAAC","sourcesContent":["import { copyDefinedProperties } from \"../common/copyDefinedProperties\";\nimport { isString } from \"../common/typeguards\";\nimport { ChainableHandler, RequestMetadata } from \"./HandlerChainBuilder\";\n\nconst sleep = (millis: number) => new Promise<void>((resolve) => setTimeout(resolve, millis));\n\nconst defaultOptions: TimeoutHandlerOptions<unknown> = {\n    createError: (request) => {\n        // The string and Request types are very common, so our default error creator special-cases those types to\n        // provide better error messages.\n        const destination = isString(request)\n            ? `for ${request}`\n            : request instanceof Request\n            ? `for ${request.url}`\n            : \"\";\n        return new Error(`Request ${destination} timed out by client timeout handler.`);\n    },\n    timeout: 30 * 1000,\n};\n\nexport interface TimeoutHandlerOptions<Req> {\n    /**\n     * A function that returns a new Error instance when a timeout occurs.\n     */\n    createError: (req: Req, meta?: RequestMetadata | void) => Error;\n\n    /**\n     * Abort requests after this number of milliseconds. Defaults to 30 seconds.\n     */\n    timeout: number;\n}\n\n/**\n * Timeout requests after a given number of milliseconds, rejecting the Response promise with a custom error.\n *\n * @param options\n * @returns {@link ChainableHandler}, suitable for use in {@link HandlerChainBuilder.map}\n */\nexport const createTimeoutHandler = <Req, Res, Meta extends RequestMetadata>(\n    options: Partial<TimeoutHandlerOptions<Req>> = {}\n): ChainableHandler<Req, Res, Req, Res, Meta> => {\n    const definedOptions = copyDefinedProperties(options);\n    const { createError, timeout } = { ...defaultOptions, ...definedOptions };\n\n    // If the timeout Promise wins the race, the HandlerChainBuilder sets the abort signal for subsequent handlers. They\n    // may look at the abort signal in order to terminate themselves early.\n    return (next) => (req, meta) =>\n        Promise.race([next(req, meta), sleep(timeout).then(() => Promise.reject(createError(req, meta)))]);\n};\n"]}