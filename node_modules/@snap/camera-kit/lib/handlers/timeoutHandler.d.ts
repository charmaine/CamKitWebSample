import { ChainableHandler, RequestMetadata } from "./HandlerChainBuilder";
export interface TimeoutHandlerOptions<Req> {
    /**
     * A function that returns a new Error instance when a timeout occurs.
     */
    createError: (req: Req, meta?: RequestMetadata | void) => Error;
    /**
     * Abort requests after this number of milliseconds. Defaults to 30 seconds.
     */
    timeout: number;
}
/**
 * Timeout requests after a given number of milliseconds, rejecting the Response promise with a custom error.
 *
 * @param options
 * @returns {@link ChainableHandler}, suitable for use in {@link HandlerChainBuilder.map}
 */
export declare const createTimeoutHandler: <Req, Res, Meta extends RequestMetadata>(options?: Partial<TimeoutHandlerOptions<Req>>) => ChainableHandler<Req, Res, Req, Res, Meta>;
