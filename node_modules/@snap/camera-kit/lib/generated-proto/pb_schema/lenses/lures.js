import Long from "long";
import _m0 from "protobufjs/minimal";
import { Geocircle } from "./geocircle";
export const protobufPackage = "snapchat.lenses";
function createBaseLures() {
    return { locations: [], activeLure: undefined, closestLure: undefined };
}
export const Lures = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.locations) {
            Geocircle.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.activeLure !== undefined) {
            Geocircle.encode(message.activeLure, writer.uint32(18).fork()).ldelim();
        }
        if (message.closestLure !== undefined) {
            Geocircle.encode(message.closestLure, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLures();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.locations.push(Geocircle.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.activeLure = Geocircle.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.closestLure = Geocircle.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseLures();
        message.locations = ((_a = object.locations) === null || _a === void 0 ? void 0 : _a.map((e) => Geocircle.fromPartial(e))) || [];
        message.activeLure =
            object.activeLure !== undefined && object.activeLure !== null
                ? Geocircle.fromPartial(object.activeLure)
                : undefined;
        message.closestLure =
            object.closestLure !== undefined && object.closestLure !== null
                ? Geocircle.fromPartial(object.closestLure)
                : undefined;
        return message;
    },
};
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
//# sourceMappingURL=lures.js.map