import _m0 from "protobufjs/minimal";
import { Geocircle } from "./geocircle";
export declare const protobufPackage = "snapchat.lenses";
export interface Lures {
    locations: Geocircle[];
    activeLure: Geocircle | undefined;
    closestLure: Geocircle | undefined;
}
export declare const Lures: {
    encode(message: Lures, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Lures;
    fromPartial<I extends {
        locations?: {
            radius?: number | undefined;
            center?: {
                latitude?: number | undefined;
                longitude?: number | undefined;
            } | undefined;
        }[] | undefined;
        activeLure?: {
            radius?: number | undefined;
            center?: {
                latitude?: number | undefined;
                longitude?: number | undefined;
            } | undefined;
        } | undefined;
        closestLure?: {
            radius?: number | undefined;
            center?: {
                latitude?: number | undefined;
                longitude?: number | undefined;
            } | undefined;
        } | undefined;
    } & {
        locations?: ({
            radius?: number | undefined;
            center?: {
                latitude?: number | undefined;
                longitude?: number | undefined;
            } | undefined;
        }[] & ({
            radius?: number | undefined;
            center?: {
                latitude?: number | undefined;
                longitude?: number | undefined;
            } | undefined;
        } & {
            radius?: number | undefined;
            center?: ({
                latitude?: number | undefined;
                longitude?: number | undefined;
            } & {
                latitude?: number | undefined;
                longitude?: number | undefined;
            } & Record<Exclude<keyof I["locations"][number]["center"], keyof import("./geopoint").Geopoint>, never>) | undefined;
        } & Record<Exclude<keyof I["locations"][number], keyof Geocircle>, never>)[] & Record<Exclude<keyof I["locations"], keyof {
            radius?: number | undefined;
            center?: {
                latitude?: number | undefined;
                longitude?: number | undefined;
            } | undefined;
        }[]>, never>) | undefined;
        activeLure?: ({
            radius?: number | undefined;
            center?: {
                latitude?: number | undefined;
                longitude?: number | undefined;
            } | undefined;
        } & {
            radius?: number | undefined;
            center?: ({
                latitude?: number | undefined;
                longitude?: number | undefined;
            } & {
                latitude?: number | undefined;
                longitude?: number | undefined;
            } & Record<Exclude<keyof I["activeLure"]["center"], keyof import("./geopoint").Geopoint>, never>) | undefined;
        } & Record<Exclude<keyof I["activeLure"], keyof Geocircle>, never>) | undefined;
        closestLure?: ({
            radius?: number | undefined;
            center?: {
                latitude?: number | undefined;
                longitude?: number | undefined;
            } | undefined;
        } & {
            radius?: number | undefined;
            center?: ({
                latitude?: number | undefined;
                longitude?: number | undefined;
            } & {
                latitude?: number | undefined;
                longitude?: number | undefined;
            } & Record<Exclude<keyof I["closestLure"]["center"], keyof import("./geopoint").Geopoint>, never>) | undefined;
        } & Record<Exclude<keyof I["closestLure"], keyof Geocircle>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Lures>, never>>(object: I): Lures;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
