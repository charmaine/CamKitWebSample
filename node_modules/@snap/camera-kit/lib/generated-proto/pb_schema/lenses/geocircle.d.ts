import _m0 from "protobufjs/minimal";
import { Geopoint } from "./geopoint";
export declare const protobufPackage = "snapchat.lenses";
export interface Geocircle {
    radius: number;
    center: Geopoint | undefined;
}
export declare const Geocircle: {
    encode(message: Geocircle, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Geocircle;
    fromPartial<I extends {
        radius?: number | undefined;
        center?: {
            latitude?: number | undefined;
            longitude?: number | undefined;
        } | undefined;
    } & {
        radius?: number | undefined;
        center?: ({
            latitude?: number | undefined;
            longitude?: number | undefined;
        } & {
            latitude?: number | undefined;
            longitude?: number | undefined;
        } & Record<Exclude<keyof I["center"], keyof Geopoint>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Geocircle>, never>>(object: I): Geocircle;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
