import Long from "long";
import _m0 from "protobufjs/minimal";
import { ConfigResult } from "./config_result";
import { BenchmarkRequest } from "./benchmark";
export const protobufPackage = "snapchat.cdp.cof";
function createBaseConfigTargetingResponseDebugData() {
    return { abResultChecksumInput: "" };
}
export const ConfigTargetingResponseDebugData = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.abResultChecksumInput !== "") {
            writer.uint32(10).string(message.abResultChecksumInput);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigTargetingResponseDebugData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.abResultChecksumInput = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseConfigTargetingResponseDebugData();
        message.abResultChecksumInput = (_a = object.abResultChecksumInput) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseConfigTargetingResponse() {
    return {
        configResults: [],
        configResultsEtag: "",
        benchmarkRequest: undefined,
        fullResults: false,
        abResultChecksum: 0,
        iso3166Alpha2CountryCodeFromRequestIp: "",
        debugData: undefined,
    };
}
export const ConfigTargetingResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.configResults) {
            ConfigResult.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.configResultsEtag !== "") {
            writer.uint32(18).string(message.configResultsEtag);
        }
        if (message.benchmarkRequest !== undefined) {
            BenchmarkRequest.encode(message.benchmarkRequest, writer.uint32(26).fork()).ldelim();
        }
        if (message.fullResults === true) {
            writer.uint32(32).bool(message.fullResults);
        }
        if (message.abResultChecksum !== 0) {
            writer.uint32(40).int32(message.abResultChecksum);
        }
        if (message.iso3166Alpha2CountryCodeFromRequestIp !== "") {
            writer.uint32(50).string(message.iso3166Alpha2CountryCodeFromRequestIp);
        }
        if (message.debugData !== undefined) {
            ConfigTargetingResponseDebugData.encode(message.debugData, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigTargetingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configResults.push(ConfigResult.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.configResultsEtag = reader.string();
                    break;
                case 3:
                    message.benchmarkRequest = BenchmarkRequest.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.fullResults = reader.bool();
                    break;
                case 5:
                    message.abResultChecksum = reader.int32();
                    break;
                case 6:
                    message.iso3166Alpha2CountryCodeFromRequestIp = reader.string();
                    break;
                case 7:
                    message.debugData = ConfigTargetingResponseDebugData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseConfigTargetingResponse();
        message.configResults = ((_a = object.configResults) === null || _a === void 0 ? void 0 : _a.map((e) => ConfigResult.fromPartial(e))) || [];
        message.configResultsEtag = (_b = object.configResultsEtag) !== null && _b !== void 0 ? _b : "";
        message.benchmarkRequest =
            object.benchmarkRequest !== undefined && object.benchmarkRequest !== null
                ? BenchmarkRequest.fromPartial(object.benchmarkRequest)
                : undefined;
        message.fullResults = (_c = object.fullResults) !== null && _c !== void 0 ? _c : false;
        message.abResultChecksum = (_d = object.abResultChecksum) !== null && _d !== void 0 ? _d : 0;
        message.iso3166Alpha2CountryCodeFromRequestIp = (_e = object.iso3166Alpha2CountryCodeFromRequestIp) !== null && _e !== void 0 ? _e : "";
        message.debugData =
            object.debugData !== undefined && object.debugData !== null
                ? ConfigTargetingResponseDebugData.fromPartial(object.debugData)
                : undefined;
        return message;
    },
};
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
//# sourceMappingURL=config_response.js.map