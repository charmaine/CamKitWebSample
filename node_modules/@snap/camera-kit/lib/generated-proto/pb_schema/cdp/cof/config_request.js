import Long from "long";
import _m0 from "protobufjs/minimal";
import { BenchmarkResult } from "./benchmark";
import { Ruid } from "../../common/ruid";
import { BoolValue } from "../../google/protobuf/wrappers";
export const protobufPackage = "snapchat.cdp.cof";
export var ConfigTargetingTriggerEventType;
(function (ConfigTargetingTriggerEventType) {
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["UNKNOWN_EVENT_TYPE"] = 0] = "UNKNOWN_EVENT_TYPE";
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["COLD_START"] = 1] = "COLD_START";
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["WARM_START"] = 2] = "WARM_START";
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["FOREGROUND_TRIGGER"] = 3] = "FOREGROUND_TRIGGER";
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["BACKGROUND_TRIGGER"] = 4] = "BACKGROUND_TRIGGER";
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ConfigTargetingTriggerEventType || (ConfigTargetingTriggerEventType = {}));
export var ConfigTargetingAppState;
(function (ConfigTargetingAppState) {
    ConfigTargetingAppState[ConfigTargetingAppState["UNKNOWN_APP_STATE"] = 0] = "UNKNOWN_APP_STATE";
    ConfigTargetingAppState[ConfigTargetingAppState["FOREGROUND"] = 1] = "FOREGROUND";
    ConfigTargetingAppState[ConfigTargetingAppState["BACKGROUND"] = 2] = "BACKGROUND";
    ConfigTargetingAppState[ConfigTargetingAppState["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ConfigTargetingAppState || (ConfigTargetingAppState = {}));
export var ConfigTargetingInstrumentation;
(function (ConfigTargetingInstrumentation) {
    ConfigTargetingInstrumentation[ConfigTargetingInstrumentation["DEFAULT_INSTRUMENTATION"] = 0] = "DEFAULT_INSTRUMENTATION";
    ConfigTargetingInstrumentation[ConfigTargetingInstrumentation["USER_AUTHENTICATION"] = 1] = "USER_AUTHENTICATION";
    ConfigTargetingInstrumentation[ConfigTargetingInstrumentation["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ConfigTargetingInstrumentation || (ConfigTargetingInstrumentation = {}));
export var Connectivity_NetworkType;
(function (Connectivity_NetworkType) {
    Connectivity_NetworkType[Connectivity_NetworkType["UNKNOWN_NETWORK_TYPE"] = 0] = "UNKNOWN_NETWORK_TYPE";
    Connectivity_NetworkType[Connectivity_NetworkType["CELLULAR"] = 1] = "CELLULAR";
    Connectivity_NetworkType[Connectivity_NetworkType["WIFI"] = 2] = "WIFI";
    Connectivity_NetworkType[Connectivity_NetworkType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Connectivity_NetworkType || (Connectivity_NetworkType = {}));
function createBaseConfigTargetingRequest() {
    return {
        configResultsEtag: "",
        namespaces: [],
        ghostId: "",
        countryCode: "",
        screenWidth: 0,
        screenHeight: 0,
        connectivity: undefined,
        maxVideoWidthPx: 0,
        maxVideoHeightPx: 0,
        benchmarkResults: [],
        deltaSync: false,
        userAgent: "",
        triggerEventType: 0,
        appState: 0,
        locale: "",
        deviceId: "",
        userId: "",
        clientIp: "",
        isUnAuthorized: false,
        appLocale: "",
        instrumentation: 0,
        lastSuccessfulSync: 0,
        isLogout: false,
        packageInstaller: "",
        syncTriggerBlizzardSessionId: "",
        syncExecutionBlizzardSessionId: "",
        cofSyncTriggerDelayFromStartupMs: 0,
        cofSyncExecutionDelayFromStartupMs: 0,
        syncTriggerTime: 0,
        decoderEncoderAvailability: undefined,
        snapkitAppId: "",
        lenscoreVersion: 0,
        ruid: undefined,
        configNames: [],
        includeTestUserTreatments: false,
        disableExposureLogging: false,
        lensClusterOrig4: 0,
        clientId: "",
    };
}
export const ConfigTargetingRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.configResultsEtag !== "") {
            writer.uint32(10).string(message.configResultsEtag);
        }
        writer.uint32(18).fork();
        for (const v of message.namespaces) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.ghostId !== "") {
            writer.uint32(26).string(message.ghostId);
        }
        if (message.countryCode !== "") {
            writer.uint32(34).string(message.countryCode);
        }
        if (message.screenWidth !== 0) {
            writer.uint32(40).int32(message.screenWidth);
        }
        if (message.screenHeight !== 0) {
            writer.uint32(48).int32(message.screenHeight);
        }
        if (message.connectivity !== undefined) {
            Connectivity.encode(message.connectivity, writer.uint32(58).fork()).ldelim();
        }
        if (message.maxVideoWidthPx !== 0) {
            writer.uint32(64).int32(message.maxVideoWidthPx);
        }
        if (message.maxVideoHeightPx !== 0) {
            writer.uint32(72).int32(message.maxVideoHeightPx);
        }
        for (const v of message.benchmarkResults) {
            BenchmarkResult.encode(v, writer.uint32(82).fork()).ldelim();
        }
        if (message.deltaSync === true) {
            writer.uint32(88).bool(message.deltaSync);
        }
        if (message.userAgent !== "") {
            writer.uint32(98).string(message.userAgent);
        }
        if (message.triggerEventType !== 0) {
            writer.uint32(104).int32(message.triggerEventType);
        }
        if (message.appState !== 0) {
            writer.uint32(112).int32(message.appState);
        }
        if (message.locale !== "") {
            writer.uint32(122).string(message.locale);
        }
        if (message.deviceId !== "") {
            writer.uint32(130).string(message.deviceId);
        }
        if (message.userId !== "") {
            writer.uint32(138).string(message.userId);
        }
        if (message.clientIp !== "") {
            writer.uint32(146).string(message.clientIp);
        }
        if (message.isUnAuthorized === true) {
            writer.uint32(152).bool(message.isUnAuthorized);
        }
        if (message.appLocale !== "") {
            writer.uint32(162).string(message.appLocale);
        }
        if (message.instrumentation !== 0) {
            writer.uint32(168).int32(message.instrumentation);
        }
        if (message.lastSuccessfulSync !== 0) {
            writer.uint32(176).int64(message.lastSuccessfulSync);
        }
        if (message.isLogout === true) {
            writer.uint32(184).bool(message.isLogout);
        }
        if (message.packageInstaller !== "") {
            writer.uint32(194).string(message.packageInstaller);
        }
        if (message.syncTriggerBlizzardSessionId !== "") {
            writer.uint32(202).string(message.syncTriggerBlizzardSessionId);
        }
        if (message.syncExecutionBlizzardSessionId !== "") {
            writer.uint32(210).string(message.syncExecutionBlizzardSessionId);
        }
        if (message.cofSyncTriggerDelayFromStartupMs !== 0) {
            writer.uint32(216).int32(message.cofSyncTriggerDelayFromStartupMs);
        }
        if (message.cofSyncExecutionDelayFromStartupMs !== 0) {
            writer.uint32(224).int32(message.cofSyncExecutionDelayFromStartupMs);
        }
        if (message.syncTriggerTime !== 0) {
            writer.uint32(232).int64(message.syncTriggerTime);
        }
        if (message.decoderEncoderAvailability !== undefined) {
            DecoderEncoderAvailablity.encode(message.decoderEncoderAvailability, writer.uint32(242).fork()).ldelim();
        }
        if (message.snapkitAppId !== "") {
            writer.uint32(250).string(message.snapkitAppId);
        }
        if (message.lenscoreVersion !== 0) {
            writer.uint32(256).int32(message.lenscoreVersion);
        }
        if (message.ruid !== undefined) {
            Ruid.encode(message.ruid, writer.uint32(266).fork()).ldelim();
        }
        for (const v of message.configNames) {
            writer.uint32(274).string(v);
        }
        if (message.includeTestUserTreatments === true) {
            writer.uint32(288).bool(message.includeTestUserTreatments);
        }
        if (message.disableExposureLogging === true) {
            writer.uint32(296).bool(message.disableExposureLogging);
        }
        if (message.lensClusterOrig4 !== 0) {
            writer.uint32(304).int32(message.lensClusterOrig4);
        }
        if (message.clientId !== "") {
            writer.uint32(314).string(message.clientId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConfigTargetingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configResultsEtag = reader.string();
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.namespaces.push(reader.int32());
                        }
                    }
                    else {
                        message.namespaces.push(reader.int32());
                    }
                    break;
                case 3:
                    message.ghostId = reader.string();
                    break;
                case 4:
                    message.countryCode = reader.string();
                    break;
                case 5:
                    message.screenWidth = reader.int32();
                    break;
                case 6:
                    message.screenHeight = reader.int32();
                    break;
                case 7:
                    message.connectivity = Connectivity.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.maxVideoWidthPx = reader.int32();
                    break;
                case 9:
                    message.maxVideoHeightPx = reader.int32();
                    break;
                case 10:
                    message.benchmarkResults.push(BenchmarkResult.decode(reader, reader.uint32()));
                    break;
                case 11:
                    message.deltaSync = reader.bool();
                    break;
                case 12:
                    message.userAgent = reader.string();
                    break;
                case 13:
                    message.triggerEventType = reader.int32();
                    break;
                case 14:
                    message.appState = reader.int32();
                    break;
                case 15:
                    message.locale = reader.string();
                    break;
                case 16:
                    message.deviceId = reader.string();
                    break;
                case 17:
                    message.userId = reader.string();
                    break;
                case 18:
                    message.clientIp = reader.string();
                    break;
                case 19:
                    message.isUnAuthorized = reader.bool();
                    break;
                case 20:
                    message.appLocale = reader.string();
                    break;
                case 21:
                    message.instrumentation = reader.int32();
                    break;
                case 22:
                    message.lastSuccessfulSync = longToNumber(reader.int64());
                    break;
                case 23:
                    message.isLogout = reader.bool();
                    break;
                case 24:
                    message.packageInstaller = reader.string();
                    break;
                case 25:
                    message.syncTriggerBlizzardSessionId = reader.string();
                    break;
                case 26:
                    message.syncExecutionBlizzardSessionId = reader.string();
                    break;
                case 27:
                    message.cofSyncTriggerDelayFromStartupMs = reader.int32();
                    break;
                case 28:
                    message.cofSyncExecutionDelayFromStartupMs = reader.int32();
                    break;
                case 29:
                    message.syncTriggerTime = longToNumber(reader.int64());
                    break;
                case 30:
                    message.decoderEncoderAvailability = DecoderEncoderAvailablity.decode(reader, reader.uint32());
                    break;
                case 31:
                    message.snapkitAppId = reader.string();
                    break;
                case 32:
                    message.lenscoreVersion = reader.int32();
                    break;
                case 33:
                    message.ruid = Ruid.decode(reader, reader.uint32());
                    break;
                case 34:
                    message.configNames.push(reader.string());
                    break;
                case 36:
                    message.includeTestUserTreatments = reader.bool();
                    break;
                case 37:
                    message.disableExposureLogging = reader.bool();
                    break;
                case 38:
                    message.lensClusterOrig4 = reader.int32();
                    break;
                case 39:
                    message.clientId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10;
        const message = createBaseConfigTargetingRequest();
        message.configResultsEtag = (_a = object.configResultsEtag) !== null && _a !== void 0 ? _a : "";
        message.namespaces = ((_b = object.namespaces) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.ghostId = (_c = object.ghostId) !== null && _c !== void 0 ? _c : "";
        message.countryCode = (_d = object.countryCode) !== null && _d !== void 0 ? _d : "";
        message.screenWidth = (_e = object.screenWidth) !== null && _e !== void 0 ? _e : 0;
        message.screenHeight = (_f = object.screenHeight) !== null && _f !== void 0 ? _f : 0;
        message.connectivity =
            object.connectivity !== undefined && object.connectivity !== null
                ? Connectivity.fromPartial(object.connectivity)
                : undefined;
        message.maxVideoWidthPx = (_g = object.maxVideoWidthPx) !== null && _g !== void 0 ? _g : 0;
        message.maxVideoHeightPx = (_h = object.maxVideoHeightPx) !== null && _h !== void 0 ? _h : 0;
        message.benchmarkResults = ((_j = object.benchmarkResults) === null || _j === void 0 ? void 0 : _j.map((e) => BenchmarkResult.fromPartial(e))) || [];
        message.deltaSync = (_k = object.deltaSync) !== null && _k !== void 0 ? _k : false;
        message.userAgent = (_l = object.userAgent) !== null && _l !== void 0 ? _l : "";
        message.triggerEventType = (_m = object.triggerEventType) !== null && _m !== void 0 ? _m : 0;
        message.appState = (_o = object.appState) !== null && _o !== void 0 ? _o : 0;
        message.locale = (_p = object.locale) !== null && _p !== void 0 ? _p : "";
        message.deviceId = (_q = object.deviceId) !== null && _q !== void 0 ? _q : "";
        message.userId = (_r = object.userId) !== null && _r !== void 0 ? _r : "";
        message.clientIp = (_s = object.clientIp) !== null && _s !== void 0 ? _s : "";
        message.isUnAuthorized = (_t = object.isUnAuthorized) !== null && _t !== void 0 ? _t : false;
        message.appLocale = (_u = object.appLocale) !== null && _u !== void 0 ? _u : "";
        message.instrumentation = (_v = object.instrumentation) !== null && _v !== void 0 ? _v : 0;
        message.lastSuccessfulSync = (_w = object.lastSuccessfulSync) !== null && _w !== void 0 ? _w : 0;
        message.isLogout = (_x = object.isLogout) !== null && _x !== void 0 ? _x : false;
        message.packageInstaller = (_y = object.packageInstaller) !== null && _y !== void 0 ? _y : "";
        message.syncTriggerBlizzardSessionId = (_z = object.syncTriggerBlizzardSessionId) !== null && _z !== void 0 ? _z : "";
        message.syncExecutionBlizzardSessionId = (_0 = object.syncExecutionBlizzardSessionId) !== null && _0 !== void 0 ? _0 : "";
        message.cofSyncTriggerDelayFromStartupMs = (_1 = object.cofSyncTriggerDelayFromStartupMs) !== null && _1 !== void 0 ? _1 : 0;
        message.cofSyncExecutionDelayFromStartupMs = (_2 = object.cofSyncExecutionDelayFromStartupMs) !== null && _2 !== void 0 ? _2 : 0;
        message.syncTriggerTime = (_3 = object.syncTriggerTime) !== null && _3 !== void 0 ? _3 : 0;
        message.decoderEncoderAvailability =
            object.decoderEncoderAvailability !== undefined && object.decoderEncoderAvailability !== null
                ? DecoderEncoderAvailablity.fromPartial(object.decoderEncoderAvailability)
                : undefined;
        message.snapkitAppId = (_4 = object.snapkitAppId) !== null && _4 !== void 0 ? _4 : "";
        message.lenscoreVersion = (_5 = object.lenscoreVersion) !== null && _5 !== void 0 ? _5 : 0;
        message.ruid = object.ruid !== undefined && object.ruid !== null ? Ruid.fromPartial(object.ruid) : undefined;
        message.configNames = ((_6 = object.configNames) === null || _6 === void 0 ? void 0 : _6.map((e) => e)) || [];
        message.includeTestUserTreatments = (_7 = object.includeTestUserTreatments) !== null && _7 !== void 0 ? _7 : false;
        message.disableExposureLogging = (_8 = object.disableExposureLogging) !== null && _8 !== void 0 ? _8 : false;
        message.lensClusterOrig4 = (_9 = object.lensClusterOrig4) !== null && _9 !== void 0 ? _9 : 0;
        message.clientId = (_10 = object.clientId) !== null && _10 !== void 0 ? _10 : "";
        return message;
    },
};
function createBaseConnectivity() {
    return { networkType: 0, isMetered: undefined, isRoaming: undefined, carrier: "" };
}
export const Connectivity = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.networkType !== 0) {
            writer.uint32(8).int32(message.networkType);
        }
        if (message.isMetered !== undefined) {
            BoolValue.encode({ value: message.isMetered }, writer.uint32(18).fork()).ldelim();
        }
        if (message.isRoaming !== undefined) {
            BoolValue.encode({ value: message.isRoaming }, writer.uint32(26).fork()).ldelim();
        }
        if (message.carrier !== "") {
            writer.uint32(34).string(message.carrier);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConnectivity();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.networkType = reader.int32();
                    break;
                case 2:
                    message.isMetered = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 3:
                    message.isRoaming = BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 4:
                    message.carrier = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseConnectivity();
        message.networkType = (_a = object.networkType) !== null && _a !== void 0 ? _a : 0;
        message.isMetered = (_b = object.isMetered) !== null && _b !== void 0 ? _b : undefined;
        message.isRoaming = (_c = object.isRoaming) !== null && _c !== void 0 ? _c : undefined;
        message.carrier = (_d = object.carrier) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseDecoderEncoderAvailablity() {
    return { isSnapVp9DecoderAvailable: false, isSnapAv1DecoderAvailable: false };
}
export const DecoderEncoderAvailablity = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.isSnapVp9DecoderAvailable === true) {
            writer.uint32(8).bool(message.isSnapVp9DecoderAvailable);
        }
        if (message.isSnapAv1DecoderAvailable === true) {
            writer.uint32(16).bool(message.isSnapAv1DecoderAvailable);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDecoderEncoderAvailablity();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.isSnapVp9DecoderAvailable = reader.bool();
                    break;
                case 2:
                    message.isSnapAv1DecoderAvailable = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseDecoderEncoderAvailablity();
        message.isSnapVp9DecoderAvailable = (_a = object.isSnapVp9DecoderAvailable) !== null && _a !== void 0 ? _a : false;
        message.isSnapAv1DecoderAvailable = (_b = object.isSnapAv1DecoderAvailable) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
//# sourceMappingURL=config_request.js.map