import _m0 from "protobufjs/minimal";
import { BenchmarkName } from "./benchmark_name";
export declare const protobufPackage = "snapchat.cdp.cof";
export interface BenchmarkValue {
    intValue: number | undefined;
    longValue: number | undefined;
    boolValue: boolean | undefined;
    floatValue: number | undefined;
}
export interface BenchmarkRequest {
    benchmarkNames: BenchmarkName[];
    expirationTimestamp: Date | undefined;
}
export interface BenchmarkResult {
    name: BenchmarkName;
    value: BenchmarkValue | undefined;
}
export declare const BenchmarkValue: {
    encode(message: BenchmarkValue, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BenchmarkValue;
    fromPartial<I extends {
        intValue?: number | undefined;
        longValue?: number | undefined;
        boolValue?: boolean | undefined;
        floatValue?: number | undefined;
    } & {
        intValue?: number | undefined;
        longValue?: number | undefined;
        boolValue?: boolean | undefined;
        floatValue?: number | undefined;
    } & Record<Exclude<keyof I, keyof BenchmarkValue>, never>>(object: I): BenchmarkValue;
};
export declare const BenchmarkRequest: {
    encode(message: BenchmarkRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BenchmarkRequest;
    fromPartial<I extends {
        benchmarkNames?: BenchmarkName[] | undefined;
        expirationTimestamp?: Date | undefined;
    } & {
        benchmarkNames?: (BenchmarkName[] & BenchmarkName[] & Record<Exclude<keyof I["benchmarkNames"], keyof BenchmarkName[]>, never>) | undefined;
        expirationTimestamp?: Date | undefined;
    } & Record<Exclude<keyof I, keyof BenchmarkRequest>, never>>(object: I): BenchmarkRequest;
};
export declare const BenchmarkResult: {
    encode(message: BenchmarkResult, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BenchmarkResult;
    fromPartial<I extends {
        name?: BenchmarkName | undefined;
        value?: {
            intValue?: number | undefined;
            longValue?: number | undefined;
            boolValue?: boolean | undefined;
            floatValue?: number | undefined;
        } | undefined;
    } & {
        name?: BenchmarkName | undefined;
        value?: ({
            intValue?: number | undefined;
            longValue?: number | undefined;
            boolValue?: boolean | undefined;
            floatValue?: number | undefined;
        } & {
            intValue?: number | undefined;
            longValue?: number | undefined;
            boolValue?: boolean | undefined;
            floatValue?: number | undefined;
        } & Record<Exclude<keyof I["value"], keyof BenchmarkValue>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof BenchmarkResult>, never>>(object: I): BenchmarkResult;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
