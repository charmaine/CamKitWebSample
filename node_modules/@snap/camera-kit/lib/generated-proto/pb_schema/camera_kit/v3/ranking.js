import Long from "long";
import _m0 from "protobufjs/minimal";
export const protobufPackage = "com.snap.camerakit.v3";
export var RankingData_OSType;
(function (RankingData_OSType) {
    RankingData_OSType["OS_TYPE_UNSET"] = "OS_TYPE_UNSET";
    RankingData_OSType["OS_TYPE_ANDROID"] = "OS_TYPE_ANDROID";
    RankingData_OSType["OS_TYPE_IOS"] = "OS_TYPE_IOS";
    RankingData_OSType["OS_TYPE_IPAD_OS"] = "OS_TYPE_IPAD_OS";
    RankingData_OSType["OS_TYPE_MAC_OS"] = "OS_TYPE_MAC_OS";
    RankingData_OSType["OS_TYPE_WINDOWS"] = "OS_TYPE_WINDOWS";
    RankingData_OSType["OS_TYPE_LINUX"] = "OS_TYPE_LINUX";
    RankingData_OSType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(RankingData_OSType || (RankingData_OSType = {}));
export function rankingData_OSTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "OS_TYPE_UNSET":
            return RankingData_OSType.OS_TYPE_UNSET;
        case 1:
        case "OS_TYPE_ANDROID":
            return RankingData_OSType.OS_TYPE_ANDROID;
        case 2:
        case "OS_TYPE_IOS":
            return RankingData_OSType.OS_TYPE_IOS;
        case 3:
        case "OS_TYPE_IPAD_OS":
            return RankingData_OSType.OS_TYPE_IPAD_OS;
        case 4:
        case "OS_TYPE_MAC_OS":
            return RankingData_OSType.OS_TYPE_MAC_OS;
        case 5:
        case "OS_TYPE_WINDOWS":
            return RankingData_OSType.OS_TYPE_WINDOWS;
        case 6:
        case "OS_TYPE_LINUX":
            return RankingData_OSType.OS_TYPE_LINUX;
        case -1:
        case "UNRECOGNIZED":
        default:
            return RankingData_OSType.UNRECOGNIZED;
    }
}
export function rankingData_OSTypeToJSON(object) {
    switch (object) {
        case RankingData_OSType.OS_TYPE_UNSET:
            return "OS_TYPE_UNSET";
        case RankingData_OSType.OS_TYPE_ANDROID:
            return "OS_TYPE_ANDROID";
        case RankingData_OSType.OS_TYPE_IOS:
            return "OS_TYPE_IOS";
        case RankingData_OSType.OS_TYPE_IPAD_OS:
            return "OS_TYPE_IPAD_OS";
        case RankingData_OSType.OS_TYPE_MAC_OS:
            return "OS_TYPE_MAC_OS";
        case RankingData_OSType.OS_TYPE_WINDOWS:
            return "OS_TYPE_WINDOWS";
        case RankingData_OSType.OS_TYPE_LINUX:
            return "OS_TYPE_LINUX";
        default:
            return "UNKNOWN";
    }
}
export function rankingData_OSTypeToNumber(object) {
    switch (object) {
        case RankingData_OSType.OS_TYPE_UNSET:
            return 0;
        case RankingData_OSType.OS_TYPE_ANDROID:
            return 1;
        case RankingData_OSType.OS_TYPE_IOS:
            return 2;
        case RankingData_OSType.OS_TYPE_IPAD_OS:
            return 3;
        case RankingData_OSType.OS_TYPE_MAC_OS:
            return 4;
        case RankingData_OSType.OS_TYPE_WINDOWS:
            return 5;
        case RankingData_OSType.OS_TYPE_LINUX:
            return 6;
        default:
            return 0;
    }
}
export var RankingData_ConnectivityType;
(function (RankingData_ConnectivityType) {
    RankingData_ConnectivityType["CONNECTIVITY_TYPE_UNSET"] = "CONNECTIVITY_TYPE_UNSET";
    RankingData_ConnectivityType["CONNECTIVITY_TYPE_WIFI"] = "CONNECTIVITY_TYPE_WIFI";
    RankingData_ConnectivityType["CONNECTIVITY_TYPE_MOBILE"] = "CONNECTIVITY_TYPE_MOBILE";
    RankingData_ConnectivityType["CONNECTIVITY_TYPE_UNREACHABLE"] = "CONNECTIVITY_TYPE_UNREACHABLE";
    RankingData_ConnectivityType["CONNECTIVITY_TYPE_BLUETOOTH"] = "CONNECTIVITY_TYPE_BLUETOOTH";
    RankingData_ConnectivityType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(RankingData_ConnectivityType || (RankingData_ConnectivityType = {}));
export function rankingData_ConnectivityTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "CONNECTIVITY_TYPE_UNSET":
            return RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNSET;
        case 1:
        case "CONNECTIVITY_TYPE_WIFI":
            return RankingData_ConnectivityType.CONNECTIVITY_TYPE_WIFI;
        case 2:
        case "CONNECTIVITY_TYPE_MOBILE":
            return RankingData_ConnectivityType.CONNECTIVITY_TYPE_MOBILE;
        case 3:
        case "CONNECTIVITY_TYPE_UNREACHABLE":
            return RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNREACHABLE;
        case 4:
        case "CONNECTIVITY_TYPE_BLUETOOTH":
            return RankingData_ConnectivityType.CONNECTIVITY_TYPE_BLUETOOTH;
        case -1:
        case "UNRECOGNIZED":
        default:
            return RankingData_ConnectivityType.UNRECOGNIZED;
    }
}
export function rankingData_ConnectivityTypeToJSON(object) {
    switch (object) {
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNSET:
            return "CONNECTIVITY_TYPE_UNSET";
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_WIFI:
            return "CONNECTIVITY_TYPE_WIFI";
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_MOBILE:
            return "CONNECTIVITY_TYPE_MOBILE";
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNREACHABLE:
            return "CONNECTIVITY_TYPE_UNREACHABLE";
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_BLUETOOTH:
            return "CONNECTIVITY_TYPE_BLUETOOTH";
        default:
            return "UNKNOWN";
    }
}
export function rankingData_ConnectivityTypeToNumber(object) {
    switch (object) {
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNSET:
            return 0;
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_WIFI:
            return 1;
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_MOBILE:
            return 2;
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNREACHABLE:
            return 3;
        case RankingData_ConnectivityType.CONNECTIVITY_TYPE_BLUETOOTH:
            return 4;
        default:
            return 0;
    }
}
function createBaseRankingData() {
    return {
        sessionId: "",
        locale: "",
        osType: RankingData_OSType.OS_TYPE_UNSET,
        connectivityType: RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNSET,
    };
}
export const RankingData = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRankingData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sessionId = reader.string();
                    break;
                case 2:
                    message.locale = reader.string();
                    break;
                case 3:
                    message.osType = rankingData_OSTypeFromJSON(reader.int32());
                    break;
                case 4:
                    message.connectivityType = rankingData_ConnectivityTypeFromJSON(reader.int32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sessionId: isSet(object.sessionId) ? String(object.sessionId) : "",
            locale: isSet(object.locale) ? String(object.locale) : "",
            osType: isSet(object.osType) ? rankingData_OSTypeFromJSON(object.osType) : RankingData_OSType.OS_TYPE_UNSET,
            connectivityType: isSet(object.connectivityType)
                ? rankingData_ConnectivityTypeFromJSON(object.connectivityType)
                : RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNSET,
        };
    },
    toJSON(message) {
        const obj = {};
        message.sessionId !== undefined && (obj.sessionId = message.sessionId);
        message.locale !== undefined && (obj.locale = message.locale);
        message.osType !== undefined && (obj.osType = rankingData_OSTypeToJSON(message.osType));
        message.connectivityType !== undefined &&
            (obj.connectivityType = rankingData_ConnectivityTypeToJSON(message.connectivityType));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseRankingData();
        message.sessionId = (_a = object.sessionId) !== null && _a !== void 0 ? _a : "";
        message.locale = (_b = object.locale) !== null && _b !== void 0 ? _b : "";
        message.osType = (_c = object.osType) !== null && _c !== void 0 ? _c : RankingData_OSType.OS_TYPE_UNSET;
        message.connectivityType = (_d = object.connectivityType) !== null && _d !== void 0 ? _d : RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNSET;
        return message;
    },
};
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=ranking.js.map