import Long from "long";
import _m0 from "protobufjs/minimal";
import { Lens } from "./lens";
export const protobufPackage = "com.snap.camerakit.v3";
export var ExportLensesByIdRequest_Context_Extension_Name;
(function (ExportLensesByIdRequest_Context_Extension_Name) {
    ExportLensesByIdRequest_Context_Extension_Name["UNSET"] = "UNSET";
    ExportLensesByIdRequest_Context_Extension_Name["SHOP_KIT"] = "SHOP_KIT";
    ExportLensesByIdRequest_Context_Extension_Name["LENS_WEB_BUILDER"] = "LENS_WEB_BUILDER";
    ExportLensesByIdRequest_Context_Extension_Name["UNRECOGNIZED"] = "UNRECOGNIZED";
})(ExportLensesByIdRequest_Context_Extension_Name || (ExportLensesByIdRequest_Context_Extension_Name = {}));
export function exportLensesByIdRequest_Context_Extension_NameFromJSON(object) {
    switch (object) {
        case 0:
        case "UNSET":
            return ExportLensesByIdRequest_Context_Extension_Name.UNSET;
        case 1:
        case "SHOP_KIT":
            return ExportLensesByIdRequest_Context_Extension_Name.SHOP_KIT;
        case 2:
        case "LENS_WEB_BUILDER":
            return ExportLensesByIdRequest_Context_Extension_Name.LENS_WEB_BUILDER;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ExportLensesByIdRequest_Context_Extension_Name.UNRECOGNIZED;
    }
}
export function exportLensesByIdRequest_Context_Extension_NameToNumber(object) {
    switch (object) {
        case ExportLensesByIdRequest_Context_Extension_Name.UNSET:
            return 0;
        case ExportLensesByIdRequest_Context_Extension_Name.SHOP_KIT:
            return 1;
        case ExportLensesByIdRequest_Context_Extension_Name.LENS_WEB_BUILDER:
            return 2;
        default:
            return 0;
    }
}
export var ExportLensesByIdResponse_ExcludedLens_Code;
(function (ExportLensesByIdResponse_ExcludedLens_Code) {
    ExportLensesByIdResponse_ExcludedLens_Code["UNSET"] = "UNSET";
    ExportLensesByIdResponse_ExcludedLens_Code["UNKNOWN"] = "UNKNOWN";
    ExportLensesByIdResponse_ExcludedLens_Code["NOT_FOUND"] = "NOT_FOUND";
    ExportLensesByIdResponse_ExcludedLens_Code["INCOMPATIBLE_LENS_CORE_VERSION"] = "INCOMPATIBLE_LENS_CORE_VERSION";
    ExportLensesByIdResponse_ExcludedLens_Code["ARCHIVED_OR_INVISIBLE"] = "ARCHIVED_OR_INVISIBLE";
    ExportLensesByIdResponse_ExcludedLens_Code["CONTAINS_MUSIC"] = "CONTAINS_MUSIC";
    ExportLensesByIdResponse_ExcludedLens_Code["UNRECOGNIZED"] = "UNRECOGNIZED";
})(ExportLensesByIdResponse_ExcludedLens_Code || (ExportLensesByIdResponse_ExcludedLens_Code = {}));
export function exportLensesByIdResponse_ExcludedLens_CodeFromJSON(object) {
    switch (object) {
        case 0:
        case "UNSET":
            return ExportLensesByIdResponse_ExcludedLens_Code.UNSET;
        case 1:
        case "UNKNOWN":
            return ExportLensesByIdResponse_ExcludedLens_Code.UNKNOWN;
        case 2:
        case "NOT_FOUND":
            return ExportLensesByIdResponse_ExcludedLens_Code.NOT_FOUND;
        case 3:
        case "INCOMPATIBLE_LENS_CORE_VERSION":
            return ExportLensesByIdResponse_ExcludedLens_Code.INCOMPATIBLE_LENS_CORE_VERSION;
        case 4:
        case "ARCHIVED_OR_INVISIBLE":
            return ExportLensesByIdResponse_ExcludedLens_Code.ARCHIVED_OR_INVISIBLE;
        case 5:
        case "CONTAINS_MUSIC":
            return ExportLensesByIdResponse_ExcludedLens_Code.CONTAINS_MUSIC;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ExportLensesByIdResponse_ExcludedLens_Code.UNRECOGNIZED;
    }
}
export function exportLensesByIdResponse_ExcludedLens_CodeToNumber(object) {
    switch (object) {
        case ExportLensesByIdResponse_ExcludedLens_Code.UNSET:
            return 0;
        case ExportLensesByIdResponse_ExcludedLens_Code.UNKNOWN:
            return 1;
        case ExportLensesByIdResponse_ExcludedLens_Code.NOT_FOUND:
            return 2;
        case ExportLensesByIdResponse_ExcludedLens_Code.INCOMPATIBLE_LENS_CORE_VERSION:
            return 3;
        case ExportLensesByIdResponse_ExcludedLens_Code.ARCHIVED_OR_INVISIBLE:
            return 4;
        case ExportLensesByIdResponse_ExcludedLens_Code.CONTAINS_MUSIC:
            return 5;
        default:
            return 0;
    }
}
function createBaseExportLensesByIdRequest() {
    return { unlockableIds: [], context: undefined };
}
export const ExportLensesByIdRequest = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.unlockableIds.push(longToNumber(reader.int64()));
                        }
                    }
                    else {
                        message.unlockableIds.push(longToNumber(reader.int64()));
                    }
                    break;
                case 2:
                    message.context = ExportLensesByIdRequest_Context.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseExportLensesByIdRequest();
        message.unlockableIds = ((_a = object.unlockableIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.context =
            object.context !== undefined && object.context !== null
                ? ExportLensesByIdRequest_Context.fromPartial(object.context)
                : undefined;
        return message;
    },
};
function createBaseExportLensesByIdRequest_Context() {
    return {
        userAgent: "",
        locale: "",
        extention: undefined,
        extension: undefined,
        extensionRequestContext: new Uint8Array(),
    };
}
export const ExportLensesByIdRequest_Context = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdRequest_Context();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userAgent = reader.string();
                    break;
                case 2:
                    message.locale = reader.string();
                    break;
                case 3:
                    message.extention = ExportLensesByIdRequest_Context_Extension.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.extension = ExportLensesByIdRequest_Context_Extension.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.extensionRequestContext = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseExportLensesByIdRequest_Context();
        message.userAgent = (_a = object.userAgent) !== null && _a !== void 0 ? _a : "";
        message.locale = (_b = object.locale) !== null && _b !== void 0 ? _b : "";
        message.extention =
            object.extention !== undefined && object.extention !== null
                ? ExportLensesByIdRequest_Context_Extension.fromPartial(object.extention)
                : undefined;
        message.extension =
            object.extension !== undefined && object.extension !== null
                ? ExportLensesByIdRequest_Context_Extension.fromPartial(object.extension)
                : undefined;
        message.extensionRequestContext = (_c = object.extensionRequestContext) !== null && _c !== void 0 ? _c : new Uint8Array();
        return message;
    },
};
function createBaseExportLensesByIdRequest_Context_Extension() {
    return { name: ExportLensesByIdRequest_Context_Extension_Name.UNSET, version: "" };
}
export const ExportLensesByIdRequest_Context_Extension = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdRequest_Context_Extension();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = exportLensesByIdRequest_Context_Extension_NameFromJSON(reader.int32());
                    break;
                case 2:
                    message.version = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExportLensesByIdRequest_Context_Extension();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : ExportLensesByIdRequest_Context_Extension_Name.UNSET;
        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseExportLensesByIdResponse() {
    return { lenses: {}, excludedLenses: [] };
}
export const ExportLensesByIdResponse = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = ExportLensesByIdResponse_LensesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.lenses[entry1.key] = entry1.value;
                    }
                    break;
                case 2:
                    message.excludedLenses.push(ExportLensesByIdResponse_ExcludedLens.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExportLensesByIdResponse();
        message.lenses = Object.entries((_a = object.lenses) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[Number(key)] = value;
            }
            return acc;
        }, {});
        message.excludedLenses =
            ((_b = object.excludedLenses) === null || _b === void 0 ? void 0 : _b.map((e) => ExportLensesByIdResponse_ExcludedLens.fromPartial(e))) || [];
        return message;
    },
};
function createBaseExportLensesByIdResponse_LensesEntry() {
    return { key: 0, value: new Uint8Array() };
}
export const ExportLensesByIdResponse_LensesEntry = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdResponse_LensesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = longToNumber(reader.int64());
                    break;
                case 2:
                    message.value = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExportLensesByIdResponse_LensesEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : 0;
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
function createBaseExportLensesByIdResponse_ExcludedLens() {
    return { lensId: 0, code: ExportLensesByIdResponse_ExcludedLens_Code.UNSET, reason: "" };
}
export const ExportLensesByIdResponse_ExcludedLens = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExportLensesByIdResponse_ExcludedLens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lensId = longToNumber(reader.int64());
                    break;
                case 2:
                    message.code = exportLensesByIdResponse_ExcludedLens_CodeFromJSON(reader.int32());
                    break;
                case 3:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseExportLensesByIdResponse_ExcludedLens();
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : 0;
        message.code = (_b = object.code) !== null && _b !== void 0 ? _b : ExportLensesByIdResponse_ExcludedLens_Code.UNSET;
        message.reason = (_c = object.reason) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseExtensionRequestContext() {
    return { userAgent: "", locale: "" };
}
export const ExtensionRequestContext = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.userAgent !== "") {
            writer.uint32(10).string(message.userAgent);
        }
        if (message.locale !== "") {
            writer.uint32(18).string(message.locale);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExtensionRequestContext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userAgent = reader.string();
                    break;
                case 2:
                    message.locale = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExtensionRequestContext();
        message.userAgent = (_a = object.userAgent) !== null && _a !== void 0 ? _a : "";
        message.locale = (_b = object.locale) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseEnvelope() {
    return { lenses: [] };
}
export const Envelope = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEnvelope();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lenses.push(Lens.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEnvelope();
        message.lenses = ((_a = object.lenses) === null || _a === void 0 ? void 0 : _a.map((e) => Lens.fromPartial(e))) || [];
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
//# sourceMappingURL=export.js.map