import Long from "long";
import _m0 from "protobufjs/minimal";
import { Timestamp } from "../../google/protobuf/timestamp";
export const protobufPackage = "com.snap.camerakit.v3";
export var LegalDocument_Type;
(function (LegalDocument_Type) {
    LegalDocument_Type["UNSET"] = "UNSET";
    LegalDocument_Type["TERMS_OF_SERVICE"] = "TERMS_OF_SERVICE";
    LegalDocument_Type["PRIVACY_POLICY"] = "PRIVACY_POLICY";
    LegalDocument_Type["LEARN_MORE"] = "LEARN_MORE";
    LegalDocument_Type["UNRECOGNIZED"] = "UNRECOGNIZED";
})(LegalDocument_Type || (LegalDocument_Type = {}));
export function legalDocument_TypeFromJSON(object) {
    switch (object) {
        case 0:
        case "UNSET":
            return LegalDocument_Type.UNSET;
        case 1:
        case "TERMS_OF_SERVICE":
            return LegalDocument_Type.TERMS_OF_SERVICE;
        case 2:
        case "PRIVACY_POLICY":
            return LegalDocument_Type.PRIVACY_POLICY;
        case 3:
        case "LEARN_MORE":
            return LegalDocument_Type.LEARN_MORE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LegalDocument_Type.UNRECOGNIZED;
    }
}
export function legalDocument_TypeToJSON(object) {
    switch (object) {
        case LegalDocument_Type.UNSET:
            return "UNSET";
        case LegalDocument_Type.TERMS_OF_SERVICE:
            return "TERMS_OF_SERVICE";
        case LegalDocument_Type.PRIVACY_POLICY:
            return "PRIVACY_POLICY";
        case LegalDocument_Type.LEARN_MORE:
            return "LEARN_MORE";
        default:
            return "UNKNOWN";
    }
}
export function legalDocument_TypeToNumber(object) {
    switch (object) {
        case LegalDocument_Type.UNSET:
            return 0;
        case LegalDocument_Type.TERMS_OF_SERVICE:
            return 1;
        case LegalDocument_Type.PRIVACY_POLICY:
            return 2;
        case LegalDocument_Type.LEARN_MORE:
            return 3;
        default:
            return 0;
    }
}
function createBaseLegalPrompt() {
    return { documents: [], disabled: false };
}
export const LegalPrompt = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.documents) {
            LegalDocument.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.disabled === true) {
            writer.uint32(16).bool(message.disabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLegalPrompt();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.documents.push(LegalDocument.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.disabled = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            documents: Array.isArray(object === null || object === void 0 ? void 0 : object.documents) ? object.documents.map((e) => LegalDocument.fromJSON(e)) : [],
            disabled: isSet(object.disabled) ? Boolean(object.disabled) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.documents) {
            obj.documents = message.documents.map((e) => (e ? LegalDocument.toJSON(e) : undefined));
        }
        else {
            obj.documents = [];
        }
        message.disabled !== undefined && (obj.disabled = message.disabled);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseLegalPrompt();
        message.documents = ((_a = object.documents) === null || _a === void 0 ? void 0 : _a.map((e) => LegalDocument.fromPartial(e))) || [];
        message.disabled = (_b = object.disabled) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function createBaseLegalDocument() {
    return { type: LegalDocument_Type.UNSET, webUrl: "", version: "", timestamp: undefined };
}
export const LegalDocument = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.type !== LegalDocument_Type.UNSET) {
            writer.uint32(8).int32(legalDocument_TypeToNumber(message.type));
        }
        if (message.webUrl !== "") {
            writer.uint32(18).string(message.webUrl);
        }
        if (message.version !== "") {
            writer.uint32(26).string(message.version);
        }
        if (message.timestamp !== undefined) {
            Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLegalDocument();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.type = legalDocument_TypeFromJSON(reader.int32());
                    break;
                case 2:
                    message.webUrl = reader.string();
                    break;
                case 3:
                    message.version = reader.string();
                    break;
                case 4:
                    message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: isSet(object.type) ? legalDocument_TypeFromJSON(object.type) : LegalDocument_Type.UNSET,
            webUrl: isSet(object.webUrl) ? String(object.webUrl) : "",
            version: isSet(object.version) ? String(object.version) : "",
            timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.type !== undefined && (obj.type = legalDocument_TypeToJSON(message.type));
        message.webUrl !== undefined && (obj.webUrl = message.webUrl);
        message.version !== undefined && (obj.version = message.version);
        message.timestamp !== undefined && (obj.timestamp = message.timestamp.toISOString());
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseLegalDocument();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : LegalDocument_Type.UNSET;
        message.webUrl = (_b = object.webUrl) !== null && _b !== void 0 ? _b : "";
        message.version = (_c = object.version) !== null && _c !== void 0 ? _c : "";
        message.timestamp = (_d = object.timestamp) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=legal_prompt.js.map