import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "com.snap.camerakit.v3";
export declare enum CameraKitFlavor {
    CAMERA_KIT_FLAVOR_UNSET = "CAMERA_KIT_FLAVOR_UNSET",
    CAMERA_KIT_FLAVOR_DEBUG = "CAMERA_KIT_FLAVOR_DEBUG",
    CAMERA_KIT_FLAVOR_RELEASE = "CAMERA_KIT_FLAVOR_RELEASE",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function cameraKitFlavorFromJSON(object: any): CameraKitFlavor;
export declare function cameraKitFlavorToJSON(object: CameraKitFlavor): string;
export declare function cameraKitFlavorToNumber(object: CameraKitFlavor): number;
export declare enum CameraKitConnectivityType {
    CAMERA_KIT_CONNECTIVITY_TYPE_UNSET = "CAMERA_KIT_CONNECTIVITY_TYPE_UNSET",
    CAMERA_KIT_CONNECTIVITY_TYPE_WIFI = "CAMERA_KIT_CONNECTIVITY_TYPE_WIFI",
    CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE = "CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE",
    CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE = "CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE",
    CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH = "CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function cameraKitConnectivityTypeFromJSON(object: any): CameraKitConnectivityType;
export declare function cameraKitConnectivityTypeToJSON(object: CameraKitConnectivityType): string;
export declare function cameraKitConnectivityTypeToNumber(object: CameraKitConnectivityType): number;
export declare enum CameraKitEnvironment {
    CAMERA_KIT_ENVIRONMENT_UNSET = "CAMERA_KIT_ENVIRONMENT_UNSET",
    CAMERA_KIT_ENVIRONMENT_STAGING = "CAMERA_KIT_ENVIRONMENT_STAGING",
    CAMERA_KIT_ENVIRONMENT_PRODUCTION = "CAMERA_KIT_ENVIRONMENT_PRODUCTION",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function cameraKitEnvironmentFromJSON(object: any): CameraKitEnvironment;
export declare function cameraKitEnvironmentToJSON(object: CameraKitEnvironment): string;
export declare function cameraKitEnvironmentToNumber(object: CameraKitEnvironment): number;
export interface ExtensionEventBase {
    extensionName: string;
    extensionVersion: string;
    deviceCluster: number;
    cameraKitVersion: string;
    lensCoreVersion: string;
    deviceModel: string;
    cameraKitFlavor: CameraKitFlavor;
    appId: string;
    deviceConnectivity: CameraKitConnectivityType;
    sessionId: string;
    cameraKitEnvironment: CameraKitEnvironment;
}
export declare const ExtensionEventBase: {
    decode(input: _m0.Reader | Uint8Array, length?: number): ExtensionEventBase;
    fromJSON(object: any): ExtensionEventBase;
    toJSON(message: ExtensionEventBase): unknown;
    fromPartial<I extends {
        extensionName?: string | undefined;
        extensionVersion?: string | undefined;
        deviceCluster?: number | undefined;
        cameraKitVersion?: string | undefined;
        lensCoreVersion?: string | undefined;
        deviceModel?: string | undefined;
        cameraKitFlavor?: CameraKitFlavor | undefined;
        appId?: string | undefined;
        deviceConnectivity?: CameraKitConnectivityType | undefined;
        sessionId?: string | undefined;
        cameraKitEnvironment?: CameraKitEnvironment | undefined;
    } & {
        extensionName?: string | undefined;
        extensionVersion?: string | undefined;
        deviceCluster?: number | undefined;
        cameraKitVersion?: string | undefined;
        lensCoreVersion?: string | undefined;
        deviceModel?: string | undefined;
        cameraKitFlavor?: CameraKitFlavor | undefined;
        appId?: string | undefined;
        deviceConnectivity?: CameraKitConnectivityType | undefined;
        sessionId?: string | undefined;
        cameraKitEnvironment?: CameraKitEnvironment | undefined;
    } & Record<Exclude<keyof I, keyof ExtensionEventBase>, never>>(object: I): ExtensionEventBase;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
