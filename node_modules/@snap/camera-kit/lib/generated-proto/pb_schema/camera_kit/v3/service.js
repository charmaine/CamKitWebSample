import Long from "long";
import _m0 from "protobufjs/minimal";
import { RankingData } from "./ranking";
import { Lens } from "./lens";
import { LegalPrompt } from "./legal_prompt";
import { OperationalMetricsBundle } from "./operational_metrics";
import { Any } from "../../google/protobuf/any";
import { ExtensionEventBase } from "./business_events";
export const protobufPackage = "com.snap.camerakit.v3";
function createBaseGetGroupRequest() {
    return { id: "", rankingData: undefined };
}
export const GetGroupRequest = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGroupRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.rankingData = RankingData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            rankingData: isSet(object.rankingData) ? RankingData.fromJSON(object.rankingData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.rankingData !== undefined &&
            (obj.rankingData = message.rankingData ? RankingData.toJSON(message.rankingData) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetGroupRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.rankingData =
            object.rankingData !== undefined && object.rankingData !== null
                ? RankingData.fromPartial(object.rankingData)
                : undefined;
        return message;
    },
};
function createBaseGetGroupResponse() {
    return { id: "", lenses: [] };
}
export const GetGroupResponse = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGroupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.lenses.push(Lens.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            lenses: Array.isArray(object === null || object === void 0 ? void 0 : object.lenses) ? object.lenses.map((e) => Lens.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        if (message.lenses) {
            obj.lenses = message.lenses.map((e) => (e ? Lens.toJSON(e) : undefined));
        }
        else {
            obj.lenses = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetGroupResponse();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.lenses = ((_b = object.lenses) === null || _b === void 0 ? void 0 : _b.map((e) => Lens.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetGroupLensRequest() {
    return { lensId: "", groupId: "" };
}
export const GetGroupLensRequest = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGroupLensRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lensId = reader.string();
                    break;
                case 2:
                    message.groupId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            lensId: isSet(object.lensId) ? String(object.lensId) : "",
            groupId: isSet(object.groupId) ? String(object.groupId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.lensId !== undefined && (obj.lensId = message.lensId);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetGroupLensRequest();
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        message.groupId = (_b = object.groupId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetGroupLensResponse() {
    return { lens: undefined, groupId: "" };
}
export const GetGroupLensResponse = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetGroupLensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lens = Lens.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.groupId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            lens: isSet(object.lens) ? Lens.fromJSON(object.lens) : undefined,
            groupId: isSet(object.groupId) ? String(object.groupId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.lens !== undefined && (obj.lens = message.lens ? Lens.toJSON(message.lens) : undefined);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetGroupLensResponse();
        message.lens = object.lens !== undefined && object.lens !== null ? Lens.fromPartial(object.lens) : undefined;
        message.groupId = (_a = object.groupId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseBatchGetGroupLensRequest() {
    return { getRequests: [] };
}
export const BatchGetGroupLensRequest = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBatchGetGroupLensRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.getRequests.push(GetGroupLensRequest.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            getRequests: Array.isArray(object === null || object === void 0 ? void 0 : object.getRequests)
                ? object.getRequests.map((e) => GetGroupLensRequest.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.getRequests) {
            obj.getRequests = message.getRequests.map((e) => (e ? GetGroupLensRequest.toJSON(e) : undefined));
        }
        else {
            obj.getRequests = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBatchGetGroupLensRequest();
        message.getRequests = ((_a = object.getRequests) === null || _a === void 0 ? void 0 : _a.map((e) => GetGroupLensRequest.fromPartial(e))) || [];
        return message;
    },
};
function createBaseBatchGetGroupLensResponse() {
    return { getResponses: [] };
}
export const BatchGetGroupLensResponse = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBatchGetGroupLensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.getResponses.push(GetGroupLensResponse.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            getResponses: Array.isArray(object === null || object === void 0 ? void 0 : object.getResponses)
                ? object.getResponses.map((e) => GetGroupLensResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.getResponses) {
            obj.getResponses = message.getResponses.map((e) => (e ? GetGroupLensResponse.toJSON(e) : undefined));
        }
        else {
            obj.getResponses = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseBatchGetGroupLensResponse();
        message.getResponses = ((_a = object.getResponses) === null || _a === void 0 ? void 0 : _a.map((e) => GetGroupLensResponse.fromPartial(e))) || [];
        return message;
    },
};
function createBaseGetPlaceholderConfigRequest() {
    return {};
}
export const GetPlaceholderConfigRequest = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPlaceholderConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseGetPlaceholderConfigRequest();
        return message;
    },
};
function createBaseGetPlaceholderConfigResponse() {
    return { configs: {} };
}
export const GetPlaceholderConfigResponse = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPlaceholderConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = GetPlaceholderConfigResponse_ConfigsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.configs[entry1.key] = entry1.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            configs: isObject(object.configs)
                ? Object.entries(object.configs).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        obj.configs = {};
        if (message.configs) {
            Object.entries(message.configs).forEach(([k, v]) => {
                obj.configs[k] = v;
            });
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetPlaceholderConfigResponse();
        message.configs = Object.entries((_a = object.configs) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseGetPlaceholderConfigResponse_ConfigsEntry() {
    return { key: "", value: "" };
}
export const GetPlaceholderConfigResponse_ConfigsEntry = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetPlaceholderConfigResponse_ConfigsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetPlaceholderConfigResponse_ConfigsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetInitializationConfigRequest() {
    return {};
}
export const GetInitializationConfigRequest = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInitializationConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseGetInitializationConfigRequest();
        return message;
    },
};
function createBaseGetInitializationConfigResponse() {
    return {
        appVendorUuidOptIn: false,
        watermarkEnabled: false,
        childrenProtectionActRestricted: false,
        legalPrompt: undefined,
    };
}
export const GetInitializationConfigResponse = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetInitializationConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.appVendorUuidOptIn = reader.bool();
                    break;
                case 2:
                    message.watermarkEnabled = reader.bool();
                    break;
                case 3:
                    message.childrenProtectionActRestricted = reader.bool();
                    break;
                case 4:
                    message.legalPrompt = LegalPrompt.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            appVendorUuidOptIn: isSet(object.appVendorUuidOptIn) ? Boolean(object.appVendorUuidOptIn) : false,
            watermarkEnabled: isSet(object.watermarkEnabled) ? Boolean(object.watermarkEnabled) : false,
            childrenProtectionActRestricted: isSet(object.childrenProtectionActRestricted)
                ? Boolean(object.childrenProtectionActRestricted)
                : false,
            legalPrompt: isSet(object.legalPrompt) ? LegalPrompt.fromJSON(object.legalPrompt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.appVendorUuidOptIn !== undefined && (obj.appVendorUuidOptIn = message.appVendorUuidOptIn);
        message.watermarkEnabled !== undefined && (obj.watermarkEnabled = message.watermarkEnabled);
        message.childrenProtectionActRestricted !== undefined &&
            (obj.childrenProtectionActRestricted = message.childrenProtectionActRestricted);
        message.legalPrompt !== undefined &&
            (obj.legalPrompt = message.legalPrompt ? LegalPrompt.toJSON(message.legalPrompt) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseGetInitializationConfigResponse();
        message.appVendorUuidOptIn = (_a = object.appVendorUuidOptIn) !== null && _a !== void 0 ? _a : false;
        message.watermarkEnabled = (_b = object.watermarkEnabled) !== null && _b !== void 0 ? _b : false;
        message.childrenProtectionActRestricted = (_c = object.childrenProtectionActRestricted) !== null && _c !== void 0 ? _c : false;
        message.legalPrompt =
            object.legalPrompt !== undefined && object.legalPrompt !== null
                ? LegalPrompt.fromPartial(object.legalPrompt)
                : undefined;
        return message;
    },
};
function createBaseSetOperationalMetricsRequest() {
    return { metrics: undefined };
}
export const SetOperationalMetricsRequest = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetOperationalMetricsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.metrics = OperationalMetricsBundle.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            metrics: isSet(object.metrics) ? OperationalMetricsBundle.fromJSON(object.metrics) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.metrics !== undefined &&
            (obj.metrics = message.metrics ? OperationalMetricsBundle.toJSON(message.metrics) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSetOperationalMetricsRequest();
        message.metrics =
            object.metrics !== undefined && object.metrics !== null
                ? OperationalMetricsBundle.fromPartial(object.metrics)
                : undefined;
        return message;
    },
};
function createBaseSetOperationalMetricsResponse() {
    return {};
}
export const SetOperationalMetricsResponse = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetOperationalMetricsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseSetOperationalMetricsResponse();
        return message;
    },
};
function createBaseSetBusinessEventsRequest() {
    return { batchEvents: undefined };
}
export const SetBusinessEventsRequest = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetBusinessEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.batchEvents = Any.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            batchEvents: isSet(object.batchEvents) ? Any.fromJSON(object.batchEvents) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.batchEvents !== undefined &&
            (obj.batchEvents = message.batchEvents ? Any.toJSON(message.batchEvents) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseSetBusinessEventsRequest();
        message.batchEvents =
            object.batchEvents !== undefined && object.batchEvents !== null ? Any.fromPartial(object.batchEvents) : undefined;
        return message;
    },
};
function createBaseSetBusinessEventsResponse() {
    return {};
}
export const SetBusinessEventsResponse = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetBusinessEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseSetBusinessEventsResponse();
        return message;
    },
};
function createBaseSetExtensionBusinessEventsRequest() {
    return { events: [], extensionEventBase: undefined };
}
export const SetExtensionBusinessEventsRequest = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetExtensionBusinessEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.events.push(Any.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.extensionEventBase = ExtensionEventBase.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            events: Array.isArray(object === null || object === void 0 ? void 0 : object.events) ? object.events.map((e) => Any.fromJSON(e)) : [],
            extensionEventBase: isSet(object.extensionEventBase)
                ? ExtensionEventBase.fromJSON(object.extensionEventBase)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.events) {
            obj.events = message.events.map((e) => (e ? Any.toJSON(e) : undefined));
        }
        else {
            obj.events = [];
        }
        message.extensionEventBase !== undefined &&
            (obj.extensionEventBase = message.extensionEventBase
                ? ExtensionEventBase.toJSON(message.extensionEventBase)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseSetExtensionBusinessEventsRequest();
        message.events = ((_a = object.events) === null || _a === void 0 ? void 0 : _a.map((e) => Any.fromPartial(e))) || [];
        message.extensionEventBase =
            object.extensionEventBase !== undefined && object.extensionEventBase !== null
                ? ExtensionEventBase.fromPartial(object.extensionEventBase)
                : undefined;
        return message;
    },
};
function createBaseSetExtensionBusinessEventsResponse() {
    return {};
}
export const SetExtensionBusinessEventsResponse = {
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetExtensionBusinessEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseSetExtensionBusinessEventsResponse();
        return message;
    },
};
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=service.js.map