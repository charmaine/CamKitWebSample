import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "com.snap.camerakit.v3.features";
/**
 * Ranking feature metadata.
 * https://docs.google.com/document/d/1vKDLVpnblnUZHhNbFGGzUf64nmdkO6NGyarq8q9nPE8/edit#heading=h.2yfm0j3kldwv
 */
export interface RankingInfo {
    /** Ranking request id can be reported by clients along with lens usage to build ranking models. */
    rankingRequestId: string;
}
export declare const RankingInfo: {
    encode(message: RankingInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RankingInfo;
    fromPartial<I extends {
        rankingRequestId?: string | undefined;
    } & {
        rankingRequestId?: string | undefined;
    } & Record<Exclude<keyof I, "rankingRequestId">, never>>(object: I): RankingInfo;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
