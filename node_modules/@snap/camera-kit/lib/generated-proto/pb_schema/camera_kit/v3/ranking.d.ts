import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "com.snap.camerakit.v3";
export interface RankingData {
    sessionId: string;
    locale: string;
    osType: RankingData_OSType;
    connectivityType: RankingData_ConnectivityType;
}
export declare enum RankingData_OSType {
    OS_TYPE_UNSET = "OS_TYPE_UNSET",
    OS_TYPE_ANDROID = "OS_TYPE_ANDROID",
    OS_TYPE_IOS = "OS_TYPE_IOS",
    OS_TYPE_IPAD_OS = "OS_TYPE_IPAD_OS",
    OS_TYPE_MAC_OS = "OS_TYPE_MAC_OS",
    OS_TYPE_WINDOWS = "OS_TYPE_WINDOWS",
    OS_TYPE_LINUX = "OS_TYPE_LINUX",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function rankingData_OSTypeFromJSON(object: any): RankingData_OSType;
export declare function rankingData_OSTypeToJSON(object: RankingData_OSType): string;
export declare function rankingData_OSTypeToNumber(object: RankingData_OSType): number;
export declare enum RankingData_ConnectivityType {
    CONNECTIVITY_TYPE_UNSET = "CONNECTIVITY_TYPE_UNSET",
    CONNECTIVITY_TYPE_WIFI = "CONNECTIVITY_TYPE_WIFI",
    CONNECTIVITY_TYPE_MOBILE = "CONNECTIVITY_TYPE_MOBILE",
    CONNECTIVITY_TYPE_UNREACHABLE = "CONNECTIVITY_TYPE_UNREACHABLE",
    CONNECTIVITY_TYPE_BLUETOOTH = "CONNECTIVITY_TYPE_BLUETOOTH",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function rankingData_ConnectivityTypeFromJSON(object: any): RankingData_ConnectivityType;
export declare function rankingData_ConnectivityTypeToJSON(object: RankingData_ConnectivityType): string;
export declare function rankingData_ConnectivityTypeToNumber(object: RankingData_ConnectivityType): number;
export declare const RankingData: {
    decode(input: _m0.Reader | Uint8Array, length?: number): RankingData;
    fromJSON(object: any): RankingData;
    toJSON(message: RankingData): unknown;
    fromPartial<I extends {
        sessionId?: string | undefined;
        locale?: string | undefined;
        osType?: RankingData_OSType | undefined;
        connectivityType?: RankingData_ConnectivityType | undefined;
    } & {
        sessionId?: string | undefined;
        locale?: string | undefined;
        osType?: RankingData_OSType | undefined;
        connectivityType?: RankingData_ConnectivityType | undefined;
    } & Record<Exclude<keyof I, keyof RankingData>, never>>(object: I): RankingData;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
