{"version":3,"file":"errorLoggingDecorator.js","sourceRoot":"","sources":["../../src/logger/errorLoggingDecorator.ts"],"names":[],"mappings":"AAEA;;;;;;GAMG;AACH,MAAM,UAAU,qBAAqB,CAAC,MAAc;IAChD,MAAM,WAAW,GAAG,CAAC,KAAc,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC5D,OAAO,UAAU,OAAY,EAAE,YAAoB,EAAE,UAA8B;QAC/E,MAAM,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;QACtD,MAAM,cAAc,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC;QAC9C,UAAU,CAAC,UAAU,CAAC,GAAG,UAAU,GAAG,IAAW;YAC7C,IAAI;gBACA,6DAA6D;gBAC7D,MAAM,MAAM,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAChD,IAAI,MAAM,YAAY,OAAO,EAAE;oBAC3B,yDAAyD;oBACzD,yEAAyE;oBACzE,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;iBAC7B;gBACD,OAAO,MAAM,CAAC;aACjB;YAAC,OAAO,KAAK,EAAE;gBACZ,WAAW,CAAC,KAAK,CAAC,CAAC;gBACnB,MAAM,KAAK,CAAC;aACf;QACL,CAAC,CAAC;QACF,OAAO,UAAU,CAAC;IACtB,CAAC,CAAC;AACN,CAAC","sourcesContent":["import { Logger } from \"./logger\";\n\n/**\n * Creates a class member decorator that logs errors thrown during the member invocation.\n * If the member returns a Promise, promise rejections are handled.\n * Any caught errors are re-thrown.\n * @param logger The logger to report errors to.\n * @return A decorator function.\n */\nexport function errorLoggingDecorator(logger: Logger) {\n    const handleError = (error: unknown) => logger.error(error);\n    return function (_target: any, _propertyKey: string, descriptor: PropertyDescriptor) {\n        const methodName = descriptor.value ? \"value\" : \"get\";\n        const originalMethod = descriptor[methodName];\n        descriptor[methodName] = function (...args: any[]) {\n            try {\n                // \"this\" refers to original scope this function is called in\n                const result = originalMethod.apply(this, args);\n                if (result instanceof Promise) {\n                    // in case of a promise we don't return our promise chain\n                    // that logs an error because we want callers to handle the error as well\n                    result.catch(handleError);\n                }\n                return result;\n            } catch (error) {\n                handleError(error);\n                throw error;\n            }\n        };\n        return descriptor;\n    };\n}\n"]}