{"version":3,"file":"registerLogEntriesSubscriber.js","sourceRoot":"","sources":["../../src/logger/registerLogEntriesSubscriber.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAc,MAAM,MAAM,CAAC;AAC1C,OAAO,EAAE,cAAc,EAAE,MAAM,wBAAwB,CAAC;AACxD,OAAO,EAA0B,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAC9E,OAAO,EAAE,UAAU,EAAE,MAAM,oCAAoC,CAAC;AAChE,OAAO,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AAC3D,OAAO,EAAE,iBAAiB,EAAE,MAAM,cAAc,CAAC;AACjD,OAAO,EAAY,WAAW,EAAE,MAAM,UAAU,CAAC;AAEjD;;;;;GAKG;AACH,MAAM,CAAC,MAAM,4BAA4B,GAAG,UAAU,CAClD,8BAA8B,EAC9B,CAAC,kBAAkB,EAAE,iBAAiB,CAAC,KAAK,CAAU,EACtD,CAAC,aAAqC,EAAE,UAAgC,EAAE,EAAE;IACxE,UAAU;SACL,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;SACxF,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE;QACpB,QAAQ,aAAa,CAAC,MAAM,EAAE;YAC1B,KAAK,SAAS;gBACV,+FAA+F;gBAC/F,iDAAiD;gBACjD,MAAM,QAAQ,GACV,eAAe,EAAE,CAAC,OAAO,CAAC,KAAK,KAAK,QAAQ;oBACxC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;wBAC9B,IAAI,CAAC,CAAC,OAAO,YAAY,KAAK,CAAC;4BAAE,OAAO,OAAO,CAAC;wBAChD,OAAO,CAAC,KAAK,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;wBACxC,OAAO,OAAO,CAAC;oBACnB,CAAC,CAAC;oBACJ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC;gBAE5B,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,cAAc,QAAQ,CAAC,MAAM,GAAG,EAAE,GAAG,QAAQ,CAAC,CAAC;gBACvE,MAAM;SACb;IACL,CAAC,CAAC,CAAC;AACX,CAAC,CACJ,CAAC","sourcesContent":["import { filter, Observable } from \"rxjs\";\nimport { stringifyError } from \"../common/errorHelpers\";\nimport { CameraKitConfiguration, configurationToken } from \"../configuration\";\nimport { Injectable } from \"../dependency-injection/Injectable\";\nimport { getPlatformInfo } from \"../platform/platformInfo\";\nimport { logEntriesFactory } from \"./logEntries\";\nimport { LogEntry, logLevelMap } from \"./logger\";\n\n/**\n * The factory subscribes to log entry events and, based on the configured log level,\n * forwards matching log entries to the logger specified in the CameraKit configuration object.\n *\n * @internal\n */\nexport const registerLogEntriesSubscriber = Injectable(\n    \"registerLogEntriesSubscriber\",\n    [configurationToken, logEntriesFactory.token] as const,\n    (configuration: CameraKitConfiguration, logEntries: Observable<LogEntry>) => {\n        logEntries\n            .pipe(filter((entry) => logLevelMap[entry.level] >= logLevelMap[configuration.logLevel]))\n            .subscribe((logEntry) => {\n                switch (configuration.logger) {\n                    case \"console\":\n                        // Chrome doesn't print the `cause` Error property, so we need to manually construct a complete\n                        // stack trace using our `stringifyError` helper.\n                        const messages =\n                            getPlatformInfo().browser.brand === \"Chrome\"\n                                ? logEntry.messages.map((message) => {\n                                      if (!(message instanceof Error)) return message;\n                                      message.stack = stringifyError(message);\n                                      return message;\n                                  })\n                                : logEntry.messages;\n\n                        console[logEntry.level](`[CameraKit.${logEntry.module}]`, ...messages);\n                        break;\n                }\n            });\n    }\n);\n"]}