// NOTE: All errors thrown in the CameraKit package have to be defined here.
// Error types are not infered from error factories for API doc purposes and consistency.
/**
 * Removes the top trace line from the stack.
 */
function cleanErrorStack(stack) {
    const [first, _, ...rest] = stack.split("\n");
    return [first, ...rest].join("\n");
}
/**
 * Creates error factory that ensures Error.prototype.name field value.
 *
 * NOTE: exported only for unit tests.
 *
 * @param name Error name.
 * @returns Error factory function.
 * @internal
 */
export function namedError(name) {
    return (message, cause) => {
        const error = new Error(message, { cause });
        error.name = name;
        error.stack = error.stack && cleanErrorStack(error.stack);
        // Safety: we set name above and therefore sure the type of error is correct
        return error;
    };
}
/** @internal */
export const legalError = namedError("LegalError");
/** @internal */
export const lensContentValidationError = namedError("LensContentValidationError");
/** @internal */
export const lensError = namedError("LensError");
/** @internal */
export const cameraKitSourceError = namedError("CameraKitSourceError");
/** @internal */
export const lensImagePickerError = namedError("LensImagePickerError");
/** @internal */
export const cacheKeyNotFoundError = namedError("CacheKeyNotFoundError");
/** @internal */
export const configurationError = namedError("ConfigurationError");
/** @internal */
export const webGLError = namedError("WebGLError");
/** @internal */
export const benchmarkError = namedError("BenchmarkError");
/** @internal */
export const platformNotSupportedError = namedError("PlatformNotSupportedError");
/** @internal */
export const lensExecutionError = namedError("LensExecutionError");
/** @internal */
export const lensAbortError = namedError("LensAbortError");
/** @internal */
export const persistentStoreError = namedError("PersistentStoreError");
/** @internal */
export const lensAssetError = namedError("LensAssetError");
/** @internal */
export const bootstrapError = namedError("BootstrapError");
//# sourceMappingURL=namedErrors.js.map