{"version":3,"file":"Lens.js","sourceRoot":"","sources":["../../src/lens/Lens.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAC9C,OAAO,EACH,qBAAqB,EACrB,QAAQ,EACR,QAAQ,EACR,WAAW,EACX,gBAAgB,EAChB,aAAa,EACb,YAAY,GACf,MAAM,sBAAsB,CAAC;AAwH9B,MAAM,UAAU,WAAW,CAAC,KAAc;IACtC,OAAO,aAAa,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AACxC,CAAC;AAED,MAAM,UAAU,MAAM,CAAC,KAAc;IACjC,OAAO,CACH,QAAQ,CAAC,KAAK,CAAC;QACf,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;QAClB,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC;QACpB,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACvD,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC;QAC1B,qBAAqB,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC;QACjD,QAAQ,CAAC,KAAK,CAAC,sBAAsB,CAAC;QACtC,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACxD,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QACpE,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC3D,UAAU,CAAC,KAAK,CAAC,eAAe,CAAC,CACpC,CAAC;AACN,CAAC;AAED,MAAM,UAAU,WAAW,CAAC,KAAc;IACtC,OAAO,CACH,QAAQ,CAAC,KAAK,CAAC;QACf,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;QAClB,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC;QACpB,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC;QAC1B,qBAAqB,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC;QACjD,CAAC,OAAO,KAAK,CAAC,OAAO,KAAK,WAAW,IAAI,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CACzE,CAAC;AACN,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,KAAc;IACpC,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AACvD,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,KAAc;IACxC,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;AAC1D,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,KAAc;IACrC,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AACnF,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,KAAc;IACxC,OAAO,CACH,QAAQ,CAAC,KAAK,CAAC;QACf,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC;QAC3B,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC;QACzB,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC;QAC1B,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC;QACvB,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CACnC,CAAC;AACN,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,KAAc;IAC7C,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;AACnH,CAAC;AAED,MAAM,UAAU,KAAK,CAAC,KAAc;IAChC,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACnF,CAAC;AAED,MAAM,UAAU,UAAU,CAAC,KAAc;IACrC,OAAO,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACvC,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,YAAY,CAAC,EACzB,EAAE,EACF,OAAO,EACP,IAAI,EACJ,OAAO,EACP,UAAU,EACV,sBAAsB,EACtB,WAAW,EACX,SAAS,EACT,eAAe,GACI;;IACnB,MAAM,CAAC,gBAAgB,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,CAAC,EAAE,iBAAiB,CAAC,CAAC;IAClE,MAAM,CAAC,gBAAgB,CAAC,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,0CAAE,QAAQ,CAAC,EAAE,oBAAoB,CAAC,CAAC;IAC3E,OAAO;QACH,EAAE;QACF,OAAO;QACP,IAAI;QACJ,OAAO,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW;QAC7B,OAAO,EAAE,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,EAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,SAAS;QAC9E,UAAU;QACV,sBAAsB;QACtB,WAAW;QACX,QAAQ,EAAE,SAAS;YACf,CAAC,CAAC,EAAE,QAAQ,EAAE,SAAS,CAAC,gBAAgB,EAAE,QAAQ,EAAE,SAAS,CAAC,gBAAgB,EAAE;YAChF,CAAC,CAAC,SAAS;QACf,eAAe;KAClB,CAAC;AACN,CAAC","sourcesContent":["import { assert } from \"../common/assertions\";\nimport {\n    predicateRecordValues,\n    isRecord,\n    isString,\n    isUndefined,\n    isEmptyOrSafeUrl,\n    isArrayOfType,\n    isTypedArray,\n} from \"../common/typeguards\";\nimport {\n    Content,\n    Lens_CameraFacing,\n    Lens as LensGeneratedProto,\n    LensCreator,\n} from \"../generated-proto/pb_schema/camera_kit/v3/lens\";\nimport { GetGroupResponse } from \"../generated-proto/pb_schema/camera_kit/v3/service\";\nimport { Any } from \"../generated-proto/pb_schema/google/protobuf/any\";\n\nexport interface LensProtoWithGroupId extends LensProto {\n    groupId: string;\n}\n\n/**\n * @internal\n */\nexport type ContentProto = Omit<Content, \"lnsUrl\" | \"iconUrl\">;\n\n/**\n * @internal\n */\nexport interface LensProto extends Omit<LensGeneratedProto, \"content\"> {\n    content: ContentProto | undefined;\n}\n\n/**\n * @category Lenses\n */\nexport interface Lens {\n    /**\n     * Non-empty identifier of a unique lens available to be applied in current session.\n     *\n     * NOTE: This value may contain unsafe characters\n     * and therefore may require additional processing depending on usages.\n     */\n    id: string;\n\n    /**\n     * The unique identifier for the group that this lens is a part of,\n     * correlating to a collection of lenses grouped for organizational or functional purposes.\n     */\n    groupId: string;\n\n    /**\n     * Human readable name of this lens.\n     *\n     * NOTE: This value may contain unsafe characters\n     * and therefore may require additional processing depending on usages.\n     */\n    name: string;\n\n    /**\n     * Icon resource URI that represents this lens if available.\n     */\n    iconUrl: string | undefined;\n\n    /**\n     * Vendor specific metadata associated with this lens, empty by default.\n     *\n     * NOTE: Metadata values may contain unsafe characters\n     * and therefore may require additional processing depending on usages.\n     */\n    vendorData: { [key: string]: string };\n\n    /**\n     * Specifies a [Lens_CameraFacing] that this lens is designed for.\n     */\n    cameraFacingPreference: Lens_CameraFacing;\n\n    /**\n     * Preview representing this lens, if available.\n     */\n    preview: Preview | undefined;\n\n    /**\n     * Information about the lens creator.\n     */\n    lensCreator: LensCreator | undefined;\n\n    /**\n     * A [snapcode](https://scan.snapchat.com/snapcodes) that represents the lens if available.\n     *\n     * The snapcode points to the lens in the Snapchat app, when used on mobile, or a dedicated web page.\n     */\n    snapcode: Snapcode | undefined;\n\n    /**\n     * Metadata pertaining to a specific set of lens features\n     */\n    featureMetadata: Any[];\n}\n\n/**\n * Lens preview.\n */\n// That corresponds to Preview interface in packages/web-sdk/src/generated-proto/pb_schema/camera_kit/v3/lens.ts\nexport interface Preview {\n    /**\n     * Link to a lens preview image.\n     */\n    imageUrl: string;\n}\n\n/**\n * [Snapcode](https://scan.snapchat.com/snapcodes) representing a lens.\n */\n// That corresponds to Scannable interface in packages/web-sdk/src/generated-proto/pb_schema/camera_kit/v3/lens.ts\nexport interface Snapcode {\n    /**\n     * Snapcode image URL scannable with Snapchat app.\n     */\n    imageUrl: string;\n\n    /**\n     * Deeplink URL that directs to a lens web page.\n     */\n    deepLink: string;\n}\n\nexport function isLensArray(value: unknown): value is Lens[] {\n    return isArrayOfType(isLens, value);\n}\n\nexport function isLens(value: unknown): value is Lens {\n    return (\n        isRecord(value) &&\n        isString(value.id) &&\n        isString(value.name) &&\n        (isUndefined(value.iconUrl) || isString(value.iconUrl)) &&\n        isRecord(value.vendorData) &&\n        predicateRecordValues(isString)(value.vendorData) &&\n        isString(value.cameraFacingPreference) &&\n        (isUndefined(value.preview) || isPreview(value.preview)) &&\n        (isUndefined(value.lensCreator) || isLensCreator(value.lensCreator)) &&\n        (isUndefined(value.snapcode) || isSnapcode(value.snapcode)) &&\n        isAnyArray(value.featureMetadata)\n    );\n}\n\nexport function isLensProto(value: unknown): value is LensProto {\n    return (\n        isRecord(value) &&\n        isString(value.id) &&\n        isString(value.name) &&\n        isRecord(value.vendorData) &&\n        predicateRecordValues(isString)(value.vendorData) &&\n        (typeof value.content === \"undefined\" || isLensContent(value.content))\n    );\n}\n\nexport function isPreview(value: unknown): value is Preview {\n    return isRecord(value) && isString(value.imageUrl);\n}\n\nexport function isLensCreator(value: unknown): value is LensCreator {\n    return isRecord(value) && isString(value.displayName);\n}\n\nexport function isSnapcode(value: unknown): value is Snapcode {\n    return isRecord(value) && isString(value.imageUrl) && isString(value.deepLink);\n}\n\nexport function isLensContent(value: unknown): value is ContentProto {\n    return (\n        isRecord(value) &&\n        isString(value.iconUrlBolt) &&\n        isString(value.lnsSha256) &&\n        isString(value.lnsUrlBolt) &&\n        isRecord(value.preview) &&\n        isString(value.preview.imageUrl)\n    );\n}\n\nexport function isGetGroupResponse(value: unknown): value is GetGroupResponse {\n    return isRecord(value) && isString(value.id) && Array.isArray(value.lenses) && value.lenses.every(isLensProto);\n}\n\nexport function isAny(value: unknown): value is Any {\n    return isRecord(value) && isString(value.typeUrl) && isTypedArray(value.value);\n}\n\nexport function isAnyArray(value: unknown): value is Any[] {\n    return isArrayOfType(isAny, value);\n}\n\n/**\n * Converts lens proto to a public lens object.\n * @param lens Lens proto\n * @returns Public lens object.\n *\n * @internal\n */\nexport function toPublicLens({\n    id,\n    groupId,\n    name,\n    content,\n    vendorData,\n    cameraFacingPreference,\n    lensCreator,\n    scannable,\n    featureMetadata,\n}: LensProtoWithGroupId): Lens {\n    assert(isEmptyOrSafeUrl(content?.iconUrlBolt), \"Unsafe icon URL\");\n    assert(isEmptyOrSafeUrl(content?.preview?.imageUrl), \"Unsafe preview URL\");\n    return {\n        id,\n        groupId,\n        name,\n        iconUrl: content?.iconUrlBolt,\n        preview: content?.preview ? { imageUrl: content.preview.imageUrl } : undefined,\n        vendorData,\n        cameraFacingPreference,\n        lensCreator,\n        snapcode: scannable\n            ? { imageUrl: scannable.snapcodeImageUrl, deepLink: scannable.snapcodeDeeplink }\n            : undefined,\n        featureMetadata,\n    };\n}\n"]}