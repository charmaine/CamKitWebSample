import { __awaiter } from "tslib";
import { encodeKnownAnyJson } from "../common/any";
import { isGetGroupResponse, isLensProto } from "./Lens";
const relativePath = "/com.snap.camerakit.v3.Lenses";
function fixAny(lens) {
    // The Lens is serialized into JSON by the CameraKit backend, which is vulnerable
    // to serialization discrepancies between the backend and ts-proto generated serializers.
    // See packages/web-sdk/src/common/any.ts
    const featureMetadata = lens.featureMetadata.reduce((fixedAnys, anyToFix) => {
        // Safety: anyToFix is actually AnyJson, due to how our backend serializes it
        const fixedAny = encodeKnownAnyJson(anyToFix);
        return fixedAny ? [...fixedAnys, fixedAny] : fixedAnys;
    }, []);
    return Object.assign(Object.assign({}, lens), { featureMetadata });
}
function getRequestId(res) {
    return res.headers.get("x-request-id");
}
export function retrieveCameraKitLens(httpClient, lensId, groupId, apiHostname) {
    return __awaiter(this, void 0, void 0, function* () {
        const url = `https://${apiHostname}${relativePath}/groups/${groupId}/lenses/${lensId}`;
        const response = yield httpClient(url, { credentials: "include" });
        const body = yield response.json();
        const lens = body.lens;
        if (!response.ok) {
            throw new Error(`Cannot load lens ${lensId} in group ${groupId}. GetGroupLens responded with status ` +
                `${response.status} and body:\n\t${JSON.stringify(body)} for requestId ${getRequestId(response)}`);
        }
        if (!isLensProto(lens)) {
            throw new Error(`Cannot load lens ${lensId} in group ${groupId}. The response was not a Lens:` +
                `\n\t${JSON.stringify(body)} for requestId ${getRequestId(response)}`);
        }
        return fixAny(lens);
    });
}
export function retrieveCameraKitLensGroup(httpClient, groupId, apiHostname) {
    return __awaiter(this, void 0, void 0, function* () {
        const url = `https://${apiHostname}${relativePath}/groups/${groupId}`;
        const response = yield httpClient(url, { credentials: "include" });
        const body = yield response.json();
        if (!response.ok) {
            throw new Error(`Cannot load lens group ${groupId}. GetGroup responded with status ` +
                `${response.status} and body:\n\t${JSON.stringify(body)} for requestId ${getRequestId(response)}`);
        }
        if (!isGetGroupResponse(body)) {
            throw new Error(`Cannot load lens group ${groupId}. The response was not a LensGroup:` +
                `\n\t${JSON.stringify(body)} for requestId ${getRequestId(response)}`);
        }
        return body.lenses.map(fixAny);
    });
}
//# sourceMappingURL=lensHttpUtil.js.map