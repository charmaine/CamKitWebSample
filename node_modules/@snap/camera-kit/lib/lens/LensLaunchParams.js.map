{"version":3,"file":"LensLaunchParams.js","sourceRoot":"","sources":["../../src/lens/LensLaunchParams.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,gDAAgD,CAAC;AAC5E,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAEpE,MAAM,UAAU,GAAG,CAAC,KAAc,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;AAElF,MAAM,aAAa,GAAG,CAAC,KAAc,EAAmB,EAAE,CACtD,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AActE;;GAEG;AACH,MAAM,UAAU,mBAAmB,CAAC,YAAqB;IACrD,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,YAAY,YAAY,IAAI,EAAE;QACzD,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;KAC1C;IAED,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;QACrD,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACtB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE;gBACvD,MAAM,IAAI,KAAK,CACX,SAAS,GAAG,0EAA0E;oBAClF,aAAa,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAC5C,CAAC;aACL;SACJ;aAAM,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE;YAC1B,MAAM,IAAI,KAAK,CACX,SAAS,GAAG,0EAA0E;gBAClF,aAAa,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAC5C,CAAC;SACL;KACJ;IAED,OAAO,IAAI,CAAC;AAChB,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,EAAE,YAAY,EAAE,eAAe,EAAiB,EAAE,EAAE;AACjF,wEAAwE;AACxE,mEAAmE;AACnE,6CAA6C;AAC7C,UAAU,CAAC,MAAM,CACb,UAAU,CAAC,WAAW,iCACf,CAAC,YAAY;IACZ,mBAAmB,CAAC,YAAY,CAAC,IAAI;IACjC,YAAY,EAAE,EAAE,IAAI,EAAE,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,EAAE;CACjF,CAAC,GACH,CAAC,eAAe,IAAI,EAAE,eAAe,EAAE,EAAE,KAAK,EAAE,IAAI,UAAU,CAAC,eAAe,CAAC,EAAE,EAAE,CAAC,EACzF,CACL;KACI,MAAM,EAAE;KACR,KAAK,EAAE,CAAC","sourcesContent":["import { LaunchData } from \"../generated-proto/pb_schema/lenses/launchdata\";\nimport { isNumber, isRecord, isString } from \"../common/typeguards\";\n\nconst isNotValid = (value: unknown) => !(isString(value) || isValidNumber(value));\n\nconst isValidNumber = (value: unknown): value is number =>\n    isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n\n/**\n * Various lenses may support the passing of certain parameters from the application to the lens when it is launched.\n *\n * @category Lenses\n */\nexport type LensLaunchParams = Record<string, string | number | string[] | number[]>;\n\nexport type LaunchDetails = {\n    launchParams?: LensLaunchParams;\n    persistentStore?: ArrayBuffer;\n};\n\n/**\n * @internal\n */\nexport function isLaunchParamsValid(launchParams: unknown): launchParams is LensLaunchParams {\n    if (!isRecord(launchParams) || launchParams instanceof Date) {\n        throw new Error(\"Expected an object.\");\n    }\n\n    for (const [key, value] of Object.entries(launchParams)) {\n        if (Array.isArray(value)) {\n            if (!value.every(isString) && !value.every(isValidNumber)) {\n                throw new Error(\n                    `Field ${key} expects a value of type string, number, string array, or number array. ` +\n                        `Received: ${JSON.stringify(value)}.`\n                );\n            }\n        } else if (isNotValid(value)) {\n            throw new Error(\n                `Field ${key} expects a value of type string, number, string array, or number array. ` +\n                    `Received: ${JSON.stringify(value)}.`\n            );\n        }\n    }\n\n    return true;\n}\n\n/**\n * @param launchDetails\n * @internal\n */\nexport const createLaunchData = ({ launchParams, persistentStore }: LaunchDetails) =>\n    // finish() protobufjs method returns UInt8Array with shared ArrayBuffer\n    // to avoid of detached buffer error when passing data to Lens Core\n    // data should be copied using slice() method\n    LaunchData.encode(\n        LaunchData.fromPartial({\n            ...(launchParams &&\n                isLaunchParamsValid(launchParams) && {\n                    launchParams: { data: new TextEncoder().encode(JSON.stringify(launchParams)) },\n                }),\n            ...(persistentStore && { persistentStore: { store: new Uint8Array(persistentStore) } }),\n        })\n    )\n        .finish()\n        .slice();\n"]}