{"version":3,"file":"lensHttpUtil.js","sourceRoot":"","sources":["../../src/lens/lensHttpUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnyJson, encodeKnownAnyJson } from \"../common/any\";\nimport { Any } from \"../generated-proto/pb_schema/google/protobuf/any\";\nimport { CameraKitApiHostname } from \"../configuration\";\nimport { FetchHandler } from \"../handlers/defaultFetchHandler\";\nimport { isGetGroupResponse, isLensProto, LensProto } from \"./Lens\";\n\nconst relativePath = \"/com.snap.camerakit.v3.Lenses\";\n\nfunction fixAny(lens: LensProto): LensProto {\n    // The Lens is serialized into JSON by the CameraKit backend, which is vulnerable\n    // to serialization discrepancies between the backend and ts-proto generated serializers.\n    // See packages/web-sdk/src/common/any.ts\n    const featureMetadata = lens.featureMetadata.reduce((fixedAnys, anyToFix) => {\n        // Safety: anyToFix is actually AnyJson, due to how our backend serializes it\n        const fixedAny = encodeKnownAnyJson(anyToFix as unknown as AnyJson);\n        return fixedAny ? [...fixedAnys, fixedAny] : fixedAnys;\n    }, [] as Any[]);\n\n    return {\n        ...lens,\n        featureMetadata,\n    };\n}\n\nfunction getRequestId(res: Response) {\n    return res.headers.get(\"x-request-id\");\n}\n\nexport async function retrieveCameraKitLens(\n    httpClient: FetchHandler,\n    lensId: string,\n    groupId: string,\n    apiHostname: CameraKitApiHostname\n): Promise<LensProto> {\n    const url = `https://${apiHostname}${relativePath}/groups/${groupId}/lenses/${lensId}`;\n    const response = await httpClient(url, { credentials: \"include\" });\n    const body = await response.json();\n    const lens = body.lens;\n\n    if (!response.ok) {\n        throw new Error(\n            `Cannot load lens ${lensId} in group ${groupId}. GetGroupLens responded with status ` +\n                `${response.status} and body:\\n\\t${JSON.stringify(body)} for requestId ${getRequestId(response)}`\n        );\n    }\n\n    if (!isLensProto(lens)) {\n        throw new Error(\n            `Cannot load lens ${lensId} in group ${groupId}. The response was not a Lens:` +\n                `\\n\\t${JSON.stringify(body)} for requestId ${getRequestId(response)}`\n        );\n    }\n    return fixAny(lens);\n}\n\nexport async function retrieveCameraKitLensGroup(\n    httpClient: FetchHandler,\n    groupId: string,\n    apiHostname: CameraKitApiHostname\n): Promise<LensProto[]> {\n    const url = `https://${apiHostname}${relativePath}/groups/${groupId}`;\n    const response = await httpClient(url, { credentials: \"include\" });\n    const body = await response.json();\n\n    if (!response.ok) {\n        throw new Error(\n            `Cannot load lens group ${groupId}. GetGroup responded with status ` +\n                `${response.status} and body:\\n\\t${JSON.stringify(body)} for requestId ${getRequestId(response)}`\n        );\n    }\n\n    if (!isGetGroupResponse(body)) {\n        throw new Error(\n            `Cannot load lens group ${groupId}. The response was not a LensGroup:` +\n                `\\n\\t${JSON.stringify(body)} for requestId ${getRequestId(response)}`\n        );\n    }\n    return body.lenses.map(fixAny);\n}\n"]}