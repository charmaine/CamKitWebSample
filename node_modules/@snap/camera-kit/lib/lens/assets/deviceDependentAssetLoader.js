import { __awaiter } from "tslib";
import { catchError, firstValueFrom, map, mergeMap } from "rxjs";
import { isRecord, isString } from "../../common/typeguards";
import { Injectable } from "../../dependency-injection/Injectable";
import { createArrayBufferParsingHandler } from "../../handlers/arrayBufferParsingHandler";
import { defaultFetchHandlerFactory } from "../../handlers/defaultFetchHandler";
import { HandlerChainBuilder } from "../../handlers/HandlerChainBuilder";
import { remoteConfigurationFactory } from "../../remote-configuration/remoteConfiguration";
const hasStringValue = (value) => {
    return isRecord(value) && isString(value.stringValue);
};
const isAssetConfig = (value) => {
    return isRecord(value) && isString(value.url) && (value.checksum === undefined || isString(value.checksum));
};
/**
 * @internal
 */
export const deviceDependentAssetLoaderFactory = Injectable("deviceDependentAssetLoader", [defaultFetchHandlerFactory.token, remoteConfigurationFactory.token], (fetchHandler, remoteConfiguration) => {
    const assetHandler = new HandlerChainBuilder(fetchHandler).map(createArrayBufferParsingHandler()).handler;
    return function deviceDependentAssetLoader({ assetId }) {
        return __awaiter(this, void 0, void 0, function* () {
            const loadingFailed = (reason, cause) => new Error(`Cannot load device-dependent asset ${assetId}. ${reason}`, { cause });
            return firstValueFrom(remoteConfiguration.get(assetId).pipe(catchError((error) => {
                throw loadingFailed("COF config failed to load.", error);
            }), map((configs) => {
                if (configs.length === 0) {
                    throw loadingFailed(`No COF config found corresponding to that assetId.`);
                }
                // All of the deviceDependent asset configs will only have one value, so we can safely use the
                // first (i.e. only) element in the configs list.
                const [{ value }] = configs;
                // Asset configurations are all JSON-encoded in the `stringValue` property. If it doesn't
                // exists, we can't fetch the asset.
                if (!hasStringValue(value))
                    throw loadingFailed("COF config malformed (missing stringValue)");
                let assetConfig;
                try {
                    assetConfig = JSON.parse(value.stringValue);
                }
                catch (parseError) {
                    throw loadingFailed("COF config malformed (JSON parse error)", parseError);
                }
                // Asset configurations have a `url` and `checksum` property. Otherwise we're dealing with some
                // other kind of configuration, and cannot fetch the asset.
                if (!isAssetConfig(assetConfig))
                    throw loadingFailed("COF config malformed (missing URL)");
                return assetConfig;
            }), mergeMap(({ url, checksum }) => __awaiter(this, void 0, void 0, function* () {
                // TODO: remove force-cache once https://jira.sc-corp.net/browse/CAMKIT-3671 is addressed
                const [data, response] = yield assetHandler(url, { cache: "force-cache" });
                if (!response.ok)
                    throw response;
                return { data, checksum };
            }))));
        });
    };
});
//# sourceMappingURL=deviceDependentAssetLoader.js.map