{"version":3,"file":"remoteMediaAssetLoaderFactory.js","sourceRoot":"","sources":["../../../src/lens/assets/remoteMediaAssetLoaderFactory.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,uCAAuC,CAAC;AACnE,OAAO,EAAE,+BAA+B,EAAE,MAAM,0CAA0C,CAAC;AAC3F,OAAO,EAAE,0BAA0B,EAAgB,MAAM,oCAAoC,CAAC;AAC9F,OAAO,EAAE,mBAAmB,EAAE,MAAM,oCAAoC,CAAC;AAGzE;;GAEG;AACH,MAAM,CAAC,MAAM,6BAA6B,GAAG,UAAU,CACnD,wBAAwB,EACxB,CAAC,0BAA0B,CAAC,KAAK,CAAU,EAC3C,CAAC,YAA0B,EAAe,EAAE;IACxC,MAAM,OAAO,GAAG,IAAI,mBAAmB,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,+BAA+B,EAAE,CAAC,CAAC,OAAO,CAAC;IAErG,OAAO,SAAe,sBAAsB,CAAC,KAAK;;YAC9C,yFAAyF;YACzF,+FAA+F;YAC/F,gEAAgE;YAChE,4CAA4C;YAC5C,iDAAiD;YACjD,yFAAyF;YACzF,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,GAAG,MAAM,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,CAAC,CAAC;YAClF,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAAE,MAAM,QAAQ,CAAC;YACjC,OAAO,MAAM,CAAC;QAClB,CAAC;KAAA,CAAC;AACN,CAAC,CACJ,CAAC","sourcesContent":["import { Injectable } from \"../../dependency-injection/Injectable\";\nimport { createArrayBufferParsingHandler } from \"../../handlers/arrayBufferParsingHandler\";\nimport { defaultFetchHandlerFactory, FetchHandler } from \"../../handlers/defaultFetchHandler\";\nimport { HandlerChainBuilder } from \"../../handlers/HandlerChainBuilder\";\nimport { AssetLoader } from \"./LensAssetRepository\";\n\n/**\n * @internal\n */\nexport const remoteMediaAssetLoaderFactory = Injectable(\n    \"remoteMediaAssetLoader\",\n    [defaultFetchHandlerFactory.token] as const,\n    (fetchHandler: FetchHandler): AssetLoader => {\n        const handler = new HandlerChainBuilder(fetchHandler).map(createArrayBufferParsingHandler()).handler;\n\n        return async function remoteMediaAssetLoader(asset) {\n            // as a default option assuming that RemoteMedia asset type contains asset url in assetId\n            // this behaviour could be changed by providing own implementation for RemoteMedia asset loader\n            //   const cameraKit = bootstrapCameraKit(config, container => {\n            //     return container.provides(Injectable(\n            //       remoteMediaAssetLoaderFactory.token, ...\n            // TODO: remove force-cache once https://jira.sc-corp.net/browse/CAMKIT-3671 is addressed\n            const [buffer, response] = await handler(asset.assetId, { cache: \"force-cache\" });\n            if (!response.ok) throw response;\n            return buffer;\n        };\n    }\n);\n"]}