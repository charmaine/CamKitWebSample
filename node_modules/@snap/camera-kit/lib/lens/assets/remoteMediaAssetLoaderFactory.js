import { __awaiter } from "tslib";
import { Injectable } from "../../dependency-injection/Injectable";
import { createArrayBufferParsingHandler } from "../../handlers/arrayBufferParsingHandler";
import { defaultFetchHandlerFactory } from "../../handlers/defaultFetchHandler";
import { HandlerChainBuilder } from "../../handlers/HandlerChainBuilder";
/**
 * @internal
 */
export const remoteMediaAssetLoaderFactory = Injectable("remoteMediaAssetLoader", [defaultFetchHandlerFactory.token], (fetchHandler) => {
    const handler = new HandlerChainBuilder(fetchHandler).map(createArrayBufferParsingHandler()).handler;
    return function remoteMediaAssetLoader(asset) {
        return __awaiter(this, void 0, void 0, function* () {
            // as a default option assuming that RemoteMedia asset type contains asset url in assetId
            // this behaviour could be changed by providing own implementation for RemoteMedia asset loader
            //   const cameraKit = bootstrapCameraKit(config, container => {
            //     return container.provides(Injectable(
            //       remoteMediaAssetLoaderFactory.token, ...
            // TODO: remove force-cache once https://jira.sc-corp.net/browse/CAMKIT-3671 is addressed
            const [buffer, response] = yield handler(asset.assetId, { cache: "force-cache" });
            if (!response.ok)
                throw response;
            return buffer;
        });
    };
});
//# sourceMappingURL=remoteMediaAssetLoaderFactory.js.map