{"version":3,"file":"deviceDependentAssetLoader.js","sourceRoot":"","sources":["../../../src/lens/assets/deviceDependentAssetLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import { catchError, firstValueFrom, map, mergeMap } from \"rxjs\";\nimport { isRecord, isString } from \"../../common/typeguards\";\nimport { Injectable } from \"../../dependency-injection/Injectable\";\nimport { createArrayBufferParsingHandler } from \"../../handlers/arrayBufferParsingHandler\";\nimport { defaultFetchHandlerFactory, FetchHandler } from \"../../handlers/defaultFetchHandler\";\nimport { HandlerChainBuilder } from \"../../handlers/HandlerChainBuilder\";\nimport { RemoteConfiguration, remoteConfigurationFactory } from \"../../remote-configuration/remoteConfiguration\";\nimport { AssetLoader, AssetResponse } from \"./LensAssetRepository\";\n\ninterface AssetConfig {\n    url: string;\n    checksum?: string;\n}\n\nconst hasStringValue = (value: unknown): value is { stringValue: string } => {\n    return isRecord(value) && isString(value.stringValue);\n};\n\nconst isAssetConfig = (value: unknown): value is AssetConfig => {\n    return isRecord(value) && isString(value.url) && (value.checksum === undefined || isString(value.checksum));\n};\n\n/**\n * @internal\n */\nexport const deviceDependentAssetLoaderFactory = Injectable(\n    \"deviceDependentAssetLoader\",\n    [defaultFetchHandlerFactory.token, remoteConfigurationFactory.token] as const,\n    (fetchHandler: FetchHandler, remoteConfiguration: RemoteConfiguration): AssetLoader => {\n        const assetHandler = new HandlerChainBuilder(fetchHandler).map(createArrayBufferParsingHandler()).handler;\n\n        return async function deviceDependentAssetLoader({ assetId }): Promise<AssetResponse> {\n            const loadingFailed = (reason: string, cause?: unknown) =>\n                new Error(`Cannot load device-dependent asset ${assetId}. ${reason}`, { cause });\n\n            return firstValueFrom(\n                remoteConfiguration.get(assetId).pipe(\n                    catchError((error) => {\n                        throw loadingFailed(\"COF config failed to load.\", error);\n                    }),\n                    map((configs) => {\n                        if (configs.length === 0) {\n                            throw loadingFailed(`No COF config found corresponding to that assetId.`);\n                        }\n                        // All of the deviceDependent asset configs will only have one value, so we can safely use the\n                        // first (i.e. only) element in the configs list.\n                        const [{ value }] = configs;\n\n                        // Asset configurations are all JSON-encoded in the `stringValue` property. If it doesn't\n                        // exists, we can't fetch the asset.\n                        if (!hasStringValue(value)) throw loadingFailed(\"COF config malformed (missing stringValue)\");\n\n                        let assetConfig: unknown;\n                        try {\n                            assetConfig = JSON.parse(value.stringValue);\n                        } catch (parseError) {\n                            throw loadingFailed(\"COF config malformed (JSON parse error)\", parseError);\n                        }\n\n                        // Asset configurations have a `url` and `checksum` property. Otherwise we're dealing with some\n                        // other kind of configuration, and cannot fetch the asset.\n                        if (!isAssetConfig(assetConfig)) throw loadingFailed(\"COF config malformed (missing URL)\");\n\n                        return assetConfig;\n                    }),\n                    mergeMap(async ({ url, checksum }) => {\n                        // TODO: remove force-cache once https://jira.sc-corp.net/browse/CAMKIT-3671 is addressed\n                        const [data, response] = await assetHandler(url, { cache: \"force-cache\" });\n                        if (!response.ok) throw response;\n                        return { data, checksum };\n                    })\n                )\n            );\n        };\n    }\n);\n"]}