{"version":3,"file":"CameraKitSessionEvents.js","sourceRoot":"","sources":["../../src/session/CameraKitSessionEvents.ts"],"names":[],"mappings":"AAKA;;GAEG;AACH,MAAM,WAAW,GAAG,CAAC,CAAQ,EAAE,EAAE,CAAC,KAAK,CAAC;AAExC;;GAEG;AACH,MAAM,UAAU,cAAc,CAAC,KAAc;IACzC,IAAI,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC;QAAE,OAAO,KAAK,CAAC;IAE5C,MAAM,qBAAqB,GAAI,KAAuB,CAAC,IAAI,CAAC;IAC5D,QAAQ,qBAAqB,EAAE;QAC3B,KAAK,gBAAgB,CAAC;QACtB,KAAK,sBAAsB,CAAC;QAC5B,KAAK,oBAAoB,CAAC;QAC1B,KAAK,sBAAsB;YACvB,OAAO,IAAI,CAAC;QAChB;YACI,OAAO,WAAW,CAAC,qBAAqB,CAAC,CAAC;KACjD;AACL,CAAC;AA8BD;;GAEG;AACH,MAAM,UAAU,iBAAiB,CAAC,KAAc;IAC5C,IAAI,CAAC,CAAC,KAAK,YAAY,KAAK,CAAC;QAAE,OAAO,KAAK,CAAC;IAE5C,MAAM,qBAAqB,GAAI,KAAmD,CAAC,IAAI,CAAC;IACxF,QAAQ,qBAAqB,EAAE;QAC3B,KAAK,gBAAgB,CAAC;QACtB,KAAK,oBAAoB,CAAC;QAC1B,KAAK,sBAAsB;YACvB,OAAO,IAAI,CAAC;QAChB;YACI,OAAO,WAAW,CAAC,qBAAqB,CAAC,CAAC;KACjD;AACL,CAAC","sourcesContent":["import { CameraKitSourceError, LensExecutionError, LensImagePickerError, LensAbortError } from \"../namedErrors\";\nimport { TypedCustomEvent } from \"../events/TypedCustomEvent\";\nimport { TypedEventListener } from \"../events/TypedEventTarget\";\nimport { Lens } from \"../lens\";\n\n/**\n * A type guard helper to detect unreachable code.\n */\nconst isReachable = (_: never) => false;\n\n/**\n * Returns true if given value is of {@link SessionErrors} type and false otherwise.\n */\nexport function isSessionError(value: unknown): value is SessionErrors {\n    if (!(value instanceof Error)) return false;\n\n    const maybeSessionErrorName = (value as SessionErrors).name;\n    switch (maybeSessionErrorName) {\n        case \"LensAbortError\":\n        case \"CameraKitSourceError\":\n        case \"LensExecutionError\":\n        case \"LensImagePickerError\":\n            return true;\n        default:\n            return isReachable(maybeSessionErrorName);\n    }\n}\n\n/**\n * Misc errors that occur during CameraKit session.\n * @internal\n */\nexport type SessionErrors = LensExecutionError | LensAbortError | LensImagePickerError | CameraKitSourceError;\n\n/**\n * Events emitted by {@link CameraKitSession.events | CameraKitSession.events}.\n *\n * The following events are emitted:\n *   - `error`: An error has been encountered during lens rendering. May contain an error of type:\n *     - {@link LensExecutionError} If an error of this type occurs, the rendering lens will be automatically removed\n * from the associated CameraKitSession.\n *     - {@link LensImagePickerError}\n *\n * @category Rendering\n * @category Lenses\n */\nexport type CameraKitSessionEvents = TypedCustomEvent<\n    \"error\",\n    { error: LensExecutionError | LensAbortError | LensImagePickerError; lens: Lens }\n>;\n\n/**\n * Listener of {@link CameraKitSessionEvents} events.\n */\nexport type CameraKitSessionEventListener = TypedEventListener<CameraKitSessionEvents>;\n\n/**\n * Returns true if given value is of {@link SessionErrors} type, which is notified to client.\n */\nexport function isPublicLensError(value: unknown): value is CameraKitSessionEvents[\"detail\"][\"error\"] {\n    if (!(value instanceof Error)) return false;\n\n    const maybeSessionErrorName = (value as CameraKitSessionEvents[\"detail\"][\"error\"]).name;\n    switch (maybeSessionErrorName) {\n        case \"LensAbortError\":\n        case \"LensExecutionError\":\n        case \"LensImagePickerError\":\n            return true;\n        default:\n            return isReachable(maybeSessionErrorName);\n    }\n}\n"]}