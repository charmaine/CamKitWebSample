{"version":3,"file":"sessionState.js","sourceRoot":"","sources":["../../src/session/sessionState.ts"],"names":[],"mappings":"AAAA,OAAO,EACH,YAAY,EACZ,aAAa,EACb,WAAW,EACX,YAAY,EACZ,UAAU,EACV,YAAY,GACf,MAAM,wBAAwB,CAAC;AAChC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,UAAU,EAAE,MAAM,oCAAoC,CAAC;AAGhE,MAAM,kBAAkB,GAAG,GAAG,EAAE;IAC5B,MAAM,OAAO,GAAG,aAAa,CACzB,YAAY,CAAC,SAAS,CAAC,EAAoB,EAC3C,YAAY,CAAC,QAAQ,CAAC,EAAoB,EAC1C,YAAY,CAAC,SAAS,CAAC,EAAE,CAC5B,CAAC;IAEF,MAAM,MAAM,GAAG,YAAY,CACvB,WAAW,CAAC,UAAU,CAAC,EAAE,EACzB,WAAW,CAAC,QAAQ,CAAC,EAAoB,EACzC,WAAW,CAAC,WAAW,CAAC,EAAE,CAC7B,CAAC;IAEF,OAAO,IAAI,YAAY,CAAC,OAAO,EAAE,MAAM,EAAE,WAAW,CAAC,UAAU,CAAC,EAAE,EAAE,EAAE,CAAC,MAAM,EAAE,EAAE;QAC7E,OAAO,KAAK,CACR,MAAM,CAAC,IAAI,CACP,UAAU,CAAC,QAAQ,CAAC,EACpB,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CACtC,EACD,MAAM,CAAC,IAAI,CACP,UAAU,CAAC,SAAS,CAAC,EACrB,GAAG,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAC/B,EACD,MAAM,CAAC,IAAI,CACP,UAAU,CAAC,SAAS,CAAC,EACrB,GAAG,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAChC,CACJ,CAAC;IACN,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAIF,MAAM,CAAC,MAAM,mBAAmB,GAAG,UAAU,CAAC,cAAc,EAAE,GAAiB,EAAE,CAAC,kBAAkB,EAAE,CAAC,CAAC","sourcesContent":["import {\n    defineAction,\n    defineActions,\n    defineState,\n    defineStates,\n    forActions,\n    StateMachine,\n} from \"@snap/state-management\";\nimport { map, merge } from \"rxjs\";\nimport { Injectable } from \"../dependency-injection/Injectable\";\nimport { CameraKitSession } from \"./CameraKitSession\";\n\nconst createSessionState = () => {\n    const actions = defineActions(\n        defineAction(\"suspend\")<CameraKitSession>(),\n        defineAction(\"resume\")<CameraKitSession>(),\n        defineAction(\"destroy\")()\n    );\n\n    const states = defineStates(\n        defineState(\"inactive\")(),\n        defineState(\"active\")<CameraKitSession>(),\n        defineState(\"destroyed\")()\n    );\n\n    return new StateMachine(actions, states, defineState(\"inactive\")()(), (events) => {\n        return merge(\n            events.pipe(\n                forActions(\"resume\"),\n                map(([a]) => states.active(a.data))\n            ),\n            events.pipe(\n                forActions(\"suspend\"),\n                map(() => states.inactive())\n            ),\n            events.pipe(\n                forActions(\"destroy\"),\n                map(() => states.destroyed())\n            )\n        );\n    });\n};\n\nexport type SessionState = ReturnType<typeof createSessionState>;\n\nexport const sessionStateFactory = Injectable(\"sessionState\", (): SessionState => createSessionState());\n"]}