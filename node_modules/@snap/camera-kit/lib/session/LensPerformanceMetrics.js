import { __decorate, __metadata } from "tslib";
import { errorLoggingDecorator } from "../logger/errorLoggingDecorator";
import { getLogger } from "../logger/logger";
import { LensPerformanceMeasurement } from "./LensPerformanceMeasurement";
const logger = getLogger("RenderingMetrics");
const log = errorLoggingDecorator(logger);
/**
 * Use to measure lens rendering performance.
 *
 * The {@link LensPerformanceMetrics.beginMeasurement} method is used to start measuring rendering performance. After
 * a measurement has begun, performance metrics can be read using {@link LensPerformanceMeasurement}.
 *
 * @example
 * ```ts
 * const measurement = cameraKitSession.metrics.beginMeasurement()
 * // some time later
 * console.log(measurement.measure())
 * ```
 *
 * @category Rendering
 * @category Metrics
 */
export class LensPerformanceMetrics {
    /** @internal */
    constructor(lensCore) {
        this.lensCore = lensCore;
        this.measurementInstances = new Set();
        this.lensCore
            .setOnFrameProcessedCallback({
            onFrameProcessed: ({ processingTimeMs }) => {
                try {
                    for (const measurement of this.measurementInstances.values()) {
                        measurement.update(processingTimeMs);
                    }
                }
                catch (error) {
                    logger.error(error);
                }
            },
        })
            .catch((error) => logger.error(`Failed registering setOnFrameProcessedCallback with error: ${error.message}`));
    }
    /**
     * Begin a measurement window, during which time rendering metrics will be gathered.
     *
     * @returns A {@link LensPerformanceMeasurement} representing an ongoing measurement of aggregated rendering
     * metrics, from which specific metrics can be obtained.
     */
    beginMeasurement() {
        return new LensPerformanceMeasurement(this.measurementInstances);
    }
}
__decorate([
    log,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", LensPerformanceMeasurement)
], LensPerformanceMetrics.prototype, "beginMeasurement", null);
//# sourceMappingURL=LensPerformanceMetrics.js.map