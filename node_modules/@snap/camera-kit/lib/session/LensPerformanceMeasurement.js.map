{"version":3,"file":"LensPerformanceMeasurement.js","sourceRoot":"","sources":["../../src/session/LensPerformanceMeasurement.ts"],"names":[],"mappings":"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","sourcesContent":["interface FrameMetricsState {\n    avgFps: number;\n    averageProcessingTime: number;\n    n: number;\n    processingTimeBuckets: Uint32Array;\n    procFrameCount: number;\n    procFrameMean: number;\n    procFrameD2: number;\n}\n\nconst getDefaultFrameMetricsState = (): FrameMetricsState => ({\n    avgFps: 0,\n    averageProcessingTime: 0,\n    n: 0,\n    processingTimeBuckets: new Uint32Array(frameProcessingTimeMedianMax + 1),\n    procFrameCount: 0,\n    procFrameMean: 0,\n    procFrameD2: 0,\n});\n\n// This duration is chosen to be larger than we expect frame processing to reasonably take on any device, but smaller\n// than the duration of a manual rendering pause (e.g. a user clicking a pause button followed by a play button).\n//\n// This also defines the min avgFps that will be reported â€“ if we see avgFps at `1 / frameDurationThresholdSec`\n// consistently, it's safe to assume actual fps is probably even lower.\nconst frameDurationThreshold: number = 1;\n\n// When computing the median frame processing time, in order to save space, we'll record a maximum frame processing\n// time median of 200ms -- that's already unnusably slow, and we don't really care if the true median is greater than\n// 200ms.\nconst frameProcessingTimeMedianMax = 200;\n\n/**\n * @category Rendering\n * @category Metrics\n */\nexport interface ComputedFrameMetrics {\n    avgFps: number;\n    lensFrameProcessingTimeMsAvg: number;\n    lensFrameProcessingTimeMsStd: number;\n    lensFrameProcessingTimeMsMedian: number;\n    lensFrameProcessingN: number;\n}\n\n/**\n * Represents an ongoing measurement of rendering metrics.\n *\n * An instance of this class is obtained by calling {@link LensPerformanceMetrics.beginMeasurement}. Then it may be\n * used to record rendering performance metrics, reset measurement, or end the measurement.\n *\n * @category Rendering\n * @category Metrics\n */\nexport class LensPerformanceMeasurement {\n    private state: FrameMetricsState = { ...getDefaultFrameMetricsState() };\n    private priorFrameCompletedTime?: number;\n\n    constructor(private instances: Set<LensPerformanceMeasurement>) {\n        this.instances.add(this);\n    }\n\n    /** @internal */\n    update(processingTimeMs: number): void {\n        this.computeRunningStats(processingTimeMs);\n    }\n\n    /**\n     * Return a {@link ComputedFrameMetrics} object, containing lens performance metrics.\n     *\n     * This method may be called multiple times, each time reporting values computed since the time when this instance\n     * was created.\n     */\n    measure(): ComputedFrameMetrics {\n        // We count the number of frames in each per-millisecond bucket, stopping when we've counted half the frames --\n        // that bucket contains the median.\n        let median = 0;\n        let count = 0;\n        for (; median < this.state.processingTimeBuckets.length; median++) {\n            count += this.state.processingTimeBuckets[median];\n            if (count >= (this.state.n + 1) / 2) break;\n        }\n        return {\n            avgFps: this.state.avgFps,\n            lensFrameProcessingTimeMsAvg: this.state.procFrameMean,\n            lensFrameProcessingTimeMsStd: Math.sqrt(this.state.procFrameD2 / this.state.procFrameCount),\n            lensFrameProcessingTimeMsMedian: this.state.n > 0 ? median : 0,\n            lensFrameProcessingN: this.state.n,\n        };\n    }\n\n    /**\n     * Reset the measured perforamance statistics (averages, std deviations). This is equivalent to using\n     * {@link LensPerformanceMetrics.beginMeasurement} to create a new LensPerformanceMeasurement instance, but may be\n     * more convenient.\n     */\n    reset(): void {\n        this.state = { ...getDefaultFrameMetricsState() };\n    }\n\n    /**\n     * Stop measuring performance statistics.\n     *\n     * This instance will not be garbage collected until this method is called. Therefore it is important to call this\n     * method at the appropriate time to avoid leaking memory -- particularly if your application creates many\n     * LensPerformanceMeasurement instances.\n     */\n    end(): void {\n        this.instances.delete(this);\n    }\n    /**\n     * In order to calculate the mean, variance, and standard deviation for the processing times\n     *  we are using Welford's online algorithm.\n     * https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm\n     *\n     * @param processingTimeMs Processing time that is returned from registered callback\n     */\n    private computeRunningStats(processingTimeMs: number) {\n        // calculate mean and delta squared for variance and standard deviation\n        const delta = processingTimeMs - this.state.procFrameMean;\n        this.state.procFrameCount += 1;\n        this.state.procFrameMean += delta / this.state.procFrameCount;\n\n        const delta2 = processingTimeMs - this.state.procFrameMean;\n        this.state.procFrameD2 += delta * delta2;\n\n        // Determine average fps\n        if (this.priorFrameCompletedTime === undefined) {\n            this.priorFrameCompletedTime = performance.now();\n        } else {\n            const frameDurationSec = (performance.now() - this.priorFrameCompletedTime) / 1000;\n            if (frameDurationSec < frameDurationThreshold) {\n                this.state.avgFps = (this.state.avgFps + 1 / frameDurationSec) / 2;\n            }\n            this.priorFrameCompletedTime = performance.now();\n        }\n\n        // To approximate the median, we put each processing time into a per-millisecond bucket, and then when we\n        // compute a measurement, we can count how many frames fell into each bucket. We don't care about latencies\n        // above 200ms, since that's already unusably slow (if we regress from 280ms to 320ms, we don't really care\n        // since both are unnusable).\n        this.state.n++;\n        this.state.processingTimeBuckets[Math.min(Math.round(processingTimeMs), frameProcessingTimeMedianMax)]++;\n    }\n}\n"]}