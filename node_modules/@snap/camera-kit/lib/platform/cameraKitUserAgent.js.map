{"version":3,"file":"cameraKitUserAgent.js","sourceRoot":"","sources":["../../src/platform/cameraKitUserAgent.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAC;AAC5C,OAAO,EAAE,yBAAyB,EAAE,MAAM,2BAA2B,CAAC;AACtE,OAAO,EAAE,eAAe,EAAE,MAAM,gBAAgB,CAAC;AAEjD,gBAAgB;AAChB,MAAM,CAAC,MAAM,qBAAqB,GAAG,OAAO,CAAC,SAAS,qBAAqB;;IACvE,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,eAAe,EAAE,QAAQ,EAAE,GAAG,eAAe,EAAE,CAAC;IAEzG,6DAA6D;IAC7D,MAAM,EAAE,eAAe,EAAE,GAAG,MAAA,yBAAyB,EAAE,mCAAI,EAAE,eAAe,EAAE,SAAS,EAAE,CAAC;IAC1F,MAAM,MAAM,GAAkB,eAAe,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;IAE5E,oCAAoC;IACpC,mCAAmC;IACnC,+JAA+J;IAC/J,OAAO,CACH,gBAAgB,eAAe,IAAI,MAAM,IAAI,WAAW,KAAK,MAAM,IAAI,SAAS,IAAI;QACpF,GAAG,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,OAAO,SAAS,QAAQ,CAAC,OAAO,GAAG;QAC/D,+GAA+G;QAC/G,qGAAqG;QACrG,SAAS,MAAM,EAAE,CACpB,CAAC;AACN,CAAC,CAAC,CAAC","sourcesContent":["import { memoize } from \"../common/memoize\";\nimport { getConfigurationOverrides } from \"../configurationOverrides\";\nimport { getPlatformInfo } from \"./platformInfo\";\n\n/** @internal */\nexport const getCameraKitUserAgent = memoize(function getCameraKitUserAgent(): string {\n    const { browser, deviceModel, origin, osName, osVersion, sdkShortVersion, lensCore } = getPlatformInfo();\n\n    // Set this to `DEBUG` manually while testing / root-causing.\n    const { userAgentFlavor } = getConfigurationOverrides() ?? { userAgentFlavor: \"release\" };\n    const flavor: \"\" | \"DEBUG \" = userAgentFlavor === \"release\" ? \"\" : \"DEBUG \";\n\n    // This full string is defined here:\n    // eslint-disable-next-line max-len\n    // https://github.sc-corp.net/Snapchat/useragent/blob/9333afe7cc6ac00503ad46cb234bcf94006dff98/java/useragent/src/main/java/snapchat/client/UserAgent.java#L124\n    return (\n        `CameraKitWeb/${sdkShortVersion} ${flavor}(${deviceModel}; ${osName} ${osVersion}) ` +\n        `${browser.brand}/${browser.version} Core/${lensCore.version} ` +\n        // We overload appId, using the origin instead of the true appId parsed from the apiToken -- we do this because\n        // origin is human-readable, and this is used to populate the appId dimension in operational metrics.\n        `AppId/${origin}`\n    );\n});\n"]}