import { __awaiter } from "tslib";
import { exceptions, simd } from "wasm-feature-detect";
import { memoize } from "../common/memoize";
import { platformNotSupportedError } from "../namedErrors";
import { getPlatformInfo } from "./platformInfo";
// This required minimum max texture size is based on data from
// https://web3dsurvey.com/webgl/parameters/MAX_TEXTURE_SIZE. Checking for a reasonable minimum MAX_TEXTURE_SIZE avoids
// attempting to run lenses on platforms that will not support them -- most commonly, we've seen some platforms that
// report 0 MAX_TEXTURE_SIZE, which will cause errors for all lenses.
const minRequiredMaxTextureSize = 1024;
/**
 * @returns An object with fields describing support for various WebGL features.
 *
 * @internal
 */
function getWebGlSupport() {
    const ctx = document.createElement("canvas").getContext("webgl2");
    if (!ctx)
        return {
            supported: false,
            error: platformNotSupportedError("CameraKit requires WebGL2, but this browser does not support WebGL2."),
        };
    const maxTextureSize = ctx.getParameter(ctx.MAX_TEXTURE_SIZE);
    const supported = maxTextureSize >= minRequiredMaxTextureSize;
    return supported
        ? { supported, maxTextureSize }
        : {
            supported,
            error: platformNotSupportedError(`CameraKit requires WebGL's MAX_TEXTURE_SIZE exceed a minimum value of ` +
                `${minRequiredMaxTextureSize}, but the browser's reported MAX_TEXTURE_SIZE is ${maxTextureSize}.`),
        };
}
/**
 * Because there may be a large number of WASM-related capabilities, and because these may correspond to various builds
 * of LensCore, we encode the various WASM capabilities into a single number by bitwise OR-ing together the numbers
 * corresponding to each capability.
 *
 * Since each combindation of capabilities is represented by a single number, we can easily map between that number and
 * the corresponding LensCore build name that makes use of those capabilities.
 *
 * @internal
 */
export var WasmFeatures;
(function (WasmFeatures) {
    WasmFeatures[WasmFeatures["Default"] = 0] = "Default";
    WasmFeatures[WasmFeatures["SIMD"] = 1] = "SIMD";
    WasmFeatures[WasmFeatures["ExceptionHandling"] = 2] = "ExceptionHandling";
})(WasmFeatures || (WasmFeatures = {}));
/**
 * @returns A non-negative integer representing the combination of supported WebAssembly features, or -1 if WebAssembly
 * is not supported at all.
 *
 * @internal
 */
function getWebAssemblyCapabilities() {
    return __awaiter(this, void 0, void 0, function* () {
        if (globalThis.WebAssembly === undefined)
            return {
                supported: false,
                error: platformNotSupportedError("CameraKit requires WebAssembly, but this browser does not support WebAssembly."),
            };
        return {
            supported: true,
            wasmFeatures: (yield Promise.all([
                simd().then((supported) => {
                    // Although Safari 16.4 reports SIMD support, LensCore encounters rendering bugs when using
                    // SIMD in Safari 16.4. We will disable SIMD for now until Safari stabilizes the feature.
                    if (getPlatformInfo().browser.brand === "Safari")
                        return WasmFeatures.Default;
                    return supported ? WasmFeatures.SIMD : WasmFeatures.Default;
                }),
                exceptions().then((supported) => (supported ? WasmFeatures.ExceptionHandling : WasmFeatures.Default)),
            ])).reduce((features, feature) => features | feature, WasmFeatures.Default),
        };
    });
}
/**
 * @returns A Promise containing an object with fields describing the support of various WebXR features. This object's
 * type is defined by LensCore, as they consume these capabilities and adjust behavior accordingly.
 *
 * @internal
 */
function getWebXrCapabilities() {
    return __awaiter(this, void 0, void 0, function* () {
        const notSupported = {
            supported: false,
            error: platformNotSupportedError(`Use of this feature requires WebXR support for immersive AR sessions, but ` +
                `this browser does not support immersive AR sessions.`),
        };
        if (!isSecureContext)
            return notSupported;
        if (!navigator.xr)
            return notSupported;
        const isImmersiveArSupported = yield navigator.xr.isSessionSupported("immersive-ar");
        return isImmersiveArSupported
            ? {
                supported: true,
                sixDofSupported: true,
                sceneDepthSupported: true,
            }
            : notSupported;
    });
}
/**
 * Get information about the current platform capabilities, including:
 * - WebGL support and various WebGL parameters.
 * - WASM support and support for various WASM features.
 * - WebXR support and support for various WebXR features.
 *
 * @internal
 */
export const getPlatformCapabilities = memoize(function getPlatformCapabilities() {
    return __awaiter(this, void 0, void 0, function* () {
        return {
            webgl: getWebGlSupport(),
            wasm: yield getWebAssemblyCapabilities(),
            webxr: yield getWebXrCapabilities(),
        };
    });
});
//# sourceMappingURL=platformCapabilities.js.map