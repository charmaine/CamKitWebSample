{"version":3,"file":"UriHandlers.js","sourceRoot":"","sources":["../../src/extensions/UriHandlers.ts"],"names":[],"mappings":"AAAA,OAAO,EACH,aAAa,EACb,aAAa,EACb,UAAU,EACV,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,YAAY,EACZ,WAAW,EACX,qBAAqB,GACxB,MAAM,sBAAsB,CAAC;AAC9B,OAAO,EAAE,UAAU,EAAE,MAAM,oCAAoC,CAAC;AAIhE,MAAM,SAAS,GAAG,KAAK,CAAC;AAExB,MAAM,UAAU,qBAAqB,CAAC,GAAQ;IAC1C,MAAM,cAAc,GAAG,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAC9C,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;IAC5C,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,cAAc,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;IAC3D,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;AAC7B,CAAC;AAED,SAAS,KAAK,CAAC,KAAc;IACzB,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AACxD,CAAC;AAED,SAAS,YAAY,CAAC,KAAc;IAChC,OAAO,CACH,QAAQ,CAAC,KAAK,CAAC;QACf,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,aAAa,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;QACrD,UAAU,CAAC,KAAK,CAAC,aAAa,CAAC;QAC/B,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,UAAU,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CACxE,CAAC;AACN,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,KAAc;IACxC,OAAO,aAAa,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;AAC9C,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,KAAc;IACxC,OAAO,CACH,QAAQ,CAAC,KAAK,CAAC;QACf,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC;QACpB,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC;QAC3B,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC;QAC3B,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACvD,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,qBAAqB,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CACnF,CAAC;AACN,CAAC;AAmCD;;;GAGG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,UAAU,CAAC,aAAa,EAAE,GAAG,EAAE;IAC7D,MAAM,WAAW,GAAgB,EAAE,CAAC;IACpC,OAAO,WAAW,CAAC;AACvB,CAAC,CAAC,CAAC","sourcesContent":["import {\n    isArrayBuffer,\n    isArrayOfType,\n    isFunction,\n    isNumber,\n    isRecord,\n    isString,\n    isTypedArray,\n    isUndefined,\n    predicateRecordValues,\n} from \"../common/typeguards\";\nimport { Injectable } from \"../dependency-injection/Injectable\";\nimport { Uri, UriCancelRequest, UriRequest, UriResponse } from \"../lens-core-module/generated-types\";\nimport { Lens } from \"../lens/Lens\";\n\nconst SEPARATOR = \"://\";\n\nexport function extractSchemeAndRoute(uri: Uri) {\n    const separatorIndex = uri.indexOf(SEPARATOR);\n    const scheme = uri.slice(0, separatorIndex);\n    const route = uri.slice(separatorIndex + SEPARATOR.length);\n    return { scheme, route };\n}\n\nfunction isUri(value: unknown): value is Uri {\n    return isString(value) && value.includes(SEPARATOR);\n}\n\nfunction isUriHandler(value: unknown): value is UriHandler {\n    return (\n        isRecord(value) &&\n        (isUri(value.uri) || isArrayOfType(isUri, value.uri)) &&\n        isFunction(value.handleRequest) &&\n        (isUndefined(value.cancelRequest) || isFunction(value.cancelRequest))\n    );\n}\n\nexport function isUriHandlers(value: unknown): value is UriHandlers {\n    return isArrayOfType(isUriHandler, value);\n}\n\nexport function isUriResponse(value: unknown): value is UriResponse {\n    return (\n        isRecord(value) &&\n        isNumber(value.code) &&\n        isString(value.description) &&\n        isString(value.contentType) &&\n        (isArrayBuffer(value.data) || isTypedArray(value.data)) &&\n        (isUndefined(value.metadata) || predicateRecordValues(isString)(value.metadata))\n    );\n}\n\n/**\n * Provides a way for a lens to call into external services that work under HTTP-like protocol.\n * @internal\n */\nexport interface UriHandler {\n    /**\n     * [scheme]://[route] pattern that this handler processes or an array of patterns.\n     */\n    uri: Uri | Uri[];\n\n    /**\n     * Called to process the provided request.\n     * @param request Lens request.\n     * @param reply A callback function to send response back.\n     * The function can be called none or multiple number of times.\n     * @param lens Lens the request is coming from.\n     */\n    handleRequest(request: UriRequest, reply: (response: UriResponse) => void, lens: Lens): void;\n\n    /**\n     * Called to indicated that URI request initated earlier is cancelled.\n     * @param request Lens request.\n     * @param lens Lens the request is coming from.\n     */\n    cancelRequest?(request: UriCancelRequest, lens: Lens): void;\n}\n\n/**\n * Array of {@link UriHandler} objects.\n * @internal\n */\nexport type UriHandlers = UriHandler[];\n\n/**\n * An extension point for client URI handlers.\n * @internal\n */\nexport const uriHandlersFactory = Injectable(\"UriHandlers\", () => {\n    const uriHandlers: UriHandlers = [];\n    return uriHandlers;\n});\n\nexport { Uri, UriCancelRequest, UriRequest, UriResponse } from \"../lens-core-module/generated-types\";\n"]}