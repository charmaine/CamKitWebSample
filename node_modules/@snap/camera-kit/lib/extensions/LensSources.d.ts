/**
 * A source of a lens group.
 */
export interface LensSource {
    /**
     * Whether the given source is able to load lenses of the supplied group.
     * @param groupId Group ID to check.
     */
    isGroupOwner(groupId: string): boolean;
    /**
     * Returns an encoded lens object.
     * @param lensId Lens ID to get.
     * @param groupId Group ID the lens belongs to.
     */
    getLens?(lensId: string, groupId: string): Promise<ArrayBuffer>;
    /**
     * Returns encoded lens objects.
     * @param groupId Group ID to get lenses of.
     */
    getLensGroup?(groupId: string): Promise<ArrayBuffer[]>;
}
/**
 * A chain of {@link LensSource} objects to be registered in Camera Kit on bootstrap. Camera Kit evaluates all
 * registered {@link LensSource} objects for a group ownership during Lens retrieval ({@link CameraKit.lenses}).
 * And if a source claims the ownership, its {@link LensSource.getLens} or {@link LensSource.getLensGroup}
 * methods are called.
 */
export declare class LensSources {
    /**
     * Returns empty LensSources instance.
     * @internal
     */
    static empty(): LensSources;
    private readonly fallbackSources;
    private readonly source;
    /**
     * Creates an instance of Lens sources.
     * @param fallbackSources A fallback sources if given {@link LensSource} doesn't claim a group ownership.
     * @param source Lens source.
     */
    constructor(fallbackSources: LensSources, source: LensSource);
    /**
     * Returns envelopes of lens/groups taking into account group ownership.
     * @internal
     * @param groupId A group to test ownership and get lens envelopes of.
     * @param lensId An optional lens ID to narrow envelopes down to a single lens.
     * @returns Envelopes or undefined if not applicable.
     */
    retrieveLenses({ groupId, lensId }: {
        groupId: string;
        lensId?: string;
    }): Promise<ArrayBuffer[] | void>;
}
export declare const lensSourcesFactory: {
    (): LensSources;
    token: "lensSources";
    dependencies: [];
};
