import { copyDefinedProperties } from "./common/copyDefinedProperties";
import { getConfigurationOverrides } from "./configurationOverrides";
import { Injectable } from "./dependency-injection/Injectable";
/**
 * Defaults are provided for runtime configuration and any optional bootstrap configuration properties which require
 * defaults.
 */
const defaultConfiguration = {
    // If the applications doesn't provide performance data (e.g. via estimateLensPerformance), we'll use 0 to indicate
    // no performance estimation occurred. This is indicative of typical performance-targeting logic, which often
    // defaults to the lowest-tier experience in the absense of performance cluster data.
    lensPerformance: { cluster: 0, benchmarks: [], webglRendererInfo: "unknown" },
    logger: "noop",
    logLevel: "info",
    shouldUseWorker: true,
    apiHostname: "camera-kit-api.snapar.com",
    userAgentFlavor: "release",
};
/** @internal */
export const configurationToken = "configuration";
/** @internal */
export const createCameraKitConfigurationFactory = (configuration) => {
    // always leave debug mode warning about overrides in console
    const overrides = getConfigurationOverrides();
    if (overrides) {
        console.warn("Configuration overrides applied", overrides);
    }
    return Injectable(configurationToken, () => {
        // We'll ensure that we handle errors on any Promises passed as config values, otherwise we either must
        // handle them separately wherever they're used, or rejections would go unhandled.
        const safeConfig = Object.assign(Object.assign({}, configuration), { lensPerformance: configuration.lensPerformance instanceof Promise
                ? // Safety: defaultConfiguration.lensPerformance is defined (it's hardcoded above).
                    configuration.lensPerformance.catch(() => defaultConfiguration.lensPerformance)
                : configuration.lensPerformance });
        return Object.assign(Object.assign(Object.assign({}, defaultConfiguration), copyDefinedProperties(safeConfig)), copyDefinedProperties(overrides !== null && overrides !== void 0 ? overrides : {}));
    });
};
//# sourceMappingURL=configuration.js.map