{"version":3,"file":"namedErrors.js","sourceRoot":"","sources":["../src/namedErrors.ts"],"names":[],"mappings":"AAAA,4EAA4E;AAC5E,yFAAyF;AAczF;;GAEG;AACH,SAAS,eAAe,CAAC,KAAa;IAClC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC9C,OAAO,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACvC,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,UAAU,CAKxB,IAAW;IACT,OAAO,CAAC,OAAe,EAAE,KAAe,EAAU,EAAE;QAChD,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;QAC5C,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;QAClB,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,IAAI,eAAe,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC1D,4EAA4E;QAC5E,OAAO,KAAe,CAAC;IAC3B,CAAC,CAAC;AACN,CAAC;AAGD,gBAAgB;AAChB,MAAM,CAAC,MAAM,UAAU,GAAG,UAAU,CAAa,YAAY,CAAC,CAAC;AAG/D,gBAAgB;AAChB,MAAM,CAAC,MAAM,0BAA0B,GAAG,UAAU,CAA6B,4BAA4B,CAAC,CAAC;AAG/G,gBAAgB;AAChB,MAAM,CAAC,MAAM,SAAS,GAAG,UAAU,CAAY,WAAW,CAAC,CAAC;AAG5D,gBAAgB;AAChB,MAAM,CAAC,MAAM,oBAAoB,GAAG,UAAU,CAAuB,sBAAsB,CAAC,CAAC;AAO7F,gBAAgB;AAChB,MAAM,CAAC,MAAM,oBAAoB,GAAG,UAAU,CAAuB,sBAAsB,CAAC,CAAC;AAG7F,gBAAgB;AAChB,MAAM,CAAC,MAAM,qBAAqB,GAAG,UAAU,CAAwB,uBAAuB,CAAC,CAAC;AAQhG,gBAAgB;AAChB,MAAM,CAAC,MAAM,kBAAkB,GAAG,UAAU,CAAqB,oBAAoB,CAAC,CAAC;AAGvF,gBAAgB;AAChB,MAAM,CAAC,MAAM,UAAU,GAAG,UAAU,CAAa,YAAY,CAAC,CAAC;AAG/D,gBAAgB;AAChB,MAAM,CAAC,MAAM,cAAc,GAAG,UAAU,CAAiB,gBAAgB,CAAC,CAAC;AAU3E,gBAAgB;AAChB,MAAM,CAAC,MAAM,yBAAyB,GAAG,UAAU,CAA4B,2BAA2B,CAAC,CAAC;AAkB5G,gBAAgB;AAChB,MAAM,CAAC,MAAM,kBAAkB,GAAG,UAAU,CAAqB,oBAAoB,CAAC,CAAC;AAiBvF,gBAAgB;AAChB,MAAM,CAAC,MAAM,cAAc,GAAG,UAAU,CAAiB,gBAAgB,CAAC,CAAC;AAM3E,gBAAgB;AAChB,MAAM,CAAC,MAAM,oBAAoB,GAAG,UAAU,CAAuB,sBAAsB,CAAC,CAAC;AAM7F,gBAAgB;AAChB,MAAM,CAAC,MAAM,cAAc,GAAG,UAAU,CAAiB,gBAAgB,CAAC,CAAC;AAS3E,gBAAgB;AAChB,MAAM,CAAC,MAAM,cAAc,GAAG,UAAU,CAAiB,gBAAgB,CAAC,CAAC","sourcesContent":["// NOTE: All errors thrown in the CameraKit package have to be defined here.\n// Error types are not infered from error factories for API doc purposes and consistency.\n\n/**\n * Helper type to extract type generic parameter.\n */\ntype ExtractName<P> = P extends NamedError<infer T> ? T : never;\n\n/**\n * All errors are expected to have \"Error\" suffix.\n */\ntype ErrorName = `${string}Error`;\n\ntype NamedError<Name extends ErrorName> = Error & { name: Name };\n\n/**\n * Removes the top trace line from the stack.\n */\nfunction cleanErrorStack(stack: string): string {\n    const [first, _, ...rest] = stack.split(\"\\n\");\n    return [first, ...rest].join(\"\\n\");\n}\n\n/**\n * Creates error factory that ensures Error.prototype.name field value.\n *\n * NOTE: exported only for unit tests.\n *\n * @param name Error name.\n * @returns Error factory function.\n * @internal\n */\nexport function namedError<\n    // default to never to ensure the type argument is specified\n    TError extends NamedError<TName> = never,\n    // default to provided error name to make this type argument optional to reduce boilerplate\n    TName extends ErrorName = ExtractName<TError>\n>(name: TName) {\n    return (message: string, cause?: unknown): TError => {\n        const error = new Error(message, { cause });\n        error.name = name;\n        error.stack = error.stack && cleanErrorStack(error.stack);\n        // Safety: we set name above and therefore sure the type of error is correct\n        return error as TError;\n    };\n}\n\nexport type LegalError = NamedError<\"LegalError\">;\n/** @internal */\nexport const legalError = namedError<LegalError>(\"LegalError\");\n\nexport type LensContentValidationError = NamedError<\"LensContentValidationError\">;\n/** @internal */\nexport const lensContentValidationError = namedError<LensContentValidationError>(\"LensContentValidationError\");\n\nexport type LensError = NamedError<\"LensError\">;\n/** @internal */\nexport const lensError = namedError<LensError>(\"LensError\");\n\nexport type CameraKitSourceError = NamedError<\"CameraKitSourceError\">;\n/** @internal */\nexport const cameraKitSourceError = namedError<CameraKitSourceError>(\"CameraKitSourceError\");\n\n/**\n * The error triggered when a lens prompts the user to select an image, but the image fails to be successfully delivered\n * to the lens.\n */\nexport type LensImagePickerError = NamedError<\"LensImagePickerError\">;\n/** @internal */\nexport const lensImagePickerError = namedError<LensImagePickerError>(\"LensImagePickerError\");\n\nexport type CacheKeyNotFoundError = NamedError<\"CacheKeyNotFoundError\">;\n/** @internal */\nexport const cacheKeyNotFoundError = namedError<CacheKeyNotFoundError>(\"CacheKeyNotFoundError\");\n\n/**\n * Thrown by {@link bootstrapCameraKit} if provided configuration is invalid.\n *\n * @category Bootstrapping and Configuration\n */\nexport type ConfigurationError = NamedError<\"ConfigurationError\">;\n/** @internal */\nexport const configurationError = namedError<ConfigurationError>(\"ConfigurationError\");\n\nexport type WebGLError = NamedError<\"WebGLError\">;\n/** @internal */\nexport const webGLError = namedError<WebGLError>(\"WebGLError\");\n\nexport type BenchmarkError = NamedError<\"BenchmarkError\">;\n/** @internal */\nexport const benchmarkError = namedError<BenchmarkError>(\"BenchmarkError\");\n\n/**\n * Thrown by {@link bootstrapCameraKit} when the current platform is not supported by CameraKit.\n *\n * This can happen if the browser doesn't support a required feature (e.g. WebGL).\n *\n * @category Bootstrapping and Configuration\n */\nexport type PlatformNotSupportedError = NamedError<\"PlatformNotSupportedError\">;\n/** @internal */\nexport const platformNotSupportedError = namedError<PlatformNotSupportedError>(\"PlatformNotSupportedError\");\n\n/**\n * This error occurs if a Lens is unable to continue rendering.\n *\n * If this error occurs, Camera Kit automatically removes the Lens from the session.\n * It's always a good idea to handle this error and update the user experience accordingly.\n * For example, you could remove the faulty Lens from your Lens selection UI.\n *\n * ```ts\n * cameraKitSession.events.addEventListener('error', ({ detail }) => {\n *   if (detail.error.name === 'LensExecutionError') {\n *     console.log(`Lens ${detail.lens.name} encountered an error and was removed. Please pick a different lens.`)\n *   }\n * })\n * ```\n */\nexport type LensExecutionError = NamedError<\"LensExecutionError\">;\n/** @internal */\nexport const lensExecutionError = namedError<LensExecutionError>(\"LensExecutionError\");\n\n/**\n * This error occurs when a session becomes inoperable.\n *\n * It's always a good idea to handle this error and update the user experience accordingly.\n * For example, you could show a message to a user.\n *\n * ```ts\n * cameraKitSession.events.addEventListener('error', ({ detail }) => {\n *   if (detail.error.name === 'LensAbortError') {\n *     console.log(`Camera Kit encountered an unrecoverable error and became inoperable. Please refresh the page.`)\n *   }\n * })\n * ```\n */\nexport type LensAbortError = NamedError<\"LensAbortError\">;\n/** @internal */\nexport const lensAbortError = namedError<LensAbortError>(\"LensAbortError\");\n\n/**\n * Error thrown when LensCore asked to store lens data, but CameraKit failed storing that.\n */\nexport type PersistentStoreError = NamedError<\"PersistentStoreError\">;\n/** @internal */\nexport const persistentStoreError = namedError<PersistentStoreError>(\"PersistentStoreError\");\n\n/**\n * Error thrown when LensCore asked to provide an asset, but CameraKit failed providing that.\n */\nexport type LensAssetError = NamedError<\"LensAssetError\">;\n/** @internal */\nexport const lensAssetError = namedError<LensAssetError>(\"LensAssetError\");\n\n/**\n * Thrown by {@link bootstrapCameraKit} if an error occurs during SDK initializion or while downloading the render\n * engine WebAssembly.\n *\n * @category Bootstrapping and Configuration\n */\nexport type BootstrapError = NamedError<\"BootstrapError\">;\n/** @internal */\nexport const bootstrapError = namedError<BootstrapError>(\"BootstrapError\");\n"]}