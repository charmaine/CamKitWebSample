{"version":3,"file":"metricsEventTarget.js","sourceRoot":"","sources":["../../src/metrics/metricsEventTarget.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,oCAAoC,CAAC;AAEhE,OAAO,EAAE,gBAAgB,EAAE,MAAM,4BAA4B,CAAC;AA6C9D;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,yBAAyB,GAAG,UAAU,CAC/C,oBAAoB,EACpB,GAAuB,EAAE,CAAC,IAAI,gBAAgB,EAAE,CACnD,CAAC","sourcesContent":["import { Injectable } from \"../dependency-injection/Injectable\";\nimport { TypedCustomEvent } from \"../events/TypedCustomEvent\";\nimport { TypedEventTarget } from \"../events/TypedEventTarget\";\nimport { AssetValidationFailed } from \"../lens/assets/LensAssetsProvider\";\nimport { AssetDownload, LensDownload } from \"./reporters/reportLensAndAssetDownload\";\nimport { LensContentValidationFailed } from \"./reporters/reportLensValidationFailed\";\nimport { LensView } from \"./reporters/reportLensView\";\nimport { LensWait } from \"./reporters/reportLensWait\";\nimport { Session } from \"./reporters/reportUserSession\";\nimport { BenchmarkComplete } from \"./reporters/reportBenchmarks\";\nimport { LegalPrompt } from \"./reporters/reportLegalState\";\nimport { MakeTaggedBusinessEvent } from \"./businessEventsReporter\";\n\n/**\n * The Exception metric reports every time we handle an exception.\n */\nexport type Exception = MakeTaggedBusinessEvent<\"exception\">;\n\nexport type CameraKitBootstrapMetricEvents = TypedCustomEvent<BenchmarkComplete[\"name\"], BenchmarkComplete>;\n\nexport type CameraKitSessionMetricEvents =\n    | TypedCustomEvent<LegalPrompt[\"name\"], LegalPrompt>\n    | TypedCustomEvent<LensView[\"name\"], LensView>\n    | TypedCustomEvent<LensWait[\"name\"], LensWait>\n    | TypedCustomEvent<LensDownload[\"name\"], LensDownload>\n    | TypedCustomEvent<AssetDownload[\"name\"], AssetDownload>\n    | TypedCustomEvent<AssetValidationFailed[\"name\"], AssetValidationFailed>\n    | TypedCustomEvent<LensContentValidationFailed[\"name\"], LensContentValidationFailed>\n    | TypedCustomEvent<Session[\"name\"], Session>;\n\n/**\n * A union of all event types emitted by the {@link CameraKit.events} event emitter.\n *\n * @internal\n */\nexport type CameraKitMetricEvents =\n    | CameraKitSessionMetricEvents\n    | CameraKitBootstrapMetricEvents\n    | TypedCustomEvent<Exception[\"name\"], Exception>;\n\n/**\n * This event target may be used to listen for any of the metrics events reported by CameraKit.\n *\n * @internal\n */\nexport type MetricsEventTarget = TypedEventTarget<CameraKitMetricEvents>;\n\n/**\n * Any metrics that we wish to emit to applications should be dispatched on this event target.\n *\n * Our business events reporter also listens to this event target, and may report the emitted metrics to our backend.\n *\n * @internal\n */\nexport const metricsEventTargetFactory = Injectable(\n    \"metricsEventTarget\",\n    (): MetricsEventTarget => new TypedEventTarget()\n);\n"]}