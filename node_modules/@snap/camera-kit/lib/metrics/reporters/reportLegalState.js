import { forActions } from "@snap/state-management";
import { map } from "rxjs";
import { Injectable } from "../../dependency-injection/Injectable";
import { TypedCustomEvent } from "../../events/TypedCustomEvent";
import { CameraKitLegalPromptResult } from "../../generated-proto/blizzard/cameraKitEvents";
import { legalStateFactory } from "../../legal/legalState";
import { metricsEventTargetFactory } from "../metricsEventTarget";
import { operationalMetricReporterFactory, } from "../operational/operationalMetricsReporter";
/**
 * @internal
 */
export const reportLegalState = Injectable("reportLegalState", [legalStateFactory.token, metricsEventTargetFactory.token, operationalMetricReporterFactory.token], (legalState, metricsEventTarget, operationalMetricsReporter) => {
    legalState.events
        .pipe(forActions("accept", "reject"), map(([{ data, name }]) => ({
        name: "legalPrompt",
        legalPromptId: data,
        legalPromptResult: name === "accept"
            ? CameraKitLegalPromptResult.CAMERA_KIT_LEGAL_PROMPT_ACCEPTED
            : CameraKitLegalPromptResult.CAMERA_KIT_LEGAL_PROMPT_DISMISSED,
    })))
        .subscribe({
        next: (legalPromptEvent) => {
            metricsEventTarget.dispatchEvent(new TypedCustomEvent("legalPrompt", legalPromptEvent));
            operationalMetricsReporter.count("legal_prompt_interaction", 1, new Map([
                [
                    "accepted",
                    (legalPromptEvent.legalPromptResult ===
                        CameraKitLegalPromptResult.CAMERA_KIT_LEGAL_PROMPT_ACCEPTED).toString(),
                ],
            ]));
        },
    });
});
//# sourceMappingURL=reportLegalState.js.map