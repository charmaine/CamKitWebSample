{"version":3,"file":"reportLensAndAssetDownload.js","sourceRoot":"","sources":["../../../src/metrics/reporters/reportLensAndAssetDownload.ts"],"names":[],"mappings":"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","sourcesContent":["import { assertUnreachable } from \"../../common/assertions\";\nimport { stringifyError } from \"../../common/errorHelpers\";\nimport { Injectable } from \"../../dependency-injection/Injectable\";\nimport { scan } from \"../../events/scan\";\nimport { TypedCustomEvent } from \"../../events/TypedCustomEvent\";\nimport {\n    Dimensions,\n    RequestStateEventTarget,\n    requestStateEventTargetFactory,\n} from \"../../handlers/requestStateEmittingHandler\";\nimport { MakeTaggedBusinessEvent } from \"../businessEventsReporter\";\nimport { CameraKitMetricEvents, MetricsEventTarget, metricsEventTargetFactory } from \"../metricsEventTarget\";\nimport {\n    operationalMetricReporterFactory,\n    OperationalMetricsReporter,\n} from \"../operational/operationalMetricsReporter\";\n\ntype InProgressMap = Map<number, { startTimeMs: number }>;\ninterface InProgress {\n    name: \"inProgress\";\n    inProgress: InProgressMap;\n}\ninterface Completed {\n    name: \"completed\";\n    inProgress: InProgressMap;\n    event: CameraKitMetricEvents;\n}\ntype RequestState = InProgress | Completed;\n\nconst relevantRequestTypes = [\"lens_content\", \"asset\"] as const;\nexport const isLensOrAssetRequest = (value: Dimensions): value is LensDownloadDimensions | AssetDownloadDimensions => {\n    const requestType = value[\"requestType\"];\n    // Safety: the cast makes the type less specific so we can check if any string is present in the tuple.\n    return typeof requestType === \"string\" && (relevantRequestTypes as readonly string[]).includes(requestType);\n};\n\n/**\n * The LensDownload metric is triggered by any download of lens content.\n *\n * It contains download stats, which lens was requested, and whether prefetch was used.\n *\n * It corresponds to the internal CameraKitLensDownload event, described here:\n * https://docs.google.com/document/d/1-kSzFWCWw9Qo3D08FR1_cqeHTsUtk9p3p3uOptzWDTY/edit#heading=h.stqom49qs91t\n */\nexport type LensDownload = MakeTaggedBusinessEvent<\"lensDownload\">;\nexport type LensDownloadDimensions = { requestType: \"lens_content\"; lensId: string };\n\n/**\n * The AssetDownload metric is triggered by any type of asset download.\n *\n * It contains download stats, which asset was requested, and whether prefetch was used.\n *\n * It corresponds to the internal CameraKitAssetDownload event, described here:\n * https://docs.google.com/document/d/1-kSzFWCWw9Qo3D08FR1_cqeHTsUtk9p3p3uOptzWDTY/edit#heading=h.vlormd1724fp\n */\nexport type AssetDownload = MakeTaggedBusinessEvent<\"assetDownload\">;\nexport type AssetDownloadDimensions = { requestType: \"asset\"; assetType: string; assetId: string; lensId: string };\n\nexport const reportLensAndAssetDownload = Injectable(\n    \"reportLensAndAssetDownload\",\n    [\n        metricsEventTargetFactory.token,\n        operationalMetricReporterFactory.token,\n        requestStateEventTargetFactory.token,\n    ] as const,\n    (\n        metricsEventTarget: MetricsEventTarget,\n        reporter: OperationalMetricsReporter,\n        requestStateEventTarget: RequestStateEventTarget\n    ) => {\n        scan<RequestState>({ name: \"inProgress\", inProgress: new Map() })(\n            requestStateEventTarget,\n            [\"started\", \"completed\", \"errored\"],\n            (state, event) => {\n                const { inProgress } = state;\n                const { dimensions, requestId, timeMs } = event.detail;\n\n                if (!isLensOrAssetRequest(dimensions)) return state;\n\n                switch (event.type) {\n                    case \"started\":\n                        inProgress.set(requestId, { startTimeMs: timeMs });\n                        return { name: \"inProgress\", inProgress };\n                    case \"completed\":\n                        const completedRequest = inProgress.get(requestId);\n                        if (!completedRequest) return state;\n                        inProgress.delete(requestId);\n\n                        const downloadTimeSec = (timeMs - completedRequest.startTimeMs) / 1000;\n                        const { sizeByte } = event.detail;\n\n                        switch (dimensions.requestType) {\n                            case \"lens_content\":\n                                return {\n                                    name: \"completed\",\n                                    inProgress,\n                                    event: new TypedCustomEvent(\"lensDownload\", {\n                                        name: \"lensDownload\",\n                                        lensId: dimensions.lensId,\n                                        automaticDownload: false,\n                                        sizeByte,\n                                        downloadTimeSec,\n                                    }),\n                                };\n                            case \"asset\":\n                                return {\n                                    name: \"completed\",\n                                    inProgress,\n                                    event: new TypedCustomEvent(\"assetDownload\", {\n                                        name: \"assetDownload\",\n                                        assetId: dimensions.assetId,\n                                        automaticDownload: false,\n                                        sizeByte,\n                                        downloadTimeSec,\n                                    }),\n                                };\n                            default:\n                                assertUnreachable(dimensions);\n                        }\n                    case \"errored\":\n                        const erroredRequest = inProgress.get(requestId);\n                        if (!erroredRequest) return state;\n                        inProgress.delete(requestId);\n                        const error = event.detail.error;\n                        return {\n                            name: \"completed\",\n                            inProgress,\n                            event: new TypedCustomEvent(\"exception\", {\n                                name: \"exception\",\n                                lensId: dimensions.lensId,\n                                type: dimensions.requestType === \"lens_content\" ? \"lens\" : \"asset\",\n                                reason: stringifyError(error),\n                            }),\n                        };\n                    default:\n                        assertUnreachable(event);\n                }\n            }\n        ).addEventListener(\"state\", ({ detail: state }) => {\n            if (state.name !== \"completed\") return;\n            metricsEventTarget.dispatchEvent(state.event);\n            if (state.event.detail.name === \"exception\") {\n                reporter.count(\"handled_exception\", 1, new Map([[\"type\", state.event.detail.type]]));\n            }\n        });\n    }\n);\n"]}