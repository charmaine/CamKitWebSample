{"version":3,"file":"reportBenchmarks.js","sourceRoot":"","sources":["../../../src/metrics/reporters/reportBenchmarks.ts"],"names":[],"mappings":";AAAA,OAAO,EAA0B,kBAAkB,EAAE,MAAM,qBAAqB,CAAC;AACjF,OAAO,EAAE,UAAU,EAAE,MAAM,uCAAuC,CAAC;AACnE,OAAO,EAAE,gBAAgB,EAAE,MAAM,+BAA+B,CAAC;AAEjE,OAAO,EAAsB,yBAAyB,EAAE,MAAM,uBAAuB,CAAC;AACtF,OAAO,EACH,gCAAgC,GAEnC,MAAM,2CAA2C,CAAC;AAEnD,8CAA8C;AAC9C,MAAM,oBAAoB,GAAG,CAAC,QAAQ,CAAC,CAAC;AAIxC,MAAM,CAAC,MAAM,gBAAgB,GAAG,UAAU,CACtC,kBAAkB,EAClB,CAAC,yBAAyB,CAAC,KAAK,EAAE,gCAAgC,CAAC,KAAK,EAAE,kBAAkB,CAAU,EACtG,CACI,kBAAsC,EACtC,QAAoC,EACpC,MAA8B,EAChC,EAAE;IACA,IAAI,MAAM,CAAC,eAAe,KAAK,SAAS;QAAE,OAAO;IACjD,uGAAuG;IACvG,6CAA6C;IAC7C,MAAM,eAAe,GAAG,MAAM,MAAM,CAAC,eAAe,CAAC;IACrD,MAAM,aAAa,GAAiF;QAChG,IAAI,EAAE,mBAAmB;QACzB,kBAAkB,EAAE,eAAe,CAAC,OAAO;QAC3C,iBAAiB,EAAE,eAAe,CAAC,iBAAiB;KACvD,CAAC;IACF,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,qBAAqB,EAAE,eAAe,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1F,KAAK,MAAM,SAAS,IAAI,eAAe,CAAC,UAAU,EAAE;QAChD,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC;YAAE,SAAS;QAC7D,MAAM,iBAAiB,mCAChB,aAAa,KAChB,aAAa,EAAE,SAAS,CAAC,IAAI,EAC7B,cAAc,EAAE,SAAS,CAAC,KAAK,GAClC,CAAC;QACF,kBAAkB,CAAC,aAAa,CAAC,IAAI,gBAAgB,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,CAAC,CAAC;QAC/F,QAAQ,CAAC,SAAS,CAAC,aAAa,SAAS,CAAC,IAAI,EAAE,EAAE,SAAS,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;KAClF;AACL,CAAC,CAAA,CACJ,CAAC","sourcesContent":["import { CameraKitConfiguration, configurationToken } from \"../../configuration\";\nimport { Injectable } from \"../../dependency-injection/Injectable\";\nimport { TypedCustomEvent } from \"../../events/TypedCustomEvent\";\nimport { MakeTaggedBusinessEvent } from \"../businessEventsReporter\";\nimport { MetricsEventTarget, metricsEventTargetFactory } from \"../metricsEventTarget\";\nimport {\n    operationalMetricReporterFactory,\n    OperationalMetricsReporter,\n} from \"../operational/operationalMetricsReporter\";\n\n// Allowlist the benchmarks we wish to report.\nconst reportableBenchmarks = [\"gflops\"];\n\nexport type BenchmarkComplete = MakeTaggedBusinessEvent<\"benchmarkComplete\">;\n\nexport const reportBenchmarks = Injectable(\n    \"reportBenchmarks\",\n    [metricsEventTargetFactory.token, operationalMetricReporterFactory.token, configurationToken] as const,\n    async (\n        metricsEventTarget: MetricsEventTarget,\n        reporter: OperationalMetricsReporter,\n        config: CameraKitConfiguration\n    ) => {\n        if (config.lensPerformance === undefined) return;\n        // Safety: config.lensPerformance cannot reject â€“ all Promises contained in CameraKitConfiguration have\n        // catch blocks which return a default value.\n        const lensPerformance = await config.lensPerformance;\n        const baseBenchmark: Pick<BenchmarkComplete, \"name\" | \"performanceCluster\" | \"webglRendererInfo\"> = {\n            name: \"benchmarkComplete\",\n            performanceCluster: lensPerformance.cluster,\n            webglRendererInfo: lensPerformance.webglRendererInfo,\n        };\n        const dimensions = new Map([[\"performance_cluster\", lensPerformance.cluster.toString()]]);\n        for (const benchmark of lensPerformance.benchmarks) {\n            if (!reportableBenchmarks.includes(benchmark.name)) continue;\n            const benchmarkComplete: BenchmarkComplete = {\n                ...baseBenchmark,\n                benchmarkName: benchmark.name,\n                benchmarkValue: benchmark.value,\n            };\n            metricsEventTarget.dispatchEvent(new TypedCustomEvent(\"benchmarkComplete\", benchmarkComplete));\n            reporter.histogram(`benchmark.${benchmark.name}`, benchmark.value, dimensions);\n        }\n    }\n);\n"]}