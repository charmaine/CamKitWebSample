{"version":3,"file":"reportUserSession.js","sourceRoot":"","sources":["../../../src/metrics/reporters/reportUserSession.ts"],"names":[],"mappings":"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","sourcesContent":["import { dayFormatter, monthFormatter } from \"../../common/date\";\nimport { Injectable } from \"../../dependency-injection/Injectable\";\nimport { TypedCustomEvent } from \"../../events/TypedCustomEvent\";\nimport { DailySessionBucket } from \"../../generated-proto/blizzard/cameraKitEvents\";\nimport { IndexedDBPersistence } from \"../../persistence/IndexedDBPersistence\";\nimport { MakeTaggedBusinessEvent } from \"../businessEventsReporter\";\nimport { MetricsEventTarget, metricsEventTargetFactory } from \"../metricsEventTarget\";\n\ninterface UserSessionInfo {\n    mostRecentSessionStartDate: Date;\n    dailySessionBucket: DailySessionBucket;\n}\n\n/**\n * The Session metric reports each user session.\n */\nexport type Session = MakeTaggedBusinessEvent<\"session\">;\n\n/**\n * @internal\n */\nexport const reportUserSession = Injectable(\n    \"reportUserSession\",\n    [metricsEventTargetFactory.token] as const,\n    async (metricsEventTarget: MetricsEventTarget): Promise<void> => {\n        const userSessionKey = \"userSessionInfo\";\n        const db = new IndexedDBPersistence<UserSessionInfo>({ databaseName: \"SessionHistory\" });\n        // We standardize all user dates to PST as per our documentation:\n        // https://docs.google.com/document/d/1-kSzFWCWw9Qo3D08FR1_cqeHTsUtk9p3p3uOptzWDTY/\n        const date = new Date();\n        const formattedDate = dayFormatter.format(date);\n        const formattedDateParts = dayFormatter.formatToParts(date);\n        const { day, month, year } = formattedDateParts.reduce(\n            (acc: Record<string, number>, { type, value }) => ({\n                ...acc,\n                [type]: parseInt(value),\n            }),\n            {}\n        );\n\n        const userSessionInfo = await db.retrieve(userSessionKey);\n        const mostRecentSessionStartDate = userSessionInfo?.mostRecentSessionStartDate;\n        const formattedMostRecentSessionStartDate = mostRecentSessionStartDate\n            ? dayFormatter.format(mostRecentSessionStartDate)\n            : null;\n\n        const dailySessionBucketMap = new Map<number, DailySessionBucket>([\n            [1, DailySessionBucket.ONE_SESSION],\n            [2, DailySessionBucket.TWO_SESSION],\n            [3, DailySessionBucket.THREE_SESSION],\n            [4, DailySessionBucket.FOUR_SESSION],\n            [5, DailySessionBucket.FIVE_SESSION],\n            [6, DailySessionBucket.SIX_SESSION],\n            [7, DailySessionBucket.SEVEN_SESSION],\n            [8, DailySessionBucket.EIGHT_SESSION],\n            [9, DailySessionBucket.NINE_SESSION],\n        ]);\n        let dailySessionBucket = userSessionInfo?.dailySessionBucket ?? DailySessionBucket.NO_SESSION_BUCKET;\n        let isFirstWithinMonth = false;\n        if (formattedMostRecentSessionStartDate === formattedDate) {\n            dailySessionBucket =\n                dailySessionBucketMap.get(dailySessionBucket + 1) ?? DailySessionBucket.TEN_OR_MORE_SESSION;\n            await db.store(userSessionKey, {\n                mostRecentSessionStartDate: date,\n                dailySessionBucket,\n            });\n        } else {\n            isFirstWithinMonth =\n                !mostRecentSessionStartDate ||\n                monthFormatter.format(mostRecentSessionStartDate) !== monthFormatter.format(date);\n            await db.store(userSessionKey, {\n                mostRecentSessionStartDate: date,\n                dailySessionBucket: (dailySessionBucket = DailySessionBucket.ONE_SESSION),\n            });\n        }\n        const session: Session = {\n            name: \"session\",\n            dailySessionBucket,\n            isFirstWithinMonth,\n            month,\n            day,\n            year,\n        };\n        metricsEventTarget.dispatchEvent(new TypedCustomEvent(\"session\", session));\n    }\n);\n"]}