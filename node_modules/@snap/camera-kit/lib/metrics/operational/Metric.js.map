{"version":3,"file":"Metric.js","sourceRoot":"","sources":["../../../src/metrics/operational/Metric.ts"],"names":[],"mappings":"AAIA,MAAM,aAAa,GAAG,GAAG,CAAC;AAC1B,MAAM,kBAAkB,GAAG,GAAG,CAAC;AAC/B,MAAM,cAAc,GAAG,IAAI,MAAM,CAAC,IAAI,aAAa,KAAK,aAAa,IAAI,EAAE,GAAG,CAAC,CAAC;AAKhF,gBAAgB;AAChB,MAAM,OAAgB,MAAM;IACxB,YAAqB,IAAY,EAAW,aAA+B,EAAE;QAAxD,SAAI,GAAJ,IAAI,CAAQ;QAAW,eAAU,GAAV,UAAU,CAAuB;IAAG,CAAC;IAEjF,KAAK,CACD,WAAiC,EACjC,IAAe,EACf,aAA+B,EAAE;QAEjC,OAAO,IAAI,WAAW,CAAC,GAAG,IAAI,CAAC,IAAI,GAAG,aAAa,GAAG,IAAI,EAAE,EAAE,UAAU,CAAC,CAAC;IAC9E,CAAC;CAGJ;AAKD,gBAAgB;AAChB,MAAM,UAAU,eAAe,CAAC,KAAe;IAC3C,OAAO,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;AACjE,CAAC;AAED,gBAAgB;AAChB,MAAM,UAAU,yBAAyB,CAAC,UAA4B;IAClE,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,EAAE,CAAC;IACpD,OAAO,GAAG,kBAAkB,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;SAChE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;SACtC,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC;AACpC,CAAC","sourcesContent":["import { OperationalMetric } from \"../../generated-proto/pb_schema/camera_kit/v3/operational_metrics\";\n\ntype MetricConstructor<T> = new (name: string, dimensions: MetricDimensions) => T;\n\nconst nameDelimiter = \"_\";\nconst dimensionDelimiter = \".\";\nconst delimiterRegex = new RegExp(`^${nameDelimiter}+|${nameDelimiter}+$`, \"g\");\n\n/** @internal */\nexport type MetricDimensions = Record<string, string | number>;\n\n/** @internal */\nexport abstract class Metric {\n    constructor(readonly name: string, readonly dimensions: MetricDimensions = {}) {}\n\n    child<ChildName extends string, T extends Metric>(\n        constructor: MetricConstructor<T>,\n        name: ChildName,\n        dimensions: MetricDimensions = {}\n    ): T {\n        return new constructor(`${this.name}${nameDelimiter}${name}`, dimensions);\n    }\n\n    abstract toOperationalMetric(): Required<OperationalMetric>[];\n}\n\n/** @internal */\nexport type JoinMetricNames<Parent extends string, Child extends string> = `${Parent}${typeof nameDelimiter}${Child}`;\n\n/** @internal */\nexport function joinMetricNames(names: string[]): string {\n    return names.join(nameDelimiter).replace(delimiterRegex, \"\");\n}\n\n/** @internal */\nexport function serializeMetricDimensions(dimensions: MetricDimensions): string {\n    if (Object.keys(dimensions).length === 0) return \"\";\n    return `${dimensionDelimiter}${Array.from(Object.entries(dimensions))\n        .map((d) => d.join(dimensionDelimiter))\n        .join(dimensionDelimiter)}`;\n}\n"]}