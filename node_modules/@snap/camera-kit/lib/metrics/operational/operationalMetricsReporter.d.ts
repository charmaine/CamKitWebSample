import { FetchHandler } from "../../handlers/defaultFetchHandler";
import { OperationalMetric } from "../../generated-proto/pb_schema/camera_kit/v3/operational_metrics";
import { PageVisibility } from "../../common/pageVisibility";
import { CameraKitConfiguration } from "../../configuration";
import { Metric } from "./Metric";
type MetricsHandler = (metric: OperationalMetric) => Promise<void>;
/**
 * Use this class to report operational metrics â€“ these are metrics that describe aspects of the SDK's performance,
 * which may be used to assess and investigate operational issues.
 */
/** @internal */
export declare class OperationalMetricsReporter {
    private readonly metricsHandler;
    constructor(metricsHandler: MetricsHandler);
    /**
     * Record a count.
     *
     * @param name
     * @param count
     * @param dimensions An optional Map containing dimensions which describe the metric.
     * For example: `new Map([['status', '200']])`
     * @returns Promise which resolves when the metric has been handled.
     */
    count(name: string, count: number, dimensions?: Map<string, string>): Promise<void>;
    /**
     * Record a duration in milliseconds.
     *
     * @param name
     * @param latencyMillis
     * @param dimensions An optional Map containing dimensions which describe the metric.
     * For example: `new Map([['status', '200']])`
     * @returns Promise which resolves when the metric has been handled.
     */
    timer(name: string, latencyMillis: number, dimensions?: Map<string, string>): Promise<void>;
    /**
     * Record a histogram.
     *
     * @param name
     * @param histogram
     * @param dimensions An optional Map containing dimensions which describe the metric.
     * For example: `new Map([['status', '200']])`
     * @returns Promise which resolves when the metric has been handled.
     */
    histogram(name: string, histogram: number, dimensions?: Map<string, string>): Promise<void>;
    /**
     * TODO: This entire class in no longer necessary, since the new Timer/Count/Histogram classes offer a cleaner API
     * for recording metrics. Once we migrate all operational metrics to use those new APIs, this class can be removed
     * and call sites will just call the metrics handler directly.
     *
     * @param metric Any concrete Metric (e.g. Count, Timer, Histogram)
     * @returns
     */
    report(metric: Metric): Promise<void>;
    private record;
}
/**
 * @internal
 */
export declare const operationalMetricReporterFactory: {
    (args_0: FetchHandler, args_1: PageVisibility, args_2: CameraKitConfiguration): OperationalMetricsReporter;
    token: "operationalMetricsReporter";
    dependencies: readonly ["metricsHandler", "pageVisibility", "configuration"];
};
export {};
